// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Ported from SDL.h and corresponding dependencies of SDL3.
// Original source is Copyright (C) 1997-2024 Sam Lantinga. Licensed under the zlib license.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using static Silk.NET.SDL.PenAxis;
using static Silk.NET.SDL.Scancode;

namespace Silk.NET.SDL;

public unsafe partial class Sdl : ISdl, ISdl.Static
{
    public partial class DllImport : ISdl.Static
    {
        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* AcquireCameraFrame(
            SDL_Camera* camera,
            [NativeTypeName("Uint64 *")] ulong* timestampNS
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> AcquireCameraFrame(
            Ref<SDL_Camera> camera,
            [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
        )
        {
            fixed (ulong* __dsl_timestampNS = timestampNS)
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (Surface*)AcquireCameraFrame(__dsl_camera, __dsl_timestampNS);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)AddEventWatch(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping)
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (int)AddGamepadMapping(__dsl_mapping);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] sbyte* file
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (int)AddGamepadMappingsFromFile(__dsl_file);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AddGamepadMappingsFromIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (int)AddGamepadMappingsFromIO(__dsl_src, (int)closeio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AddHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)AddHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_TimerID")]
        public static extern uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
            void* param2
        );

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
            Ref param2
        )
        {
            fixed (void* __dsl_param2 = param2)
            {
                return (uint)AddTimer(interval, callback, __dsl_param2);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AddVulkanRenderSemaphores(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddVulkanRenderSemaphores(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)AddVulkanRenderSemaphores(
                    __dsl_renderer,
                    wait_stage_mask,
                    wait_semaphore,
                    signal_semaphore
                );
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr AllocateEventMemory([NativeTypeName("size_t")] nuint size) =>
            (void*)AllocateEventMemoryRaw(size);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AllocateEventMemory")]
        public static extern void* AllocateEventMemoryRaw([NativeTypeName("size_t")] nuint size);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AtomicAdd(AtomicInt* a, int v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicAdd")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicAdd(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AtomicAdd(__dsl_a, v);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int AtomicCompareAndSwap(AtomicInt* a, int oldval, int newval);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> AtomicCompareAndSwap(Ref<AtomicInt> a, int oldval, int newval)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (MaybeBool<int>)(int)AtomicCompareAndSwap(__dsl_a, oldval, newval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int AtomicCompareAndSwapPointer(void** a, void* oldval, void* newval);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwapPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> AtomicCompareAndSwapPointer(Ref2D a, Ref oldval, Ref newval)
        {
            fixed (void* __dsl_newval = newval)
            fixed (void* __dsl_oldval = oldval)
            fixed (void** __dsl_a = a)
            {
                return (MaybeBool<int>)
                    (int)AtomicCompareAndSwapPointer(__dsl_a, __dsl_oldval, __dsl_newval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AtomicGet(AtomicInt* a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicGet(Ref<AtomicInt> a)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AtomicGet(__dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* AtomicGetPtr(void** a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr AtomicGetPtr(Ref2D a)
        {
            fixed (void** __dsl_a = a)
            {
                return (void*)AtomicGetPtr(__dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int AtomicSet(AtomicInt* a, int v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicSet(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AtomicSet(__dsl_a, v);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* AtomicSetPtr(void** a, void* v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr AtomicSetPtr(Ref2D a, Ref v)
        {
            fixed (void* __dsl_v = v)
            fixed (void** __dsl_a = a)
            {
                return (void*)AtomicSetPtr(__dsl_a, __dsl_v);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint AttachVirtualJoystick(
            JoystickType type,
            int naxes,
            int nbuttons,
            int nhats
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint AttachVirtualJoystickEx(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
        );

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystickEx")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystickEx(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
        )
        {
            fixed (VirtualJoystickDesc* __dsl_desc = desc)
            {
                return (uint)AttachVirtualJoystickEx(__dsl_desc);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        public static MaybeBool<int> AudioDevicePaused(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => (MaybeBool<int>)(int)AudioDevicePausedRaw(dev);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_AudioDevicePaused")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int AudioDevicePausedRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            SDL_AudioStream* stream
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<SDL_AudioStream> stream
        )
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)BindAudioStream(devid, __dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            SDL_AudioStream** streams,
            int num_streams
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref2D<SDL_AudioStream> streams,
            int num_streams
        )
        {
            fixed (SDL_AudioStream** __dsl_streams = streams)
            {
                return (int)BindAudioStreams(devid, __dsl_streams, num_streams);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BlitSurface(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            Rect* dstrect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurface(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurface(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BlitSurfaceScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            Rect* dstrect,
            ScaleMode scaleMode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurfaceScaled(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BlitSurfaceUnchecked(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceUnchecked(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurfaceUnchecked(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BlitSurfaceUncheckedScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceUncheckedScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurfaceUncheckedScaled(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int BroadcastCondition(SDL_Condition* cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BroadcastCondition(Ref<SDL_Condition> cond)
        {
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)BroadcastCondition(__dsl_cond);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CaptureMouse([NativeTypeName("SDL_bool")] int enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        public static int CaptureMouse([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
            (int)CaptureMouse((int)enabled);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CleanupTLS();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ClearAudioStream(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)ClearAudioStream(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ClearClipboardData();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ClearComposition();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ClearError();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)ClearProperty(props, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CloseAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CloseCamera(SDL_Camera* camera);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseCamera(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                CloseCamera(__dsl_camera);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CloseGamepad(SDL_Gamepad* gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseGamepad(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                CloseGamepad(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CloseHaptic(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseHaptic(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                CloseHaptic(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CloseIO(SDL_IOStream* context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CloseIO(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (int)CloseIO(__dsl_context);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CloseJoystick(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseJoystick(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                CloseJoystick(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void CloseSensor(SDL_Sensor* sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseSensor(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                CloseSensor(__dsl_sensor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CloseStorage(SDL_Storage* storage);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CloseStorage(Ref<SDL_Storage> storage)
        {
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)CloseStorage(__dsl_storage);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern BlendMode ComposeCustomBlendMode(
            BlendFactor srcColorFactor,
            BlendFactor dstColorFactor,
            BlendOperation colorOperation,
            BlendFactor srcAlphaFactor,
            BlendFactor dstAlphaFactor,
            BlendOperation alphaOperation
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const Uint8 *")] byte* src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
            [NativeTypeName("Uint8 **")] byte** dst_data,
            int* dst_len
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
            Ref<int> dst_len
        )
        {
            fixed (int* __dsl_dst_len = dst_len)
            fixed (byte** __dsl_dst_data = dst_data)
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (byte* __dsl_src_data = src_data)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (int)ConvertAudioSamples(
                    __dsl_src_spec,
                    __dsl_src_data,
                    src_len,
                    __dsl_dst_spec,
                    __dsl_dst_data,
                    __dsl_dst_len
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ConvertEventToRenderCoordinates(
            SDL_Renderer* renderer,
            Event* @event
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertEventToRenderCoordinates(
            Ref<SDL_Renderer> renderer,
            Ref<Event> @event
        )
        {
            fixed (Event* __dsl_event = @event)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)ConvertEventToRenderCoordinates(__dsl_renderer, __dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ConvertPixels(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            void* dst,
            int dst_pitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertPixels(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (int)ConvertPixels(
                    width,
                    height,
                    src_format,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    __dsl_dst,
                    dst_pitch
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormatEnum src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            void* dst,
            int dst_pitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormatEnum src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (int)ConvertPixelsAndColorspace(
                    width,
                    height,
                    src_format,
                    src_colorspace,
                    src_properties,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    dst_colorspace,
                    dst_properties,
                    __dsl_dst,
                    dst_pitch
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* ConvertSurface(
            Surface* surface,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurface(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format
        )
        {
            fixed (PixelFormat* __dsl_format = format)
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurface(__dsl_surface, __dsl_format);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* ConvertSurfaceFormat(
            Surface* surface,
            PixelFormatEnum pixel_format
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurfaceFormat(
            Ref<Surface> surface,
            PixelFormatEnum pixel_format
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurfaceFormat(__dsl_surface, pixel_format);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* ConvertSurfaceFormatAndColorspace(
            Surface* surface,
            PixelFormatEnum pixel_format,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormatAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurfaceFormatAndColorspace(
            Ref<Surface> surface,
            PixelFormatEnum pixel_format,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurfaceFormatAndColorspace(
                    __dsl_surface,
                    pixel_format,
                    colorspace,
                    props
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CopyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_AudioStream* CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_AudioStream> CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (SDL_AudioStream*)CreateAudioStream(__dsl_src_spec, __dsl_dst_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Cursor* CreateColorCursor(Surface* surface, int hot_x, int hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (SDL_Cursor*)CreateColorCursor(__dsl_surface, hot_x, hot_y);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Condition> CreateCondition() => (SDL_Condition*)CreateConditionRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateCondition")]
        public static extern SDL_Condition* CreateConditionRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Cursor* CreateCursor(
            [NativeTypeName("const Uint8 *")] byte* data,
            [NativeTypeName("const Uint8 *")] byte* mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> CreateCursor(
            [NativeTypeName("const Uint8 *")] Ref<byte> data,
            [NativeTypeName("const Uint8 *")] Ref<byte> mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        )
        {
            fixed (byte* __dsl_mask = mask)
            fixed (byte* __dsl_data = data)
            {
                return (SDL_Cursor*)CreateCursor(__dsl_data, __dsl_mask, w, h, hot_x, hot_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CreateDirectory([NativeTypeName("const char *")] sbyte* path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (int)CreateDirectory(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CreateHapticEffect(
            SDL_Haptic* haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateHapticEffect(
            Ref<SDL_Haptic> haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)CreateHapticEffect(__dsl_haptic, __dsl_effect);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Mutex> CreateMutex() => (SDL_Mutex*)CreateMutexRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateMutex")]
        public static extern SDL_Mutex* CreateMutexRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> CreatePalette(int ncolors) =>
            (Palette*)CreatePaletteRaw(ncolors);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreatePalette")]
        public static extern Palette* CreatePaletteRaw(int ncolors);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<PixelFormat> CreatePixelFormat(PixelFormatEnum pixel_format) =>
            (PixelFormat*)CreatePixelFormatRaw(pixel_format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreatePixelFormat")]
        public static extern PixelFormat* CreatePixelFormatRaw(PixelFormatEnum pixel_format);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Window* CreatePopupWindow(
            SDL_Window* parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> CreatePopupWindow(
            Ref<SDL_Window> parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        )
        {
            fixed (SDL_Window* __dsl_parent = parent)
            {
                return (SDL_Window*)CreatePopupWindow(
                    __dsl_parent,
                    offset_x,
                    offset_y,
                    w,
                    h,
                    flags
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint CreateProperties();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Renderer* CreateRenderer(
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Uint32")] uint flags
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> CreateRenderer(
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Uint32")] uint flags
        )
        {
            fixed (sbyte* __dsl_name = name)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (SDL_Renderer*)CreateRenderer(__dsl_window, __dsl_name, flags);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> CreateRendererWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => (SDL_Renderer*)CreateRendererWithPropertiesRaw(props);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateRendererWithProperties")]
        public static extern SDL_Renderer* CreateRendererWithPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_RWLock> CreateRWLock() => (SDL_RWLock*)CreateRWLockRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateRWLock")]
        public static extern SDL_RWLock* CreateRWLockRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Semaphore> CreateSemaphore(
            [NativeTypeName("Uint32")] uint initial_value
        ) => (SDL_Semaphore*)CreateSemaphoreRaw(initial_value);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSemaphore")]
        public static extern SDL_Semaphore* CreateSemaphoreRaw(
            [NativeTypeName("Uint32")] uint initial_value
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Renderer* CreateSoftwareRenderer(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> CreateSoftwareRenderer(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (SDL_Renderer*)CreateSoftwareRenderer(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CreateStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)CreateStorageDirectory(__dsl_storage, __dsl_path);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurface(int width, int height, PixelFormatEnum format) =>
            (Surface*)CreateSurfaceRaw(width, height, format);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* CreateSurfaceFrom(
            void* pixels,
            int width,
            int height,
            int pitch,
            PixelFormatEnum format
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurfaceFrom(
            Ref pixels,
            int width,
            int height,
            int pitch,
            PixelFormatEnum format
        )
        {
            fixed (void* __dsl_pixels = pixels)
            {
                return (Surface*)CreateSurfaceFrom(__dsl_pixels, width, height, pitch, format);
            }
        }

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSurface")]
        public static extern Surface* CreateSurfaceRaw(
            int width,
            int height,
            PixelFormatEnum format
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> CreateSystemCursor(SystemCursor id) =>
            (SDL_Cursor*)CreateSystemCursorRaw(id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateSystemCursor")]
        public static extern SDL_Cursor* CreateSystemCursorRaw(SystemCursor id);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Texture* CreateTexture(
            SDL_Renderer* renderer,
            PixelFormatEnum format,
            int access,
            int w,
            int h
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> CreateTexture(
            Ref<SDL_Renderer> renderer,
            PixelFormatEnum format,
            int access,
            int w,
            int h
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)CreateTexture(__dsl_renderer, format, access, w, h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Texture* CreateTextureFromSurface(
            SDL_Renderer* renderer,
            Surface* surface
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> CreateTextureFromSurface(
            Ref<SDL_Renderer> renderer,
            Ref<Surface> surface
        )
        {
            fixed (Surface* __dsl_surface = surface)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)CreateTextureFromSurface(__dsl_renderer, __dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Texture* CreateTextureWithProperties(
            SDL_Renderer* renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> CreateTextureWithProperties(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)CreateTextureWithProperties(__dsl_renderer, props);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Thread* CreateThread(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] sbyte* name,
            void* data
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Thread> CreateThread(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref data
        )
        {
            fixed (void* __dsl_data = data)
            fixed (sbyte* __dsl_name = name)
            {
                return (SDL_Thread*)CreateThread(fn, __dsl_name, __dsl_data);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Thread* CreateThreadWithStackSize(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const size_t")] nuint stacksize,
            void* data
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithStackSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Thread> CreateThreadWithStackSize(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const size_t")] nuint stacksize,
            Ref data
        )
        {
            fixed (void* __dsl_data = data)
            fixed (sbyte* __dsl_name = name)
            {
                return (SDL_Thread*)CreateThreadWithStackSize(
                    fn,
                    __dsl_name,
                    stacksize,
                    __dsl_data
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_TLSID")]
        public static extern uint CreateTLS();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Window* CreateWindow(
            [NativeTypeName("const char *")] sbyte* title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> CreateWindow(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        )
        {
            fixed (sbyte* __dsl_title = title)
            {
                return (SDL_Window*)CreateWindow(__dsl_title, w, h, flags);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int CreateWindowAndRenderer(
            [NativeTypeName("const char *")] sbyte* title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] uint window_flags,
            SDL_Window** window,
            SDL_Renderer** renderer
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateWindowAndRenderer(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] uint window_flags,
            Ref2D<SDL_Window> window,
            Ref2D<SDL_Renderer> renderer
        )
        {
            fixed (SDL_Renderer** __dsl_renderer = renderer)
            fixed (SDL_Window** __dsl_window = window)
            fixed (sbyte* __dsl_title = title)
            {
                return (int)CreateWindowAndRenderer(
                    __dsl_title,
                    width,
                    height,
                    window_flags,
                    __dsl_window,
                    __dsl_renderer
                );
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> CreateWindowWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => (SDL_Window*)CreateWindowWithPropertiesRaw(props);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CreateWindowWithProperties")]
        public static extern SDL_Window* CreateWindowWithPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        public static MaybeBool<int> CursorVisible() => (MaybeBool<int>)(int)CursorVisibleRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_CursorVisible")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int CursorVisibleRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
            [NativeTypeName("SDL_Time *")] long* ticks
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
            [NativeTypeName("SDL_Time *")] Ref<long> ticks
        )
        {
            fixed (long* __dsl_ticks = ticks)
            fixed (DateTime* __dsl_dt = dt)
            {
                return (int)DateTimeToTime(__dsl_dt, __dsl_ticks);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void Delay([NativeTypeName("Uint32")] uint ms);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DelayNS([NativeTypeName("Uint64")] ulong ns);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DelEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DelEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                DelEventWatch(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DelHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DelHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                DelHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyAudioStream(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                DestroyAudioStream(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyCondition(SDL_Condition* cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCondition(Ref<SDL_Condition> cond)
        {
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                DestroyCondition(__dsl_cond);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyCursor(SDL_Cursor* cursor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCursor(Ref<SDL_Cursor> cursor)
        {
            fixed (SDL_Cursor* __dsl_cursor = cursor)
            {
                DestroyCursor(__dsl_cursor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyHapticEffect(SDL_Haptic* haptic, int effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyHapticEffect(Ref<SDL_Haptic> haptic, int effect)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                DestroyHapticEffect(__dsl_haptic, effect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyMutex(SDL_Mutex* mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                DestroyMutex(__dsl_mutex);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyPalette(Palette* palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPalette(Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            {
                DestroyPalette(__dsl_palette);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyPixelFormat(PixelFormat* format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPixelFormat(Ref<PixelFormat> format)
        {
            fixed (PixelFormat* __dsl_format = format)
            {
                DestroyPixelFormat(__dsl_format);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyRenderer(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderer(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                DestroyRenderer(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyRWLock(SDL_RWLock* rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRWLock(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                DestroyRWLock(__dsl_rwlock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroySemaphore(SDL_Semaphore* sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                DestroySemaphore(__dsl_sem);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroySurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                DestroySurface(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyTexture(SDL_Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTexture(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                DestroyTexture(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DestroyWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                DestroyWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int DestroyWindowSurface(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DestroyWindowSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)DestroyWindowSurface(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void DetachThread(SDL_Thread* thread);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DetachThread(Ref<SDL_Thread> thread)
        {
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                DetachThread(__dsl_thread);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int DetachVirtualJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int DisableScreenSaver();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* DuplicateSurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> DuplicateSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)DuplicateSurface(__dsl_surface);
            }
        }

        [return: NativeTypeName("SDL_EGLConfig")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentEGLConfig() => (void*)EGLGetCurrentEGLConfigRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
        [return: NativeTypeName("SDL_EGLConfig")]
        public static extern void* EGLGetCurrentEGLConfigRaw();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentEGLDisplay() => (void*)EGLGetCurrentEGLDisplayRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
        [return: NativeTypeName("SDL_EGLDisplay")]
        public static extern void* EGLGetCurrentEGLDisplayRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_FunctionPointer")]
        public static extern delegate* unmanaged<void> EGLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        );

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> EGLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (delegate* unmanaged<void>)EGLGetProcAddress(__dsl_proc);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_EGLSurface")]
        public static extern void* EGLGetWindowEGLSurface(SDL_Window* window);

        [return: NativeTypeName("SDL_EGLSurface")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowEGLSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetWindowEGLSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)EGLGetWindowEGLSurface(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void EGLSetEGLAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                delegate* unmanaged<nint*> platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")]
                delegate* unmanaged<int*> surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")]
                delegate* unmanaged<int*> contextAttribCallback
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int EnableScreenSaver();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int EnumerateDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            {
                return (int)EnumerateDirectory(__dsl_path, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                delegate* unmanaged<void*, uint, sbyte*, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                delegate* unmanaged<void*, uint, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)EnumerateProperties(props, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int EnumerateStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)EnumerateStorageDirectory(
                    __dsl_storage,
                    __dsl_path,
                    callback,
                    __dsl_userdata
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int Error(Errorcode code);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        public static MaybeBool<int> EventEnabled([NativeTypeName("Uint32")] uint type) =>
            (MaybeBool<int>)(int)EventEnabledRaw(type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_EventEnabled")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int EventEnabledRaw([NativeTypeName("Uint32")] uint type);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int FillSurfaceRect(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("Uint32")] uint color
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FillSurfaceRect(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_dst = dst)
            {
                return (int)FillSurfaceRect(__dsl_dst, __dsl_rect, color);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int FillSurfaceRects(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FillSurfaceRects(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rects = rects)
            fixed (Surface* __dsl_dst = dst)
            {
                return (int)FillSurfaceRects(__dsl_dst, __dsl_rects, count, color);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                FilterEvents(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int FlashWindow(SDL_Window* window, FlashOperation operation);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlashWindow(Ref<SDL_Window> window, FlashOperation operation)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)FlashWindow(__dsl_window, operation);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int FlipSurface(Surface* surface, FlipMode flip);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlipSurface(Ref<Surface> surface, FlipMode flip)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)FlipSurface(__dsl_surface, flip);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int FlushAudioStream(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlushAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)FlushAudioStream(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void FlushEvent([NativeTypeName("Uint32")] uint type);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void FlushEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int FlushRenderer(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlushRenderer(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)FlushRenderer(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GamepadConnected(SDL_Gamepad* gamepad);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadConnected(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadConnected(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        public static MaybeBool<int> GamepadEventsEnabled() =>
            (MaybeBool<int>)(int)GamepadEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GamepadEventsEnabled")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GamepadEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GamepadHasAxis(SDL_Gamepad* gamepad, GamepadAxis axis);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadHasAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadHasAxis(__dsl_gamepad, axis);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GamepadHasButton(SDL_Gamepad* gamepad, GamepadButton button);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadHasButton(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadHasButton(__dsl_gamepad, button);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GamepadHasSensor(SDL_Gamepad* gamepad, SensorType type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadHasSensor(Ref<SDL_Gamepad> gamepad, SensorType type)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadHasSensor(__dsl_gamepad, type);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GamepadSensorEnabled(SDL_Gamepad* gamepad, SensorType type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadSensorEnabled(Ref<SDL_Gamepad> gamepad, SensorType type)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadSensorEnabled(__dsl_gamepad, type);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_AssertionHandler")]
        public static extern delegate* unmanaged<
            AssertData*,
            void*,
            AssertState> GetAssertionHandler(void** puserdata);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
            Ref2D puserdata
        )
        {
            fixed (void** __dsl_puserdata = puserdata)
            {
                return (delegate* unmanaged<AssertData*, void*, AssertState>)GetAssertionHandler(
                    __dsl_puserdata
                );
            }
        }

        [return: NativeTypeName("const SDL_AssertData *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<AssertData> GetAssertionReport() => (AssertData*)GetAssertionReportRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAssertionReport")]
        [return: NativeTypeName("const SDL_AssertData *")]
        public static extern AssertData* GetAssertionReportRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_AudioDeviceID *")]
        public static extern uint* GetAudioCaptureDevices(int* count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioCaptureDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioCaptureDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioCaptureDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioSpec* spec,
            int* sample_frames
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioSpec> spec,
            Ref<int> sample_frames
        )
        {
            fixed (int* __dsl_sample_frames = sample_frames)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (int)GetAudioDeviceFormat(devid, __dsl_spec, __dsl_sample_frames);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDeviceName(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        ) => (sbyte*)GetAudioDeviceNameRaw(devid);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDeviceName")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetAudioDeviceNameRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDriver(int index) => (sbyte*)GetAudioDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetAudioDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetAudioDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_AudioDeviceID *")]
        public static extern uint* GetAudioOutputDevices(int* count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioOutputDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioOutputDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioOutputDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetAudioStreamAvailable(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamAvailable(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamAvailable(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamData(Ref<SDL_AudioStream> stream, Ref buf, int len)
        {
            fixed (void* __dsl_buf = buf)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamData(__dsl_stream, __dsl_buf, len);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_AudioDeviceID")]
        public static extern uint GetAudioStreamDevice(SDL_AudioStream* stream);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamDevice(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (uint)GetAudioStreamDevice(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetAudioStreamFormat(
            SDL_AudioStream* stream,
            AudioSpec* src_spec,
            AudioSpec* dst_spec
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamFormat(
            Ref<SDL_AudioStream> stream,
            Ref<AudioSpec> src_spec,
            Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamFormat(__dsl_stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern float GetAudioStreamFrequencyRatio(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (float)GetAudioStreamFrequencyRatio(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetAudioStreamProperties(SDL_AudioStream* stream);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamProperties(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (uint)GetAudioStreamProperties(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetAudioStreamQueued(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamQueued(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamQueued(__dsl_stream);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetBasePath() => (sbyte*)GetBasePathRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetBasePath")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetBasePathRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int default_value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)
                    (int)GetBooleanProperty(props, __dsl_name, (int)default_value);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraDeviceName(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => (sbyte*)GetCameraDeviceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraDeviceName")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetCameraDeviceNameRaw(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern CameraPosition GetCameraDevicePosition(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_CameraDeviceID *")]
        public static extern uint* GetCameraDevices(int* count);

        [return: NativeTypeName("SDL_CameraDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetCameraDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetCameraDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern CameraSpec* GetCameraDeviceSupportedFormats(
            [NativeTypeName("SDL_CameraDeviceID")] uint devid,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<CameraSpec> GetCameraDeviceSupportedFormats(
            [NativeTypeName("SDL_CameraDeviceID")] uint devid,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (CameraSpec*)GetCameraDeviceSupportedFormats(devid, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraDriver(int index) => (sbyte*)GetCameraDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCameraDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCameraDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetCameraFormat(SDL_Camera* camera, CameraSpec* spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraFormat(Ref<SDL_Camera> camera, Ref<CameraSpec> spec)
        {
            fixed (CameraSpec* __dsl_spec = spec)
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (int)GetCameraFormat(__dsl_camera, __dsl_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_CameraDeviceID")]
        public static extern uint GetCameraInstanceID(SDL_Camera* camera);

        [return: NativeTypeName("SDL_CameraDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraInstanceID(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (uint)GetCameraInstanceID(__dsl_camera);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetCameraPermissionState(SDL_Camera* camera);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraPermissionState(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (int)GetCameraPermissionState(__dsl_camera);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetCameraProperties(SDL_Camera* camera);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraProperties(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (uint)GetCameraProperties(__dsl_camera);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* GetClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type,
            [NativeTypeName("size_t *")] nuint* size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (void*)GetClipboardData(__dsl_mime_type, __dsl_size);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetClipboardText() => (sbyte*)GetClipboardTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetClipboardText")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetClipboardTextRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("SDL_bool")] int include_high_density_modes
        );

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("SDL_bool")] MaybeBool<int> include_high_density_modes
        ) =>
            (DisplayMode*)GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                (int)include_high_density_modes
            );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetCPUCacheLineSize();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetCPUCount();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentAudioDriver() => (sbyte*)GetCurrentAudioDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentAudioDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCurrentAudioDriverRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentCameraDriver() => (sbyte*)GetCurrentCameraDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentCameraDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCurrentCameraDriverRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetCurrentDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => (DisplayMode*)GetCurrentDisplayModeRaw(displayID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentDisplayMode")]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetCurrentDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern DisplayOrientation GetCurrentDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCurrentRenderOutputSize(
            Ref<SDL_Renderer> renderer,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetCurrentRenderOutputSize(__dsl_renderer, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_ThreadID")]
        public static extern ulong GetCurrentThreadID();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks)
        {
            fixed (long* __dsl_ticks = ticks)
            {
                return (int)GetCurrentTime(__dsl_ticks);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentVideoDriver() => (sbyte*)GetCurrentVideoDriverRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCurrentVideoDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetCurrentVideoDriverRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> GetCursor() => (SDL_Cursor*)GetCursorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetCursor")]
        public static extern SDL_Cursor* GetCursorRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetDayOfWeek(int year, int month, int day);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetDayOfYear(int year, int month, int day);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetDaysInMonth(int year, int month);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_AssertionHandler")]
        public static extern delegate* unmanaged<
            AssertData*,
            void*,
            AssertState> GetDefaultAssertionHandler();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> GetDefaultCursor() => (SDL_Cursor*)GetDefaultCursorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDefaultCursor")]
        public static extern SDL_Cursor* GetDefaultCursorRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetDesktopDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => (DisplayMode*)GetDesktopDisplayModeRaw(displayID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDesktopDisplayMode")]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetDesktopDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (int)GetDisplayBounds(displayID, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern float GetDisplayContentScale(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetDisplayForPoint(
            [NativeTypeName("const SDL_Point *")] Point* point
        );

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForPoint(
            [NativeTypeName("const SDL_Point *")] Ref<Point> point
        )
        {
            fixed (Point* __dsl_point = point)
            {
                return (uint)GetDisplayForPoint(__dsl_point);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetDisplayForRect(
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (uint)GetDisplayForRect(__dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetDisplayForWindow(SDL_Window* window);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetDisplayForWindow(__dsl_window);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            (sbyte*)GetDisplayNameRaw(displayID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetDisplayName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetDisplayNameRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetDisplayProperties(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_DisplayID *")]
        public static extern uint* GetDisplays(int* count);

        [return: NativeTypeName("SDL_DisplayID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetDisplays(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetDisplays(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (int)GetDisplayUsableBounds(displayID, __dsl_rect);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetError() => (sbyte*)GetErrorRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetError")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetErrorRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
            void** userdata
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            {
                return (MaybeBool<int>)(int)GetEventFilter(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float default_value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (float)GetFloatProperty(props, __dsl_name, default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const SDL_DisplayMode **")]
        public static extern DisplayMode** GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int* count
        );

        [return: NativeTypeName("const SDL_DisplayMode **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<DisplayMode> GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (DisplayMode**)GetFullscreenDisplayModes(displayID, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadAppleSFSymbolsNameForAxis(
            SDL_Gamepad* gamepad,
            GamepadAxis axis
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
            Ref<SDL_Gamepad> gamepad,
            GamepadAxis axis
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadAppleSFSymbolsNameForAxis(__dsl_gamepad, axis);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadAppleSFSymbolsNameForButton(
            SDL_Gamepad* gamepad,
            GamepadButton button
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadAppleSFSymbolsNameForButton(__dsl_gamepad, button);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Sint16")]
        public static extern short GetGamepadAxis(SDL_Gamepad* gamepad, GamepadAxis axis);

        [return: NativeTypeName("Sint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetGamepadAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (short)GetGamepadAxis(__dsl_gamepad, axis);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] sbyte* str
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadAxis)GetGamepadAxisFromString(__dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadBinding** GetGamepadBindings(SDL_Gamepad* gamepad, int* count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<GamepadBinding> GetGamepadBindings(
            Ref<SDL_Gamepad> gamepad,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadBinding**)GetGamepadBindings(__dsl_gamepad, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint8")]
        public static extern byte GetGamepadButton(SDL_Gamepad* gamepad, GamepadButton button);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetGamepadButton(Ref<SDL_Gamepad> gamepad, GamepadButton button)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (byte)GetGamepadButton(__dsl_gamepad, button);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] sbyte* str
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadButton)GetGamepadButtonFromString(__dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadButtonLabel GetGamepadButtonLabel(
            SDL_Gamepad* gamepad,
            GamepadButton button
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButtonLabel GetGamepadButtonLabel(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadButtonLabel)GetGamepadButtonLabel(__dsl_gamepad, button);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadButtonLabel GetGamepadButtonLabelForType(
            GamepadType type,
            GamepadButton button
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern JoystickConnectionState GetGamepadConnectionState(
            SDL_Gamepad* gamepad
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetGamepadConnectionState(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (JoystickConnectionState)GetGamepadConnectionState(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadFirmwareVersion(SDL_Gamepad* gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadFirmwareVersion(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadFirmwareVersion(__dsl_gamepad);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Gamepad> GetGamepadFromInstanceID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (SDL_Gamepad*)GetGamepadFromInstanceIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadFromInstanceID")]
        public static extern SDL_Gamepad* GetGamepadFromInstanceIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Gamepad> GetGamepadFromPlayerIndex(int player_index) =>
            (SDL_Gamepad*)GetGamepadFromPlayerIndexRaw(player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        public static extern SDL_Gamepad* GetGamepadFromPlayerIndexRaw(int player_index);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickGUID")]
        public static extern Guid GetGamepadInstanceGuid(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint GetGamepadInstanceID(SDL_Gamepad* gamepad);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadInstanceID(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (uint)GetGamepadInstanceID(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadInstanceMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetGamepadInstanceMappingRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadInstanceMapping")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetGamepadInstanceMappingRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadInstanceName(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetGamepadInstanceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadInstanceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadInstanceNameRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadInstancePath(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetGamepadInstancePathRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadInstancePath")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadInstancePathRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetGamepadInstancePlayerIndex(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadInstanceProduct(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadInstanceProductVersion(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadType GetGamepadInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadInstanceVendor(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Joystick* GetGamepadJoystick(SDL_Gamepad* gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> GetGamepadJoystick(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (SDL_Joystick*)GetGamepadJoystick(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetGamepadMapping(SDL_Gamepad* gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMapping(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadMapping(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMappingForGuid(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid
        ) => (sbyte*)GetGamepadMappingForGuidRaw(guid);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetGamepadMappingForGuidRaw(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GetGamepadMappings(int* count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GetGamepadMappings(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (sbyte**)GetGamepadMappings(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadName(SDL_Gamepad* gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadName(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadName(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadPath(SDL_Gamepad* gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadPath(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadPath(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetGamepadPlayerIndex(SDL_Gamepad* gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetGamepadPlayerIndex(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern PowerState GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetGamepadPowerInfo(Ref<SDL_Gamepad> gamepad, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (PowerState)GetGamepadPowerInfo(__dsl_gamepad, __dsl_percent);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadProduct(SDL_Gamepad* gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProduct(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadProduct(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadProductVersion(SDL_Gamepad* gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProductVersion(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadProductVersion(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetGamepadProperties(SDL_Gamepad* gamepad);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadProperties(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (uint)GetGamepadProperties(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickID *")]
        public static extern uint* GetGamepads(int* count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetGamepads(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetGamepads(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetGamepadSensorData(
            SDL_Gamepad* gamepad,
            SensorType type,
            float* data,
            int num_values
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadSensorData(
            Ref<SDL_Gamepad> gamepad,
            SensorType type,
            Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetGamepadSensorData(__dsl_gamepad, type, __dsl_data, num_values);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern float GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SensorType type);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetGamepadSensorDataRate(Ref<SDL_Gamepad> gamepad, SensorType type)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (float)GetGamepadSensorDataRate(__dsl_gamepad, type);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadSerial(SDL_Gamepad* gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadSerial(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadSerial(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetGamepadSteamHandle(SDL_Gamepad* gamepad);

        [return: NativeTypeName("Uint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetGamepadSteamHandle(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ulong)GetGamepadSteamHandle(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
            (sbyte*)GetGamepadStringForAxisRaw(axis);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadStringForAxis")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
            (sbyte*)GetGamepadStringForButtonRaw(button);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadStringForButton")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadStringForButtonRaw(GamepadButton button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
            (sbyte*)GetGamepadStringForTypeRaw(type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGamepadStringForType")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetGamepadStringForTypeRaw(GamepadType type);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetGamepadTouchpadFinger(
            SDL_Gamepad* gamepad,
            int touchpad,
            int finger,
            [NativeTypeName("Uint8 *")] byte* state,
            float* x,
            float* y,
            float* pressure
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadTouchpadFinger(
            Ref<SDL_Gamepad> gamepad,
            int touchpad,
            int finger,
            [NativeTypeName("Uint8 *")] Ref<byte> state,
            Ref<float> x,
            Ref<float> y,
            Ref<float> pressure
        )
        {
            fixed (float* __dsl_pressure = pressure)
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            fixed (byte* __dsl_state = state)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetGamepadTouchpadFinger(
                    __dsl_gamepad,
                    touchpad,
                    finger,
                    __dsl_state,
                    __dsl_x,
                    __dsl_y,
                    __dsl_pressure
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadType GetGamepadType(SDL_Gamepad* gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadType(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadType)GetGamepadType(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] sbyte* str
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadType)GetGamepadTypeFromString(__dsl_str);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetGamepadVendor(SDL_Gamepad* gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadVendor(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadVendor(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetGlobalMouseState(float* x, float* y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetGlobalMouseState(__dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetGlobalProperties();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetGrabbedWindow() => (SDL_Window*)GetGrabbedWindowRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetGrabbedWindow")]
        public static extern SDL_Window* GetGrabbedWindowRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetHapticEffectStatus(SDL_Haptic* haptic, int effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetHapticEffectStatus(Ref<SDL_Haptic> haptic, int effect)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetHapticEffectStatus(__dsl_haptic, effect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetHapticFeatures(SDL_Haptic* haptic);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticFeatures(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (uint)GetHapticFeatures(__dsl_haptic);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> GetHapticFromInstanceID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => (SDL_Haptic*)GetHapticFromInstanceIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticFromInstanceID")]
        public static extern SDL_Haptic* GetHapticFromInstanceIDRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_HapticID")]
        public static extern uint GetHapticInstanceID(SDL_Haptic* haptic);

        [return: NativeTypeName("SDL_HapticID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticInstanceID(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (uint)GetHapticInstanceID(__dsl_haptic);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticInstanceName(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => (sbyte*)GetHapticInstanceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetHapticInstanceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetHapticInstanceNameRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetHapticName(SDL_Haptic* haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticName(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (sbyte*)GetHapticName(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_HapticID *")]
        public static extern uint* GetHaptics(int* count);

        [return: NativeTypeName("SDL_HapticID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetHaptics(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetHaptics(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetHint([NativeTypeName("const char *")] sbyte* name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetHint(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetHintBoolean(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int default_value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetHintBoolean(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)GetHintBoolean(__dsl_name, (int)default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetIOProperties(SDL_IOStream* context);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetIOProperties(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (uint)GetIOProperties(__dsl_context);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Sint64")]
        public static extern long GetIOSize(SDL_IOStream* context);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetIOSize(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (long)GetIOSize(__dsl_context);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern IOStatus GetIOStatus(SDL_IOStream* context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStatus GetIOStatus(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (IOStatus)GetIOStatus(__dsl_context);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Sint16")]
        public static extern short GetJoystickAxis(SDL_Joystick* joystick, int axis);

        [return: NativeTypeName("Sint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetJoystickAxis(Ref<SDL_Joystick> joystick, int axis)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (short)GetJoystickAxis(__dsl_joystick, axis);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetJoystickAxisInitialState(
            SDL_Joystick* joystick,
            int axis,
            [NativeTypeName("Sint16 *")] short* state
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetJoystickAxisInitialState(
            Ref<SDL_Joystick> joystick,
            int axis,
            [NativeTypeName("Sint16 *")] Ref<short> state
        )
        {
            fixed (short* __dsl_state = state)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (MaybeBool<int>)
                    (int)GetJoystickAxisInitialState(__dsl_joystick, axis, __dsl_state);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetJoystickBall(
            SDL_Joystick* joystick,
            int ball,
            int* dx,
            int* dy
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickBall(
            Ref<SDL_Joystick> joystick,
            int ball,
            Ref<int> dx,
            Ref<int> dy
        )
        {
            fixed (int* __dsl_dy = dy)
            fixed (int* __dsl_dx = dx)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetJoystickBall(__dsl_joystick, ball, __dsl_dx, __dsl_dy);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint8")]
        public static extern byte GetJoystickButton(SDL_Joystick* joystick, int button);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickButton(Ref<SDL_Joystick> joystick, int button)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (byte)GetJoystickButton(__dsl_joystick, button);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern JoystickConnectionState GetJoystickConnectionState(
            SDL_Joystick* joystick
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetJoystickConnectionState(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (JoystickConnectionState)GetJoystickConnectionState(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickFirmwareVersion(SDL_Joystick* joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickFirmwareVersion(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickFirmwareVersion(__dsl_joystick);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> GetJoystickFromInstanceID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (SDL_Joystick*)GetJoystickFromInstanceIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickFromInstanceID")]
        public static extern SDL_Joystick* GetJoystickFromInstanceIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> GetJoystickFromPlayerIndex(int player_index) =>
            (SDL_Joystick*)GetJoystickFromPlayerIndexRaw(player_index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        public static extern SDL_Joystick* GetJoystickFromPlayerIndexRaw(int player_index);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickGUID")]
        public static extern Guid GetJoystickGuid(SDL_Joystick* joystick);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuid(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (Guid)GetJoystickGuid(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickGUID")]
        public static extern Guid GetJoystickGuidFromString(
            [NativeTypeName("const char *")] sbyte* pchGUID
        );

        [return: NativeTypeName("SDL_JoystickGUID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuidFromString(
            [NativeTypeName("const char *")] Ref<sbyte> pchGUID
        )
        {
            fixed (sbyte* __dsl_pchGUID = pchGUID)
            {
                return (Guid)GetJoystickGuidFromString(__dsl_pchGUID);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void GetJoystickGuidInfo(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("Uint16 *")] ushort* vendor,
            [NativeTypeName("Uint16 *")] ushort* product,
            [NativeTypeName("Uint16 *")] ushort* version,
            [NativeTypeName("Uint16 *")] ushort* crc16
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetJoystickGuidInfo(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
            [NativeTypeName("Uint16 *")] Ref<ushort> product,
            [NativeTypeName("Uint16 *")] Ref<ushort> version,
            [NativeTypeName("Uint16 *")] Ref<ushort> crc16
        )
        {
            fixed (ushort* __dsl_crc16 = crc16)
            fixed (ushort* __dsl_version = version)
            fixed (ushort* __dsl_product = product)
            fixed (ushort* __dsl_vendor = vendor)
            {
                GetJoystickGuidInfo(guid, __dsl_vendor, __dsl_product, __dsl_version, __dsl_crc16);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetJoystickGuidString(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickGuidString(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        )
        {
            fixed (sbyte* __dsl_pszGUID = pszGUID)
            {
                return (int)GetJoystickGuidString(guid, __dsl_pszGUID, cbGUID);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint8")]
        public static extern byte GetJoystickHat(SDL_Joystick* joystick, int hat);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickHat(Ref<SDL_Joystick> joystick, int hat)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (byte)GetJoystickHat(__dsl_joystick, hat);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickGUID")]
        public static extern Guid GetJoystickInstanceGuid(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickID")]
        public static extern uint GetJoystickInstanceID(SDL_Joystick* joystick);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickInstanceID(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (uint)GetJoystickInstanceID(__dsl_joystick);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickInstanceName(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetJoystickInstanceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickInstanceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickInstanceNameRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickInstancePath(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (sbyte*)GetJoystickInstancePathRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetJoystickInstancePath")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickInstancePathRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetJoystickInstancePlayerIndex(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickInstanceProduct(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickInstanceProductVersion(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern JoystickType GetJoystickInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickInstanceVendor(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickName(SDL_Joystick* joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickName(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (sbyte*)GetJoystickName(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickPath(SDL_Joystick* joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickPath(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (sbyte*)GetJoystickPath(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetJoystickPlayerIndex(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickPlayerIndex(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetJoystickPlayerIndex(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern PowerState GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetJoystickPowerInfo(Ref<SDL_Joystick> joystick, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (PowerState)GetJoystickPowerInfo(__dsl_joystick, __dsl_percent);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickProduct(SDL_Joystick* joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProduct(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickProduct(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickProductVersion(SDL_Joystick* joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProductVersion(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickProductVersion(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetJoystickProperties(SDL_Joystick* joystick);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickProperties(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (uint)GetJoystickProperties(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_JoystickID *")]
        public static extern uint* GetJoysticks(int* count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetJoysticks(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetJoysticks(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetJoystickSerial(SDL_Joystick* joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickSerial(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (sbyte*)GetJoystickSerial(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern JoystickType GetJoystickType(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickType GetJoystickType(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (JoystickType)GetJoystickType(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint16")]
        public static extern ushort GetJoystickVendor(SDL_Joystick* joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickVendor(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickVendor(__dsl_joystick);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetKeyboardFocus() => (SDL_Window*)GetKeyboardFocusRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyboardFocus")]
        public static extern SDL_Window* GetKeyboardFocusRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyboardInstanceName(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => (sbyte*)GetKeyboardInstanceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyboardInstanceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetKeyboardInstanceNameRaw(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_KeyboardID *")]
        public static extern uint* GetKeyboards(int* count);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetKeyboards(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetKeyboards(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const Uint8 *")]
        public static extern byte* GetKeyboardState(int* numkeys);

        [return: NativeTypeName("const Uint8 *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<byte> GetKeyboardState(Ref<int> numkeys)
        {
            fixed (int* __dsl_numkeys = numkeys)
            {
                return (byte*)GetKeyboardState(__dsl_numkeys);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_Keycode")]
        public static extern int GetKeyFromName([NativeTypeName("const char *")] sbyte* name);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)GetKeyFromName(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_Keycode")]
        public static extern int GetKeyFromScancode(Scancode scancode);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] int key) =>
            (sbyte*)GetKeyNameRaw(key);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetKeyName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] int key);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
            void** userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            {
                GetLogOutputFunction(callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetMasksForPixelFormatEnum(
            PixelFormatEnum format,
            int* bpp,
            [NativeTypeName("Uint32 *")] uint* Rmask,
            [NativeTypeName("Uint32 *")] uint* Gmask,
            [NativeTypeName("Uint32 *")] uint* Bmask,
            [NativeTypeName("Uint32 *")] uint* Amask
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormatEnum")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetMasksForPixelFormatEnum(
            PixelFormatEnum format,
            Ref<int> bpp,
            [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Amask
        )
        {
            fixed (uint* __dsl_Amask = Amask)
            fixed (uint* __dsl_Bmask = Bmask)
            fixed (uint* __dsl_Gmask = Gmask)
            fixed (uint* __dsl_Rmask = Rmask)
            fixed (int* __dsl_bpp = bpp)
            {
                return (MaybeBool<int>)
                    (int)GetMasksForPixelFormatEnum(
                        format,
                        __dsl_bpp,
                        __dsl_Rmask,
                        __dsl_Gmask,
                        __dsl_Bmask,
                        __dsl_Amask
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetMaxHapticEffects(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffects(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetMaxHapticEffects(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetMaxHapticEffectsPlaying(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffectsPlaying(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetMaxHapticEffectsPlaying(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_MouseID *")]
        public static extern uint* GetMice(int* count);

        [return: NativeTypeName("SDL_MouseID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetMice(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetMice(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Keymod GetModState();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetMouseFocus() => (SDL_Window*)GetMouseFocusRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMouseFocus")]
        public static extern SDL_Window* GetMouseFocusRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetMouseInstanceName(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        ) => (sbyte*)GetMouseInstanceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetMouseInstanceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetMouseInstanceNameRaw(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetMouseState(float* x, float* y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetMouseState(__dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern DisplayOrientation GetNaturalDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumAudioDrivers();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Sint64")]
        public static extern long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long default_value
        );

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (long)GetNumberProperty(props, __dsl_name, default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumCameraDrivers();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpadFingers(Ref<SDL_Gamepad> gamepad, int touchpad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetNumGamepadTouchpadFingers(__dsl_gamepad, touchpad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumGamepadTouchpads(SDL_Gamepad* gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpads(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetNumGamepadTouchpads(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumHapticAxes(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumHapticAxes(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetNumHapticAxes(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumJoystickAxes(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickAxes(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickAxes(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumJoystickBalls(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickBalls(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickBalls(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumJoystickButtons(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickButtons(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickButtons(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumJoystickHats(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickHats(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickHats(__dsl_joystick);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumRenderDrivers();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetNumVideoDrivers();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetPathInfo(
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetPathInfo(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            {
                return (int)GetPathInfo(__dsl_path, __dsl_info);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetPenCapabilities(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            PenCapabilityInfo* capabilities
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenCapabilities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenCapabilities(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            Ref<PenCapabilityInfo> capabilities
        )
        {
            fixed (PenCapabilityInfo* __dsl_capabilities = capabilities)
            {
                return (uint)GetPenCapabilities(instance_id, __dsl_capabilities);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PenID")]
        public static extern uint GetPenFromGuid(Guid guid);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Guid GetPenGuid([NativeTypeName("SDL_PenID")] uint instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPenName([NativeTypeName("SDL_PenID")] uint instance_id) =>
            (sbyte*)GetPenNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPenName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetPenNameRaw([NativeTypeName("SDL_PenID")] uint instance_id);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PenID *")]
        public static extern uint* GetPens(int* count);

        [return: NativeTypeName("SDL_PenID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPens")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetPens(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetPens(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetPenStatus(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            float* x,
            float* y,
            float* axes,
            [NativeTypeName("size_t")] nuint num_axes
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenStatus(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            Ref<float> x,
            Ref<float> y,
            Ref<float> axes,
            [NativeTypeName("size_t")] nuint num_axes
        )
        {
            fixed (float* __dsl_axes = axes)
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetPenStatus(instance_id, __dsl_x, __dsl_y, __dsl_axes, num_axes);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern PenSubtype GetPenType([NativeTypeName("SDL_PenID")] uint instance_id);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetPerformanceCounter();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetPerformanceFrequency();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern PixelFormatEnum GetPixelFormatEnumForMasks(
            int bpp,
            [NativeTypeName("Uint32")] uint Rmask,
            [NativeTypeName("Uint32")] uint Gmask,
            [NativeTypeName("Uint32")] uint Bmask,
            [NativeTypeName("Uint32")] uint Amask
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPixelFormatName(PixelFormatEnum format) =>
            (sbyte*)GetPixelFormatNameRaw(format);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPixelFormatName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetPixelFormatNameRaw(PixelFormatEnum format);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPlatform() => (sbyte*)GetPlatformRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPlatform")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetPlatformRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern PowerState GetPowerInfo(int* seconds, int* percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (int* __dsl_seconds = seconds)
            {
                return (PowerState)GetPowerInfo(__dsl_seconds, __dsl_percent);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Locale> GetPreferredLocales() => (Locale*)GetPreferredLocalesRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPreferredLocales")]
        public static extern Locale* GetPreferredLocalesRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetPrefPath(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app
        );

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrefPath(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (sbyte*)GetPrefPath(__dsl_org, __dsl_app);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_DisplayID")]
        public static extern uint GetPrimaryDisplay();

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrimarySelectionText() => (sbyte*)GetPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetPrimarySelectionText")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* GetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* default_value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref default_value
        )
        {
            fixed (void* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (void*)GetProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (PropertyType)GetPropertyType(props, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadType GetRealGamepadInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern GamepadType GetRealGamepadType(SDL_Gamepad* gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetRealGamepadType(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadType)GetRealGamepadType(__dsl_gamepad);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int* X1,
            int* Y1,
            int* X2,
            int* Y2
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref<int> X1,
            Ref<int> Y1,
            Ref<int> X2,
            Ref<int> Y2
        )
        {
            fixed (int* __dsl_Y2 = Y2)
            fixed (int* __dsl_X2 = X2)
            fixed (int* __dsl_Y1 = Y1)
            fixed (int* __dsl_X1 = X1)
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<int>)
                    (int)GetRectAndLineIntersection(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* rect,
            float* X1,
            float* Y1,
            float* X2,
            float* Y2
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
            Ref<float> X1,
            Ref<float> Y1,
            Ref<float> X2,
            Ref<float> Y2
        )
        {
            fixed (float* __dsl_Y2 = Y2)
            fixed (float* __dsl_X2 = X2)
            fixed (float* __dsl_Y1 = Y1)
            fixed (float* __dsl_X1 = X1)
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<int>)
                    (int)GetRectAndLineIntersectionFloat(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Point* points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Rect* clip,
            Rect* result
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Ref<Point> points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_clip = clip)
            fixed (Point* __dsl_points = points)
            {
                return (MaybeBool<int>)
                    (int)GetRectEnclosingPoints(__dsl_points, count, __dsl_clip, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count,
            [NativeTypeName("const SDL_FRect *")] FRect* clip,
            FRect* result
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_clip = clip)
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<int>)
                    (int)GetRectEnclosingPointsFloat(__dsl_points, count, __dsl_clip, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<int>)(int)GetRectIntersection(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<int>)
                    (int)GetRectIntersectionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (int)GetRectUnion(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (int)GetRectUnionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
        public static MaybeBool<int> GetRelativeMouseMode() =>
            (MaybeBool<int>)(int)GetRelativeMouseModeRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRelativeMouseMode")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetRelativeMouseModeRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetRelativeMouseState(float* x, float* y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRelativeMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetRelativeMouseState(__dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderClipRect(SDL_Renderer* renderer, Rect* rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderClipRect(Ref<SDL_Renderer> renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderClipRect(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderColorScale(SDL_Renderer* renderer, float* scale);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderColorScale(Ref<SDL_Renderer> renderer, Ref<float> scale)
        {
            fixed (float* __dsl_scale = scale)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderColorScale(__dsl_renderer, __dsl_scale);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderDrawBlendMode(
            SDL_Renderer* renderer,
            BlendMode* blendMode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawBlendMode(
            Ref<SDL_Renderer> renderer,
            Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderDrawBlendMode(__dsl_renderer, __dsl_blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderDrawColor(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawColor(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderDrawColor(__dsl_renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderDrawColorFloat(
            SDL_Renderer* renderer,
            float* r,
            float* g,
            float* b,
            float* a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawColorFloat(
            Ref<SDL_Renderer> renderer,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        )
        {
            fixed (float* __dsl_a = a)
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderDrawColorFloat(
                    __dsl_renderer,
                    __dsl_r,
                    __dsl_g,
                    __dsl_b,
                    __dsl_a
                );
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRenderDriver(int index) => (sbyte*)GetRenderDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRenderDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetRenderDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Renderer* GetRenderer(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> GetRenderer(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (SDL_Renderer*)GetRenderer(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Renderer* GetRendererFromTexture(SDL_Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> GetRendererFromTexture(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (SDL_Renderer*)GetRendererFromTexture(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRendererInfo(SDL_Renderer* renderer, RendererInfo* info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRendererInfo(Ref<SDL_Renderer> renderer, Ref<RendererInfo> info)
        {
            fixed (RendererInfo* __dsl_info = info)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRendererInfo(__dsl_renderer, __dsl_info);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetRendererProperties(SDL_Renderer* renderer);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRendererProperties(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (uint)GetRendererProperties(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderLogicalPresentation(
            SDL_Renderer* renderer,
            int* w,
            int* h,
            RendererLogicalPresentation* mode,
            ScaleMode* scale_mode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderLogicalPresentation(
            Ref<SDL_Renderer> renderer,
            Ref<int> w,
            Ref<int> h,
            Ref<RendererLogicalPresentation> mode,
            Ref<ScaleMode> scale_mode
        )
        {
            fixed (ScaleMode* __dsl_scale_mode = scale_mode)
            fixed (RendererLogicalPresentation* __dsl_mode = mode)
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderLogicalPresentation(
                    __dsl_renderer,
                    __dsl_w,
                    __dsl_h,
                    __dsl_mode,
                    __dsl_scale_mode
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* GetRenderMetalCommandEncoder(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalCommandEncoder(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (void*)GetRenderMetalCommandEncoder(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* GetRenderMetalLayer(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalLayer(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (void*)GetRenderMetalLayer(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderOutputSize(__dsl_renderer, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderScale(
            SDL_Renderer* renderer,
            float* scaleX,
            float* scaleY
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderScale(
            Ref<SDL_Renderer> renderer,
            Ref<float> scaleX,
            Ref<float> scaleY
        )
        {
            fixed (float* __dsl_scaleY = scaleY)
            fixed (float* __dsl_scaleX = scaleX)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderScale(__dsl_renderer, __dsl_scaleX, __dsl_scaleY);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Texture* GetRenderTarget(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> GetRenderTarget(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)GetRenderTarget(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderViewport(SDL_Renderer* renderer, Rect* rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderViewport(Ref<SDL_Renderer> renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderViewport(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetRenderVSync(SDL_Renderer* renderer, int* vsync);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderVSync(Ref<SDL_Renderer> renderer, Ref<int> vsync)
        {
            fixed (int* __dsl_vsync = vsync)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderVSync(__dsl_renderer, __dsl_vsync);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Window* GetRenderWindow(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetRenderWindow(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Window*)GetRenderWindow(__dsl_renderer);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRevision() => (sbyte*)GetRevisionRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetRevision")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetRevisionRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (PixelFormat* __dsl_format = format)
            {
                GetRGB(pixel, __dsl_format, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (PixelFormat* __dsl_format = format)
            {
                GetRgba(pixel, __dsl_format, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Scancode GetScancodeFromKey([NativeTypeName("SDL_Keycode")] int key);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Scancode GetScancodeFromName(
            [NativeTypeName("const char *")] sbyte* name
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (Scancode)GetScancodeFromName(__dsl_name);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetScancodeName(Scancode scancode) =>
            (sbyte*)GetScancodeNameRaw(scancode);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetScancodeName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetScancodeNameRaw(Scancode scancode);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetSemaphoreValue(SDL_Semaphore* sem);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSemaphoreValue(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (uint)GetSemaphoreValue(__dsl_sem);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSensorData(SDL_Sensor* sensor, float* data, int num_values);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorData(Ref<SDL_Sensor> sensor, Ref<float> data, int num_values)
        {
            fixed (float* __dsl_data = data)
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (int)GetSensorData(__dsl_sensor, __dsl_data, num_values);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Sensor> GetSensorFromInstanceID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => (SDL_Sensor*)GetSensorFromInstanceIDRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorFromInstanceID")]
        public static extern SDL_Sensor* GetSensorFromInstanceIDRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_SensorID")]
        public static extern uint GetSensorInstanceID(SDL_Sensor* sensor);

        [return: NativeTypeName("SDL_SensorID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorInstanceID(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (uint)GetSensorInstanceID(__dsl_sensor);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorInstanceName(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => (sbyte*)GetSensorInstanceNameRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetSensorInstanceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetSensorInstanceNameRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSensorInstanceNonPortableType(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SensorType GetSensorInstanceType(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetSensorName(SDL_Sensor* sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorName(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (sbyte*)GetSensorName(__dsl_sensor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSensorNonPortableType(SDL_Sensor* sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorNonPortableType(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (int)GetSensorNonPortableType(__dsl_sensor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetSensorProperties(SDL_Sensor* sensor);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorProperties(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (uint)GetSensorProperties(__dsl_sensor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_SensorID *")]
        public static extern uint* GetSensors(int* count);

        [return: NativeTypeName("SDL_SensorID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetSensors(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetSensors(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SensorType GetSensorType(SDL_Sensor* sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorType GetSensorType(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (SensorType)GetSensorType(__dsl_sensor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSilenceValueForFormat(
            [NativeTypeName("SDL_AudioFormat")] ushort format
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetStorageFileSize(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("Uint64 *")] ulong* length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetStorageFileSize(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("Uint64 *")] Ref<ulong> length
        )
        {
            fixed (ulong* __dsl_length = length)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)GetStorageFileSize(__dsl_storage, __dsl_path, __dsl_length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetStoragePathInfo(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetStoragePathInfo(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)GetStoragePathInfo(__dsl_storage, __dsl_path, __dsl_info);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetStorageSpaceRemaining(SDL_Storage* storage);

        [return: NativeTypeName("Uint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetStorageSpaceRemaining(Ref<SDL_Storage> storage)
        {
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (ulong)GetStorageSpaceRemaining(__dsl_storage);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* default_value
        );

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> default_value
        )
        {
            fixed (sbyte* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetStringProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* alpha
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceAlphaMod(__dsl_surface, __dsl_alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSurfaceBlendMode(Surface* surface, BlendMode* blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceBlendMode(Ref<Surface> surface, Ref<BlendMode> blendMode)
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceBlendMode(__dsl_surface, __dsl_blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSurfaceClipRect(Surface* surface, Rect* rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("Uint32 *")] uint* key
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("Uint32 *")] Ref<uint> key
        )
        {
            fixed (uint* __dsl_key = key)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceColorKey(__dsl_surface, __dsl_key);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceColorMod(__dsl_surface, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSurfaceColorspace(Surface* surface, Colorspace* colorspace);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorspace(Ref<Surface> surface, Ref<Colorspace> colorspace)
        {
            fixed (Colorspace* __dsl_colorspace = colorspace)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceColorspace(__dsl_surface, __dsl_colorspace);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetSurfaceProperties(Surface* surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSurfaceProperties(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)GetSurfaceProperties(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetSystemRAM();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SystemTheme GetSystemTheme();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetTextureAlphaMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8 *")] byte* alpha
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureAlphaMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureAlphaMod(__dsl_texture, __dsl_alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureAlphaModFloat(Ref<SDL_Texture> texture, Ref<float> alpha)
        {
            fixed (float* __dsl_alpha = alpha)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureAlphaModFloat(__dsl_texture, __dsl_alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetTextureBlendMode(SDL_Texture* texture, BlendMode* blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureBlendMode(Ref<SDL_Texture> texture, Ref<BlendMode> blendMode)
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureBlendMode(__dsl_texture, __dsl_blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetTextureColorMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureColorMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureColorMod(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetTextureColorModFloat(
            SDL_Texture* texture,
            float* r,
            float* g,
            float* b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureColorModFloat(
            Ref<SDL_Texture> texture,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b
        )
        {
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureColorModFloat(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetTextureProperties(SDL_Texture* texture);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetTextureProperties(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (uint)GetTextureProperties(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetTextureScaleMode(SDL_Texture* texture, ScaleMode* scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureScaleMode(Ref<SDL_Texture> texture, Ref<ScaleMode> scaleMode)
        {
            fixed (ScaleMode* __dsl_scaleMode = scaleMode)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureScaleMode(__dsl_texture, __dsl_scaleMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_ThreadID")]
        public static extern ulong GetThreadID(SDL_Thread* thread);

        [return: NativeTypeName("SDL_ThreadID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetThreadID(Ref<SDL_Thread> thread)
        {
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                return (ulong)GetThreadID(__dsl_thread);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetThreadName(SDL_Thread* thread);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetThreadName(Ref<SDL_Thread> thread)
        {
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                return (sbyte*)GetThreadName(__dsl_thread);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetTicks();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint64")]
        public static extern ulong GetTicksNS();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetTLS([NativeTypeName("SDL_TLSID")] uint id) => (void*)GetTLSRaw(id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTLS")]
        public static extern void* GetTLSRaw([NativeTypeName("SDL_TLSID")] uint id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetTouchDeviceName(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        ) => (sbyte*)GetTouchDeviceNameRaw(touchID);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetTouchDeviceName")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetTouchDeviceNameRaw(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_TouchID *")]
        public static extern ulong* GetTouchDevices(int* count);

        [return: NativeTypeName("SDL_TouchID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<ulong> GetTouchDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (ulong*)GetTouchDevices(__dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern TouchDeviceType GetTouchDeviceType(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Finger** GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            int* count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Finger> GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (Finger**)GetTouchFingers(touchID, __dsl_count);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetUserFolder(Folder folder) => (sbyte*)GetUserFolderRaw(folder);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetUserFolder")]
        [return: NativeTypeName("char *")]
        public static extern sbyte* GetUserFolderRaw(Folder folder);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetVersion(Version* ver);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetVersion(Ref<Version> ver)
        {
            fixed (Version* __dsl_ver = ver)
            {
                return (int)GetVersion(__dsl_ver);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetVideoDriver(int index) => (sbyte*)GetVideoDriverRaw(index);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetVideoDriver")]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetVideoDriverRaw(int index);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowBordersSize(
            SDL_Window* window,
            int* top,
            int* left,
            int* bottom,
            int* right
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowBordersSize(
            Ref<SDL_Window> window,
            Ref<int> top,
            Ref<int> left,
            Ref<int> bottom,
            Ref<int> right
        )
        {
            fixed (int* __dsl_right = right)
            fixed (int* __dsl_bottom = bottom)
            fixed (int* __dsl_left = left)
            fixed (int* __dsl_top = top)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowBordersSize(
                    __dsl_window,
                    __dsl_top,
                    __dsl_left,
                    __dsl_bottom,
                    __dsl_right
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern float GetWindowDisplayScale(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowDisplayScale(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (float)GetWindowDisplayScale(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_WindowFlags")]
        public static extern uint GetWindowFlags(SDL_Window* window);

        [return: NativeTypeName("SDL_WindowFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowFlags(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowFlags(__dsl_window);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
            (SDL_Window*)GetWindowFromIDRaw(id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GetWindowFromID")]
        public static extern SDL_Window* GetWindowFromIDRaw(
            [NativeTypeName("SDL_WindowID")] uint id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const SDL_DisplayMode *")]
        public static extern DisplayMode* GetWindowFullscreenMode(SDL_Window* window);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetWindowFullscreenMode(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (DisplayMode*)GetWindowFullscreenMode(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* GetWindowICCProfile(
            SDL_Window* window,
            [NativeTypeName("size_t *")] nuint* size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetWindowICCProfile(
            Ref<SDL_Window> window,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)GetWindowICCProfile(__dsl_window, __dsl_size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_WindowID")]
        public static extern uint GetWindowID(SDL_Window* window);

        [return: NativeTypeName("SDL_WindowID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowID(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowID(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetWindowKeyboardGrab(SDL_Window* window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetWindowKeyboardGrab(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)GetWindowKeyboardGrab(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowMaximumSize(SDL_Window* window, int* w, int* h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMaximumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowMaximumSize(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowMinimumSize(SDL_Window* window, int* w, int* h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMinimumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowMinimumSize(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GetWindowMouseGrab(SDL_Window* window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetWindowMouseGrab(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)GetWindowMouseGrab(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const SDL_Rect *")]
        public static extern Rect* GetWindowMouseRect(SDL_Window* window);

        [return: NativeTypeName("const SDL_Rect *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Rect> GetWindowMouseRect(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (Rect*)GetWindowMouseRect(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowOpacity(SDL_Window* window, float* out_opacity);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowOpacity(Ref<SDL_Window> window, Ref<float> out_opacity)
        {
            fixed (float* __dsl_out_opacity = out_opacity)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowOpacity(__dsl_window, __dsl_out_opacity);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Window* GetWindowParent(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetWindowParent(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (SDL_Window*)GetWindowParent(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern float GetWindowPixelDensity(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowPixelDensity(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (float)GetWindowPixelDensity(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint GetWindowPixelFormat(SDL_Window* window);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowPixelFormat(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowPixelFormat(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowPosition(SDL_Window* window, int* x, int* y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowPosition(Ref<SDL_Window> window, Ref<int> x, Ref<int> y)
        {
            fixed (int* __dsl_y = y)
            fixed (int* __dsl_x = x)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowPosition(__dsl_window, __dsl_x, __dsl_y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_PropertiesID")]
        public static extern uint GetWindowProperties(SDL_Window* window);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowProperties(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowProperties(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowSize(SDL_Window* window, int* w, int* h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowSize(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GetWindowSizeInPixels(SDL_Window* window, int* w, int* h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowSizeInPixels(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowSizeInPixels(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* GetWindowSurface(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> GetWindowSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (Surface*)GetWindowSurface(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("const char *")]
        public static extern sbyte* GetWindowTitle(SDL_Window* window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetWindowTitle(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (sbyte*)GetWindowTitle(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_GLContext")]
        public static extern void* GLCreateContext(SDL_Window* window);

        [return: NativeTypeName("SDL_GLContext")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GLCreateContext(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)GLCreateContext(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLDeleteContext([NativeTypeName("SDL_GLContext")] void* context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DeleteContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLDeleteContext([NativeTypeName("SDL_GLContext")] Ref context)
        {
            fixed (void* __dsl_context = context)
            {
                return (int)GLDeleteContext(__dsl_context);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int GLExtensionSupported(
            [NativeTypeName("const char *")] sbyte* extension
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GLExtensionSupported(
            [NativeTypeName("const char *")] Ref<sbyte> extension
        )
        {
            fixed (sbyte* __dsl_extension = extension)
            {
                return (MaybeBool<int>)(int)GLExtensionSupported(__dsl_extension);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLGetAttribute(GLattr attr, int* value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLGetAttribute(GLattr attr, Ref<int> value)
        {
            fixed (int* __dsl_value = value)
            {
                return (int)GLGetAttribute(attr, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_GLContext")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GLGetCurrentContext() => (void*)GLGetCurrentContextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetCurrentContext")]
        [return: NativeTypeName("SDL_GLContext")]
        public static extern void* GLGetCurrentContextRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GLGetCurrentWindow() => (SDL_Window*)GLGetCurrentWindowRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_GL_GetCurrentWindow")]
        public static extern SDL_Window* GLGetCurrentWindowRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_FunctionPointer")]
        public static extern delegate* unmanaged<void> GLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        );

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> GLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (delegate* unmanaged<void>)GLGetProcAddress(__dsl_proc);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLGetSwapInterval(int* interval);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLGetSwapInterval(Ref<int> interval)
        {
            fixed (int* __dsl_interval = interval)
            {
                return (int)GLGetSwapInterval(__dsl_interval);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLLoadLibrary([NativeTypeName("const char *")] sbyte* path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (int)GLLoadLibrary(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLMakeCurrent(
            SDL_Window* window,
            [NativeTypeName("SDL_GLContext")] void* context
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLMakeCurrent(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_GLContext")] Ref context
        )
        {
            fixed (void* __dsl_context = context)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GLMakeCurrent(__dsl_window, __dsl_context);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void GLResetAttributes();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLSetAttribute(GLattr attr, int value);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLSetSwapInterval(int interval);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GLSwapWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLSwapWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GLSwapWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void GLUnloadLibrary();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GlobDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("Uint32")] uint flags,
            int* count
        );

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("Uint32")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            {
                return (sbyte**)GlobDirectory(__dsl_path, __dsl_pattern, flags, __dsl_count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("char **")]
        public static extern sbyte** GlobStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("Uint32")] uint flags,
            int* count
        );

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("Uint32")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (sbyte**)GlobStorageDirectory(
                    __dsl_storage,
                    __dsl_path,
                    __dsl_pattern,
                    flags,
                    __dsl_count
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Guid GuidFromString([NativeTypeName("const char *")] sbyte* pchGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GuidFromString([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
        {
            fixed (sbyte* __dsl_pchGUID = pchGUID)
            {
                return (Guid)GuidFromString(__dsl_pchGUID);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int GuidToString(
            Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GuidToString(
            Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        )
        {
            fixed (sbyte* __dsl_pszGUID = pszGUID)
            {
                return (int)GuidToString(guid, __dsl_pszGUID, cbGUID);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HapticEffectSupported(
            SDL_Haptic* haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HapticEffectSupported(
            Ref<SDL_Haptic> haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (MaybeBool<int>)(int)HapticEffectSupported(__dsl_haptic, __dsl_effect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HapticRumbleSupported(SDL_Haptic* haptic);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HapticRumbleSupported(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (MaybeBool<int>)(int)HapticRumbleSupported(__dsl_haptic);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        public static MaybeBool<int> HasAltiVec() => (MaybeBool<int>)(int)HasAltiVecRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAltiVec")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasAltiVecRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        public static MaybeBool<int> HasArmsimd() => (MaybeBool<int>)(int)HasArmsimdRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasARMSIMD")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasArmsimdRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        public static MaybeBool<int> HasAVX() => (MaybeBool<int>)(int)HasAVXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        public static MaybeBool<int> HasAVX2() => (MaybeBool<int>)(int)HasAVX2Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAVX2")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasAVX2Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        public static MaybeBool<int> HasAVX512F() => (MaybeBool<int>)(int)HasAVX512FRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAVX512F")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasAVX512FRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasAVX")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasAVXRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type
        )
        {
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (MaybeBool<int>)(int)HasClipboardData(__dsl_mime_type);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        public static MaybeBool<int> HasClipboardText() =>
            (MaybeBool<int>)(int)HasClipboardTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasClipboardText")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasClipboardTextRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        public static MaybeBool<int> HasEvent([NativeTypeName("Uint32")] uint type) =>
            (MaybeBool<int>)(int)HasEventRaw(type);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasEvent")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasEventRaw([NativeTypeName("Uint32")] uint type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        public static MaybeBool<int> HasEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => (MaybeBool<int>)(int)HasEventsRaw(minType, maxType);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasEvents")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasEventsRaw(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        public static MaybeBool<int> HasGamepad() => (MaybeBool<int>)(int)HasGamepadRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasGamepad")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasGamepadRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        public static MaybeBool<int> HasJoystick() => (MaybeBool<int>)(int)HasJoystickRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasJoystick")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasJoystickRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        public static MaybeBool<int> HasKeyboard() => (MaybeBool<int>)(int)HasKeyboardRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasKeyboard")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasKeyboardRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        public static MaybeBool<int> HasLasx() => (MaybeBool<int>)(int)HasLasxRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasLASX")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasLasxRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        public static MaybeBool<int> HasLSX() => (MaybeBool<int>)(int)HasLSXRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasLSX")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasLSXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        public static MaybeBool<int> HasMMX() => (MaybeBool<int>)(int)HasMMXRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasMMX")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasMMXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        public static MaybeBool<int> HasMouse() => (MaybeBool<int>)(int)HasMouseRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasMouse")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasMouseRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        public static MaybeBool<int> HasNeon() => (MaybeBool<int>)(int)HasNeonRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasNEON")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasNeonRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        public static MaybeBool<int> HasPrimarySelectionText() =>
            (MaybeBool<int>)(int)HasPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasPrimarySelectionText")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasPrimarySelectionTextRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)HasProperty(props, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
        )
        {
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<int>)(int)HasRectIntersection(__dsl_A, __dsl_B);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
        )
        {
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<int>)(int)HasRectIntersectionFloat(__dsl_A, __dsl_B);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        public static MaybeBool<int> HasScreenKeyboardSupport() =>
            (MaybeBool<int>)(int)HasScreenKeyboardSupportRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasScreenKeyboardSupportRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        public static MaybeBool<int> HasSSE() => (MaybeBool<int>)(int)HasSSERaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        public static MaybeBool<int> HasSSE2() => (MaybeBool<int>)(int)HasSSE2Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE2")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasSSE2Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        public static MaybeBool<int> HasSSE3() => (MaybeBool<int>)(int)HasSSE3Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE3")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasSSE3Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        public static MaybeBool<int> HasSSE41() => (MaybeBool<int>)(int)HasSSE41Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE41")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasSSE41Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        public static MaybeBool<int> HasSSE42() => (MaybeBool<int>)(int)HasSSE42Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE42")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasSSE42Raw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_HasSSE")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int HasSSERaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void HidBleScan([NativeTypeName("SDL_bool")] int active);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        public static void HidBleScan([NativeTypeName("SDL_bool")] MaybeBool<int> active) =>
            HidBleScan((int)active);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidClose(SDL_hid_device* dev);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidClose(Ref<SDL_hid_device> dev)
        {
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidClose(__dsl_dev);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint HidDeviceChangeCount();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidEnumerate(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => (HidDeviceInfo*)HidEnumerateRaw(vendor_id, product_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_hid_enumerate")]
        public static extern HidDeviceInfo* HidEnumerateRaw(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidExit();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void HidFreeEnumeration(HidDeviceInfo* devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidFreeEnumeration(Ref<HidDeviceInfo> devs)
        {
            fixed (HidDeviceInfo* __dsl_devs = devs)
            {
                HidFreeEnumeration(__dsl_devs);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern HidDeviceInfo* HidGetDeviceInfo(SDL_hid_device* dev);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidGetDeviceInfo(Ref<SDL_hid_device> dev)
        {
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (HidDeviceInfo*)HidGetDeviceInfo(__dsl_dev);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetFeatureReport(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetFeatureReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetFeatureReport(__dsl_dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetIndexedString(
            SDL_hid_device* dev,
            int string_index,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetIndexedString(
            Ref<SDL_hid_device> dev,
            int string_index,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetIndexedString(__dsl_dev, string_index, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetInputReport(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetInputReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetInputReport(__dsl_dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetManufacturerString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetManufacturerString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetManufacturerString(__dsl_dev, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetProductString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetProductString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetProductString(__dsl_dev, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetReportDescriptor(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* buf,
            [NativeTypeName("size_t")] nuint buf_size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetReportDescriptor(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> buf,
            [NativeTypeName("size_t")] nuint buf_size
        )
        {
            fixed (byte* __dsl_buf = buf)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetReportDescriptor(__dsl_dev, __dsl_buf, buf_size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidGetSerialNumberString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetSerialNumberString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetSerialNumberString(__dsl_dev, __dsl_string, maxlen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidInit();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_hid_device* HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] uint* serial_number
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_hid_device> HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
        )
        {
            fixed (uint* __dsl_serial_number = serial_number)
            {
                return (SDL_hid_device*)HidOpen(vendor_id, product_id, __dsl_serial_number);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_hid_device* HidOpenPath(
            [NativeTypeName("const char *")] sbyte* path
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_hid_device> HidOpenPath(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (SDL_hid_device*)HidOpenPath(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidRead(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidRead(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidRead(__dsl_dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidReadTimeout(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidReadTimeout(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidReadTimeout(__dsl_dev, __dsl_data, length, milliseconds);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidSendFeatureReport(
            SDL_hid_device* dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSendFeatureReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidSendFeatureReport(__dsl_dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidSetNonblocking(SDL_hid_device* dev, int nonblock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSetNonblocking(Ref<SDL_hid_device> dev, int nonblock)
        {
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidSetNonblocking(__dsl_dev, nonblock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HidWrite(
            SDL_hid_device* dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidWrite(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidWrite(__dsl_dev, __dsl_data, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HideCursor();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int HideWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HideWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)HideWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int Init([NativeTypeName("Uint32")] uint flags);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int InitHapticRumble(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int InitHapticRumble(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)InitHapticRumble(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int InitSubSystem([NativeTypeName("Uint32")] uint flags);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_IOStream* IOFromConstMem(
            [NativeTypeName("const void *")] void* mem,
            [NativeTypeName("size_t")] nuint size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromConstMem(
            [NativeTypeName("const void *")] Ref mem,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_mem = mem)
            {
                return (SDL_IOStream*)IOFromConstMem(__dsl_mem, size);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromDynamicMem() => (SDL_IOStream*)IOFromDynamicMemRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IOFromDynamicMem")]
        public static extern SDL_IOStream* IOFromDynamicMemRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_IOStream* IOFromFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("const char *")] sbyte* mode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("const char *")] Ref<sbyte> mode
        )
        {
            fixed (sbyte* __dsl_mode = mode)
            fixed (sbyte* __dsl_file = file)
            {
                return (SDL_IOStream*)IOFromFile(__dsl_file, __dsl_mode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_IOStream* IOFromMem(
            void* mem,
            [NativeTypeName("size_t")] nuint size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size)
        {
            fixed (void* __dsl_mem = mem)
            {
                return (SDL_IOStream*)IOFromMem(__dsl_mem, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("size_t")]
        public static extern nuint IOvprintf(
            SDL_IOStream* context,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        );

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint IOvprintf(
            Ref<SDL_IOStream> context,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (nuint)IOvprintf(__dsl_context, __dsl_fmt, __dsl_ap);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        public static MaybeBool<int> IsGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (MaybeBool<int>)(int)IsGamepadRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsGamepad")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int IsJoystickHaptic(SDL_Joystick* joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> IsJoystickHaptic(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (MaybeBool<int>)(int)IsJoystickHaptic(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        public static MaybeBool<int> IsJoystickVirtual(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (MaybeBool<int>)(int)IsJoystickVirtualRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsJoystickVirtual")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int IsJoystickVirtualRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        public static MaybeBool<int> IsMouseHaptic() => (MaybeBool<int>)(int)IsMouseHapticRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsMouseHaptic")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int IsMouseHapticRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        public static MaybeBool<int> IsTablet() => (MaybeBool<int>)(int)IsTabletRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_IsTablet")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int IsTabletRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int JoystickConnected(SDL_Joystick* joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> JoystickConnected(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (MaybeBool<int>)(int)JoystickConnected(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        public static MaybeBool<int> JoystickEventsEnabled() =>
            (MaybeBool<int>)(int)JoystickEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_JoystickEventsEnabled")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int JoystickEventsEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file)
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (Surface*)LoadBMP(__dsl_file);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* LoadBMPIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMPIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (Surface*)LoadBMPIO(__dsl_src, (int)closeio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* LoadFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("size_t *")] nuint* datasize
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("size_t *")] Ref<nuint> datasize
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            fixed (sbyte* __dsl_file = file)
            {
                return (void*)LoadFile(__dsl_file, __dsl_datasize);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* LoadFileIO(
            SDL_IOStream* src,
            [NativeTypeName("size_t *")] nuint* datasize,
            [NativeTypeName("SDL_bool")] int closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFileIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("size_t *")] Ref<nuint> datasize,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (void*)LoadFileIO(__dsl_src, __dsl_datasize, (int)closeio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_FunctionPointer")]
        public static extern delegate* unmanaged<void> LoadFunction(
            void* handle,
            [NativeTypeName("const char *")] sbyte* name
        );

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> LoadFunction(
            Ref handle,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            fixed (void* __dsl_handle = handle)
            {
                return (delegate* unmanaged<void>)LoadFunction(__dsl_handle, __dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* LoadObject([NativeTypeName("const char *")] sbyte* sofile);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile)
        {
            fixed (sbyte* __dsl_sofile = sofile)
            {
                return (void*)LoadObject(__dsl_sofile);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LoadWAV(
            [NativeTypeName("const char *")] sbyte* path,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LoadWAV(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            fixed (sbyte* __dsl_path = path)
            {
                return (int)LoadWAV(__dsl_path, __dsl_spec, __dsl_audio_buf, __dsl_audio_len);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LoadWAVIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LoadWAVIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (int)LoadWAVIO(
                    __dsl_src,
                    (int)closeio,
                    __dsl_spec,
                    __dsl_audio_buf,
                    __dsl_audio_len
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LockAudioStream(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)LockAudioStream(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LockJoysticks();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LockMutex(SDL_Mutex* mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                LockMutex(__dsl_mutex);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LockProperties([NativeTypeName("SDL_PropertiesID")] uint props);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LockRWLockForReading(SDL_RWLock* rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForReading(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                LockRWLockForReading(__dsl_rwlock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LockRWLockForWriting(SDL_RWLock* rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForWriting(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                LockRWLockForWriting(__dsl_rwlock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                LockSpinlock(__dsl_lock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LockSurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)LockSurface(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LockTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            void** pixels,
            int* pitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D pixels,
            Ref<int> pitch
        )
        {
            fixed (int* __dsl_pitch = pitch)
            fixed (void** __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)LockTexture(__dsl_texture, __dsl_rect, __dsl_pixels, __dsl_pitch);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int LockTextureToSurface(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            Surface** surface
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockTextureToSurface(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D<Surface> surface
        )
        {
            fixed (Surface** __dsl_surface = surface)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)LockTextureToSurface(__dsl_texture, __dsl_rect, __dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern LogPriority LogGetPriority(int category);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                LogMessageV(category, priority, __dsl_fmt, __dsl_ap);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LogResetPriorities();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LogSetAllPriority(LogPriority priority);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void LogSetPriority(int category, LogPriority priority);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint MapRGB(
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRGB(
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (PixelFormat* __dsl_format = format)
            {
                return (uint)MapRGB(__dsl_format, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint MapRgba(
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        );

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRgba(
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (PixelFormat* __dsl_format = format)
            {
                return (uint)MapRgba(__dsl_format, r, g, b, a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int MaximizeWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MaximizeWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)MaximizeWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void MemoryBarrierAcquireFunction();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void MemoryBarrierReleaseFunction();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_MetalView")]
        public static extern void* MetalCreateView(SDL_Window* window);

        [return: NativeTypeName("SDL_MetalView")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalCreateView(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)MetalCreateView(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                MetalDestroyView(__dsl_view);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                return (void*)MetalGetLayer(__dsl_view);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int MinimizeWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MinimizeWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)MinimizeWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int MixAudioFormat(
            [NativeTypeName("Uint8 *")] byte* dst,
            [NativeTypeName("const Uint8 *")] byte* src,
            [NativeTypeName("SDL_AudioFormat")] ushort format,
            [NativeTypeName("Uint32")] uint len,
            int volume
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudioFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MixAudioFormat(
            [NativeTypeName("Uint8 *")] Ref<byte> dst,
            [NativeTypeName("const Uint8 *")] Ref<byte> src,
            [NativeTypeName("SDL_AudioFormat")] ushort format,
            [NativeTypeName("Uint32")] uint len,
            int volume
        )
        {
            fixed (byte* __dsl_src = src)
            fixed (byte* __dsl_dst = dst)
            {
                return (int)MixAudioFormat(__dsl_dst, __dsl_src, format, len, volume);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void OnApplicationDidBecomeActive();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void OnApplicationDidEnterBackground();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void OnApplicationDidReceiveMemoryWarning();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void OnApplicationWillEnterForeground();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void OnApplicationWillResignActive();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void OnApplicationWillTerminate();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_AudioDeviceID")]
        public static extern uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
        );

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
        )
        {
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (uint)OpenAudioDevice(devid, __dsl_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_AudioStream* OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_AudioStream> OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (SDL_AudioStream*)OpenAudioDeviceStream(
                    devid,
                    __dsl_spec,
                    callback,
                    __dsl_userdata
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Camera* OpenCameraDevice(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCameraDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Camera> OpenCameraDevice(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
        )
        {
            fixed (CameraSpec* __dsl_spec = spec)
            {
                return (SDL_Camera*)OpenCameraDevice(instance_id, __dsl_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Storage* OpenFileStorage(
            [NativeTypeName("const char *")] sbyte* path
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenFileStorage(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (SDL_Storage*)OpenFileStorage(__dsl_path);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Gamepad> OpenGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (SDL_Gamepad*)OpenGamepadRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenGamepad")]
        public static extern SDL_Gamepad* OpenGamepadRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> OpenHaptic(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => (SDL_Haptic*)OpenHapticRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Haptic* OpenHapticFromJoystick(SDL_Joystick* joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> OpenHapticFromJoystick(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (SDL_Haptic*)OpenHapticFromJoystick(__dsl_joystick);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> OpenHapticFromMouse() =>
            (SDL_Haptic*)OpenHapticFromMouseRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenHapticFromMouse")]
        public static extern SDL_Haptic* OpenHapticFromMouseRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenHaptic")]
        public static extern SDL_Haptic* OpenHapticRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_IOStream* OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (IOStreamInterface* __dsl_iface = iface)
            {
                return (SDL_IOStream*)OpenIO(__dsl_iface, __dsl_userdata);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> OpenJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => (SDL_Joystick*)OpenJoystickRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenJoystick")]
        public static extern SDL_Joystick* OpenJoystickRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Sensor> OpenSensor(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => (SDL_Sensor*)OpenSensorRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_OpenSensor")]
        public static extern SDL_Sensor* OpenSensorRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Storage* OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (StorageInterface* __dsl_iface = iface)
            {
                return (SDL_Storage*)OpenStorage(__dsl_iface, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Storage* OpenTitleStorage(
            [NativeTypeName("const char *")] sbyte* @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenTitleStorage(
            [NativeTypeName("const char *")] Ref<sbyte> @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_override = @override)
            {
                return (SDL_Storage*)OpenTitleStorage(__dsl_override, props);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int OpenURL([NativeTypeName("const char *")] sbyte* url);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int OpenURL([NativeTypeName("const char *")] Ref<sbyte> url)
        {
            fixed (sbyte* __dsl_url = url)
            {
                return (int)OpenURL(__dsl_url);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern SDL_Storage* OpenUserStorage(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenUserStorage(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (SDL_Storage*)OpenUserStorage(__dsl_org, __dsl_app, props);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PauseHaptic(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PauseHaptic(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)PauseHaptic(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PeepEvents(
            Event* events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PeepEvents(
            Ref<Event> events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        )
        {
            fixed (Event* __dsl_events = events)
            {
                return (int)PeepEvents(__dsl_events, numevents, action, minType, maxType);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
        public static MaybeBool<int> PenConnected([NativeTypeName("SDL_PenID")] uint instance_id) =>
            (MaybeBool<int>)(int)PenConnectedRaw(instance_id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_PenConnected")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int PenConnectedRaw([NativeTypeName("SDL_PenID")] uint instance_id);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PlayHapticRumble(
            SDL_Haptic* haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PlayHapticRumble(
            Ref<SDL_Haptic> haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        )
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)PlayHapticRumble(__dsl_haptic, strength, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int PollEvent(Event* @event);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> PollEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<int>)(int)PollEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PostSemaphore(SDL_Semaphore* sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PostSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PostSemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)PostSemaphore(__dsl_sem);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PremultiplyAlpha(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            void* dst,
            int dst_pitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PremultiplyAlpha(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (int)PremultiplyAlpha(
                    width,
                    height,
                    src_format,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    __dsl_dst,
                    dst_pitch
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void PumpEvents();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PushEvent(Event* @event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PushEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (int)PushEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int PutAudioStreamData(
            SDL_AudioStream* stream,
            [NativeTypeName("const void *")] void* buf,
            int len
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PutAudioStreamData(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("const void *")] Ref buf,
            int len
        )
        {
            fixed (void* __dsl_buf = buf)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)PutAudioStreamData(__dsl_stream, __dsl_buf, len);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int QueryTexture(
            SDL_Texture* texture,
            PixelFormatEnum* format,
            int* access,
            int* w,
            int* h
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_QueryTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int QueryTexture(
            Ref<SDL_Texture> texture,
            Ref<PixelFormatEnum> format,
            Ref<int> access,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (int* __dsl_access = access)
            fixed (PixelFormatEnum* __dsl_format = format)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)QueryTexture(
                    __dsl_texture,
                    __dsl_format,
                    __dsl_access,
                    __dsl_w,
                    __dsl_h
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void Quit();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void QuitSubSystem([NativeTypeName("Uint32")] uint flags);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RaiseWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RaiseWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)RaiseWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("size_t")]
        public static extern nuint ReadIO(
            SDL_IOStream* context,
            void* ptr,
            [NativeTypeName("size_t")] nuint size
        );

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint ReadIO(
            Ref<SDL_IOStream> context,
            Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (nuint)ReadIO(__dsl_context, __dsl_ptr, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadS16BE(
            SDL_IOStream* src,
            [NativeTypeName("Sint16 *")] short* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS16BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS16BE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadS16LE(
            SDL_IOStream* src,
            [NativeTypeName("Sint16 *")] short* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS16LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS16LE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadS32BE(
            SDL_IOStream* src,
            [NativeTypeName("Sint32 *")] int* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS32BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS32BE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadS32LE(
            SDL_IOStream* src,
            [NativeTypeName("Sint32 *")] int* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS32LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS32LE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadS64BE(
            SDL_IOStream* src,
            [NativeTypeName("Sint64 *")] long* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS64BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS64BE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadS64LE(
            SDL_IOStream* src,
            [NativeTypeName("Sint64 *")] long* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS64LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS64LE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ReadStorageFile(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            void* destination,
            [NativeTypeName("Uint64")] ulong length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadStorageFile(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref destination,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_destination = destination)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)ReadStorageFile(__dsl_storage, __dsl_path, __dsl_destination, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ReadSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)ReadSurfacePixel(
                    __dsl_surface,
                    x,
                    y,
                    __dsl_r,
                    __dsl_g,
                    __dsl_b,
                    __dsl_a
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU16BE(
            SDL_IOStream* src,
            [NativeTypeName("Uint16 *")] ushort* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU16BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU16BE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU16LE(
            SDL_IOStream* src,
            [NativeTypeName("Uint16 *")] ushort* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU16LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU16LE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU32BE(
            SDL_IOStream* src,
            [NativeTypeName("Uint32 *")] uint* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU32BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU32BE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU32LE(
            SDL_IOStream* src,
            [NativeTypeName("Uint32 *")] uint* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU32LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU32LE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU64BE(
            SDL_IOStream* src,
            [NativeTypeName("Uint64 *")] ulong* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU64BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU64BE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU64LE(
            SDL_IOStream* src,
            [NativeTypeName("Uint64 *")] ulong* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU64LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU64LE(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ReadU8(SDL_IOStream* src, [NativeTypeName("Uint8 *")] byte* value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU8(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint8 *")] Ref<byte> value
        )
        {
            fixed (byte* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU8(__dsl_src, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint RegisterEvents(int numevents);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ReleaseCameraFrame(SDL_Camera* camera, Surface* frame);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReleaseCameraFrame(Ref<SDL_Camera> camera, Ref<Surface> frame)
        {
            fixed (Surface* __dsl_frame = frame)
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (int)ReleaseCameraFrame(__dsl_camera, __dsl_frame);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ReloadGamepadMappings();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RemovePath([NativeTypeName("const char *")] sbyte* path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemovePath([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (int)RemovePath(__dsl_path);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RemoveStoragePath(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemoveStoragePath(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)RemoveStoragePath(__dsl_storage, __dsl_path);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        public static MaybeBool<int> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
            (MaybeBool<int>)(int)RemoveTimerRaw(id);

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_RemoveTimer")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenamePath(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenamePath(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (int)RenamePath(__dsl_oldpath, __dsl_newpath);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenameStoragePath(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenameStoragePath(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)RenameStoragePath(__dsl_storage, __dsl_oldpath, __dsl_newpath);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderClear(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderClear(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderClear(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int RenderClipEnabled(SDL_Renderer* renderer);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> RenderClipEnabled(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (MaybeBool<int>)(int)RenderClipEnabled(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderCoordinatesFromWindow(
            SDL_Renderer* renderer,
            float window_x,
            float window_y,
            float* x,
            float* y
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderCoordinatesFromWindow(
            Ref<SDL_Renderer> renderer,
            float window_x,
            float window_y,
            Ref<float> x,
            Ref<float> y
        )
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderCoordinatesFromWindow(
                    __dsl_renderer,
                    window_x,
                    window_y,
                    __dsl_x,
                    __dsl_y
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderCoordinatesToWindow(
            SDL_Renderer* renderer,
            float x,
            float y,
            float* window_x,
            float* window_y
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderCoordinatesToWindow(
            Ref<SDL_Renderer> renderer,
            float x,
            float y,
            Ref<float> window_x,
            Ref<float> window_y
        )
        {
            fixed (float* __dsl_window_y = window_y)
            fixed (float* __dsl_window_x = window_x)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderCoordinatesToWindow(
                    __dsl_renderer,
                    x,
                    y,
                    __dsl_window_x,
                    __dsl_window_y
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderFillRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderFillRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderFillRect(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderFillRects(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderFillRects(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderFillRects(__dsl_renderer, __dsl_rects, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderGeometry(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
            int num_vertices,
            [NativeTypeName("const int *")] int* indices,
            int num_indices
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometry(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
            int num_vertices,
            [NativeTypeName("const int *")] Ref<int> indices,
            int num_indices
        )
        {
            fixed (int* __dsl_indices = indices)
            fixed (Vertex* __dsl_vertices = vertices)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderGeometry(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_vertices,
                    num_vertices,
                    __dsl_indices,
                    num_indices
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderGeometryRaw(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_Color *")] Color* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometryRaw(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_Color *")] Ref<Color> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        )
        {
            fixed (void* __dsl_indices = indices)
            fixed (float* __dsl_uv = uv)
            fixed (Color* __dsl_color = color)
            fixed (float* __dsl_xy = xy)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderGeometryRaw(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_xy,
                    xy_stride,
                    __dsl_color,
                    color_stride,
                    __dsl_uv,
                    uv_stride,
                    num_vertices,
                    __dsl_indices,
                    num_indices,
                    size_indices
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderGeometryRawFloat(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] FColor* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRawFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometryRawFloat(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        )
        {
            fixed (void* __dsl_indices = indices)
            fixed (float* __dsl_uv = uv)
            fixed (FColor* __dsl_color = color)
            fixed (float* __dsl_xy = xy)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderGeometryRawFloat(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_xy,
                    xy_stride,
                    __dsl_color,
                    color_stride,
                    __dsl_uv,
                    uv_stride,
                    num_vertices,
                    __dsl_indices,
                    num_indices,
                    size_indices
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderLine(
            SDL_Renderer* renderer,
            float x1,
            float y1,
            float x2,
            float y2
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderLine(
            Ref<SDL_Renderer> renderer,
            float x1,
            float y1,
            float x2,
            float y2
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderLine(__dsl_renderer, x1, y1, x2, y2);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderLines(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderLines(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderLines(__dsl_renderer, __dsl_points, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderPoint(SDL_Renderer* renderer, float x, float y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPoint(Ref<SDL_Renderer> renderer, float x, float y)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderPoint(__dsl_renderer, x, y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderPoints(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPoints(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderPoints(__dsl_renderer, __dsl_points, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderPresent(SDL_Renderer* renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPresent(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderPresent(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern Surface* RenderReadPixels(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> RenderReadPixels(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (Surface*)RenderReadPixels(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderRect(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderRects(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderRects(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderRects(__dsl_renderer, __dsl_rects, count);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderTexture(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderTexture(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderTexture(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_srcrect,
                    __dsl_dstrect
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RenderTextureRotated(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
            [NativeTypeName("const double")] double angle,
            [NativeTypeName("const SDL_FPoint *")] FPoint* center,
            [NativeTypeName("const SDL_FlipMode")] FlipMode flip
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderTextureRotated(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
            [NativeTypeName("const double")] double angle,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
            [NativeTypeName("const SDL_FlipMode")] FlipMode flip
        )
        {
            fixed (FPoint* __dsl_center = center)
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderTextureRotated(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_srcrect,
                    __dsl_dstrect,
                    angle,
                    __dsl_center,
                    flip
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int RenderViewportSet(SDL_Renderer* renderer);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> RenderViewportSet(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (MaybeBool<int>)(int)RenderViewportSet(__dsl_renderer);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern AssertState ReportAssertion(
            AssertData* data,
            [NativeTypeName("const char *")] sbyte* func,
            [NativeTypeName("const char *")] sbyte* file,
            int line
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertState ReportAssertion(
            Ref<AssertData> data,
            [NativeTypeName("const char *")] Ref<sbyte> func,
            [NativeTypeName("const char *")] Ref<sbyte> file,
            int line
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (sbyte* __dsl_func = func)
            fixed (AssertData* __dsl_data = data)
            {
                return (AssertState)ReportAssertion(__dsl_data, __dsl_func, __dsl_file, line);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ResetAssertionReport();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ResetHint([NativeTypeName("const char *")] sbyte* name);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)ResetHint(__dsl_name);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ResetHints();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ResetKeyboard();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RestoreWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RestoreWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)RestoreWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ResumeHaptic(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ResumeHaptic(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)ResumeHaptic(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RumbleGamepad(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleGamepad(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)RumbleGamepad(
                    __dsl_gamepad,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RumbleGamepadTriggers(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleGamepadTriggers(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)RumbleGamepadTriggers(
                    __dsl_gamepad,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RumbleJoystick(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleJoystick(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)RumbleJoystick(
                    __dsl_joystick,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RumbleJoystickTriggers(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleJoystickTriggers(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)RumbleJoystickTriggers(
                    __dsl_joystick,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int RunHapticEffect(
            SDL_Haptic* haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RunHapticEffect(
            Ref<SDL_Haptic> haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        )
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)RunHapticEffect(__dsl_haptic, effect, iterations);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SaveBMP(
            Surface* surface,
            [NativeTypeName("const char *")] sbyte* file
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SaveBMP(
            Ref<Surface> surface,
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SaveBMP(__dsl_surface, __dsl_file);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SaveBMPIO(
            Surface* surface,
            SDL_IOStream* dst,
            [NativeTypeName("SDL_bool")] int closeio
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SaveBMPIO(
            Ref<Surface> surface,
            Ref<SDL_IOStream> dst,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SaveBMPIO(__dsl_surface, __dsl_dst, (int)closeio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ScreenKeyboardShown(SDL_Window* window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ScreenKeyboardShown(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)ScreenKeyboardShown(__dsl_window);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        public static MaybeBool<int> ScreenSaverEnabled() =>
            (MaybeBool<int>)(int)ScreenSaverEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_ScreenSaverEnabled")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int ScreenSaverEnabledRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Sint64")]
        public static extern long SeekIO(
            SDL_IOStream* context,
            [NativeTypeName("Sint64")] long offset,
            int whence
        );

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long SeekIO(
            Ref<SDL_IOStream> context,
            [NativeTypeName("Sint64")] long offset,
            int whence
        )
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (long)SeekIO(__dsl_context, offset, whence);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SendGamepadEffect(
            SDL_Gamepad* gamepad,
            [NativeTypeName("const void *")] void* data,
            int size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SendGamepadEffect(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SendGamepadEffect(__dsl_gamepad, __dsl_data, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SendJoystickEffect(
            SDL_Joystick* joystick,
            [NativeTypeName("const void *")] void* data,
            int size
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SendJoystickEffect(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SendJoystickEffect(__dsl_joystick, __dsl_data, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")]
                delegate* unmanaged<AssertData*, void*, AssertState> handler,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")]
                delegate* unmanaged<AssertData*, void*, AssertState> handler,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetAssertionHandler(handler, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")]
                delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")]
                delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)SetAudioPostmixCallback(devid, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetAudioStreamFormat(
            SDL_AudioStream* stream,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamFormat(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamFormat(__dsl_stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream, float ratio)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamFrequencyRatio(__dsl_stream, ratio);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetAudioStreamGetCallback(
            SDL_AudioStream* stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamGetCallback(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamGetCallback(__dsl_stream, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetAudioStreamPutCallback(
            SDL_AudioStream* stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamPutCallback(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamPutCallback(__dsl_stream, callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetBooleanProperty(props, __dsl_name, (int)value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")]
                delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")]
                delegate* unmanaged<void*, void> cleanup,
            void* userdata,
            [NativeTypeName("const char **")] sbyte** mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")]
                delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")]
                delegate* unmanaged<void*, void> cleanup,
            Ref userdata,
            [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        )
        {
            fixed (sbyte** __dsl_mime_types = mime_types)
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)SetClipboardData(
                    callback,
                    cleanup,
                    __dsl_userdata,
                    __dsl_mime_types,
                    num_mime_types
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetClipboardText([NativeTypeName("const char *")] sbyte* text);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text)
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (int)SetClipboardText(__dsl_text);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetCursor(SDL_Cursor* cursor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetCursor(Ref<SDL_Cursor> cursor)
        {
            fixed (SDL_Cursor* __dsl_cursor = cursor)
            {
                return (int)SetCursor(__dsl_cursor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("SDL_bool")] int enabled
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        public static void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => SetEventEnabled(type, (int)enabled);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetEventFilter(filter, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetFloatProperty(props, __dsl_name, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] int enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        public static void SetGamepadEventsEnabled(
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => SetGamepadEventsEnabled((int)enabled);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetGamepadLED(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadLED(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SetGamepadLED(__dsl_gamepad, red, green, blue);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] sbyte* mapping
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] Ref<sbyte> mapping
        )
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (int)SetGamepadMapping(instance_id, __dsl_mapping);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad, int player_index)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SetGamepadPlayerIndex(__dsl_gamepad, player_index);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetGamepadSensorEnabled(
            SDL_Gamepad* gamepad,
            SensorType type,
            [NativeTypeName("SDL_bool")] int enabled
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadSensorEnabled(
            Ref<SDL_Gamepad> gamepad,
            SensorType type,
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SetGamepadSensorEnabled(__dsl_gamepad, type, (int)enabled);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetHapticAutocenter(SDL_Haptic* haptic, int autocenter);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHapticAutocenter(Ref<SDL_Haptic> haptic, int autocenter)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)SetHapticAutocenter(__dsl_haptic, autocenter);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetHapticGain(SDL_Haptic* haptic, int gain);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHapticGain(Ref<SDL_Haptic> haptic, int gain)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)SetHapticGain(__dsl_haptic, gain);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int SetHint(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SetHint(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)SetHint(__dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int SetHintWithPriority(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value,
            HintPriority priority
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SetHintWithPriority(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value,
            HintPriority priority
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)SetHintWithPriority(__dsl_name, __dsl_value, priority);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetJoystickEventsEnabled(
            [NativeTypeName("SDL_bool")] int enabled
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        public static void SetJoystickEventsEnabled(
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => SetJoystickEventsEnabled((int)enabled);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetJoystickLED(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickLED(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickLED(__dsl_joystick, red, green, blue);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickPlayerIndex(Ref<SDL_Joystick> joystick, int player_index)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickPlayerIndex(__dsl_joystick, player_index);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetJoystickVirtualAxis(
            SDL_Joystick* joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualAxis(
            Ref<SDL_Joystick> joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickVirtualAxis(__dsl_joystick, axis, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetJoystickVirtualButton(
            SDL_Joystick* joystick,
            int button,
            [NativeTypeName("Uint8")] byte value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualButton(
            Ref<SDL_Joystick> joystick,
            int button,
            [NativeTypeName("Uint8")] byte value
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickVirtualButton(__dsl_joystick, button, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetJoystickVirtualHat(
            SDL_Joystick* joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualHat(
            Ref<SDL_Joystick> joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickVirtualHat(__dsl_joystick, hat, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetLogOutputFunction(callback, __dsl_userdata);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void SetModState(Keymod modstate);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetNumberProperty(props, __dsl_name, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetPaletteColors(
            Palette* palette,
            [NativeTypeName("const SDL_Color *")] Color* colors,
            int firstcolor,
            int ncolors
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPaletteColors(
            Ref<Palette> palette,
            [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
            int firstcolor,
            int ncolors
        )
        {
            fixed (Color* __dsl_colors = colors)
            fixed (Palette* __dsl_palette = palette)
            {
                return (int)SetPaletteColors(__dsl_palette, __dsl_colors, firstcolor, ncolors);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetPixelFormatPalette(PixelFormat* format, Palette* palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPixelFormatPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPixelFormatPalette(Ref<PixelFormat> format, Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormat* __dsl_format = format)
            {
                return (int)SetPixelFormatPalette(__dsl_format, __dsl_palette);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetPrimarySelectionText(
            [NativeTypeName("const char *")] sbyte* text
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPrimarySelectionText([NativeTypeName("const char *")] Ref<sbyte> text)
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (int)SetPrimarySelectionText(__dsl_text);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value
        )
        {
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetProperty(props, __dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value,
            [NativeTypeName("void (*)(void *, void *)")]
                delegate* unmanaged<void*, void*, void> cleanup,
            void* userdata
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value,
            [NativeTypeName("void (*)(void *, void *)")]
                delegate* unmanaged<void*, void*, void> cleanup,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetPropertyWithCleanup(
                    props,
                    __dsl_name,
                    __dsl_value,
                    cleanup,
                    __dsl_userdata
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRelativeMouseMode([NativeTypeName("SDL_bool")] int enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRelativeMouseMode")]
        public static int SetRelativeMouseMode(
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => (int)SetRelativeMouseMode((int)enabled);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderClipRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderClipRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderClipRect(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderColorScale(SDL_Renderer* renderer, float scale);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderColorScale(Ref<SDL_Renderer> renderer, float scale)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderColorScale(__dsl_renderer, scale);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderDrawBlendMode(
            SDL_Renderer* renderer,
            BlendMode blendMode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, BlendMode blendMode)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderDrawBlendMode(__dsl_renderer, blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderDrawColor(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawColor(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderDrawColor(__dsl_renderer, r, g, b, a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderDrawColorFloat(
            SDL_Renderer* renderer,
            float r,
            float g,
            float b,
            float a
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawColorFloat(
            Ref<SDL_Renderer> renderer,
            float r,
            float g,
            float b,
            float a
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderDrawColorFloat(__dsl_renderer, r, g, b, a);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderLogicalPresentation(
            SDL_Renderer* renderer,
            int w,
            int h,
            RendererLogicalPresentation mode,
            ScaleMode scale_mode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderLogicalPresentation(
            Ref<SDL_Renderer> renderer,
            int w,
            int h,
            RendererLogicalPresentation mode,
            ScaleMode scale_mode
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderLogicalPresentation(__dsl_renderer, w, h, mode, scale_mode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderScale(Ref<SDL_Renderer> renderer, float scaleX, float scaleY)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderScale(__dsl_renderer, scaleX, scaleY);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderTarget(Ref<SDL_Renderer> renderer, Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderTarget(__dsl_renderer, __dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderViewport(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderViewport(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderViewport(__dsl_renderer, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetRenderVSync(SDL_Renderer* renderer, int vsync);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderVSync(Ref<SDL_Renderer> renderer, int vsync)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderVSync(__dsl_renderer, vsync);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetStringProperty(props, __dsl_name, __dsl_value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte alpha
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceAlphaMod(__dsl_surface, alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfaceBlendMode(Surface* surface, BlendMode blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceBlendMode(Ref<Surface> surface, BlendMode blendMode)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceBlendMode(__dsl_surface, blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int SetSurfaceClipRect(
            Surface* surface,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SetSurfaceClipRect(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<int>)(int)SetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfaceColorKey(
            Surface* surface,
            int flag,
            [NativeTypeName("Uint32")] uint key
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorKey(
            Ref<Surface> surface,
            int flag,
            [NativeTypeName("Uint32")] uint key
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceColorKey(__dsl_surface, flag, key);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceColorMod(__dsl_surface, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfaceColorspace(Surface* surface, Colorspace colorspace);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceColorspace(__dsl_surface, colorspace);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfacePalette(Surface* surface, Palette* palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfacePalette(__dsl_surface, __dsl_palette);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetSurfaceRLE(Surface* surface, int flag);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceRLE(Ref<Surface> surface, int flag)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceRLE(__dsl_surface, flag);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Rect* rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (int)SetTextInputRect(__dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextureAlphaMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8")] byte alpha
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureAlphaMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureAlphaMod(__dsl_texture, alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextureAlphaModFloat(SDL_Texture* texture, float alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureAlphaModFloat(Ref<SDL_Texture> texture, float alpha)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureAlphaModFloat(__dsl_texture, alpha);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextureBlendMode(SDL_Texture* texture, BlendMode blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureBlendMode(Ref<SDL_Texture> texture, BlendMode blendMode)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureBlendMode(__dsl_texture, blendMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextureColorMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureColorMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureColorMod(__dsl_texture, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextureColorModFloat(
            SDL_Texture* texture,
            float r,
            float g,
            float b
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureColorModFloat(
            Ref<SDL_Texture> texture,
            float r,
            float g,
            float b
        )
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureColorModFloat(__dsl_texture, r, g, b);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTextureScaleMode(SDL_Texture* texture, ScaleMode scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureScaleMode(Ref<SDL_Texture> texture, ScaleMode scaleMode)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureScaleMode(__dsl_texture, scaleMode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetThreadPriority(ThreadPriority priority);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetTLS(
            [NativeTypeName("SDL_TLSID")] uint id,
            [NativeTypeName("const void *")] void* value,
            [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTLS(
            [NativeTypeName("SDL_TLSID")] uint id,
            [NativeTypeName("const void *")] Ref value,
            [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
        )
        {
            fixed (void* __dsl_value = value)
            {
                return (int)SetTLS(id, __dsl_value, destructor);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowAlwaysOnTop(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int on_top
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowAlwaysOnTop(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> on_top
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowAlwaysOnTop(__dsl_window, (int)on_top);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowBordered(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int bordered
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowBordered(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> bordered
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowBordered(__dsl_window, (int)bordered);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowFocusable(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int focusable
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFocusable(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> focusable
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowFocusable(__dsl_window, (int)focusable);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowFullscreen(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int fullscreen
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFullscreen(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> fullscreen
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowFullscreen(__dsl_window, (int)fullscreen);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowFullscreenMode(
            SDL_Window* window,
            [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFullscreenMode(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
        )
        {
            fixed (DisplayMode* __dsl_mode = mode)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowFullscreenMode(__dsl_window, __dsl_mode);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowHitTest(
            SDL_Window* window,
            [NativeTypeName("SDL_HitTest")]
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
            void* callback_data
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowHitTest(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_HitTest")]
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
            Ref callback_data
        )
        {
            fixed (void* __dsl_callback_data = callback_data)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowHitTest(__dsl_window, callback, __dsl_callback_data);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowIcon(SDL_Window* window, Surface* icon);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowIcon(Ref<SDL_Window> window, Ref<Surface> icon)
        {
            fixed (Surface* __dsl_icon = icon)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowIcon(__dsl_window, __dsl_icon);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowInputFocus(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowInputFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowInputFocus(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowInputFocus(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowKeyboardGrab(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int grabbed
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowKeyboardGrab(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowKeyboardGrab(__dsl_window, (int)grabbed);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMaximumSize(Ref<SDL_Window> window, int max_w, int max_h)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMaximumSize(__dsl_window, max_w, max_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMinimumSize(Ref<SDL_Window> window, int min_w, int min_h)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMinimumSize(__dsl_window, min_w, min_h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowModalFor(
            SDL_Window* modal_window,
            SDL_Window* parent_window
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModalFor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowModalFor(
            Ref<SDL_Window> modal_window,
            Ref<SDL_Window> parent_window
        )
        {
            fixed (SDL_Window* __dsl_parent_window = parent_window)
            fixed (SDL_Window* __dsl_modal_window = modal_window)
            {
                return (int)SetWindowModalFor(__dsl_modal_window, __dsl_parent_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowMouseGrab(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int grabbed
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMouseGrab(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMouseGrab(__dsl_window, (int)grabbed);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowMouseRect(
            SDL_Window* window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMouseRect(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMouseRect(__dsl_window, __dsl_rect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowOpacity(SDL_Window* window, float opacity);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowOpacity(Ref<SDL_Window> window, float opacity)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowOpacity(__dsl_window, opacity);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowPosition(SDL_Window* window, int x, int y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowPosition(Ref<SDL_Window> window, int x, int y)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowPosition(__dsl_window, x, y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowResizable(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int resizable
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowResizable(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> resizable
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowResizable(__dsl_window, (int)resizable);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowShape(SDL_Window* window, Surface* shape);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowShape(Ref<SDL_Window> window, Ref<Surface> shape)
        {
            fixed (Surface* __dsl_shape = shape)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowShape(__dsl_window, __dsl_shape);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowSize(SDL_Window* window, int w, int h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowSize(Ref<SDL_Window> window, int w, int h)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowSize(__dsl_window, w, h);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SetWindowTitle(
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* title
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowTitle(
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> title
        )
        {
            fixed (sbyte* __dsl_title = title)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowTitle(__dsl_window, __dsl_title);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ShowCursor();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
            int* buttonid
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
            Ref<int> buttonid
        )
        {
            fixed (int* __dsl_buttonid = buttonid)
            fixed (MessageBoxData* __dsl_messageboxdata = messageboxdata)
            {
                return (int)ShowMessageBox(__dsl_messageboxdata, __dsl_buttonid);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("SDL_bool")] int allow_many
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (SDL_Window* __dsl_window = window)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFileDialog(
                    callback,
                    __dsl_userdata,
                    __dsl_window,
                    __dsl_filters,
                    __dsl_default_location,
                    (int)allow_many
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("SDL_bool")] int allow_many
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (SDL_Window* __dsl_window = window)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFolderDialog(
                    callback,
                    __dsl_userdata,
                    __dsl_window,
                    __dsl_default_location,
                    (int)allow_many
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            [NativeTypeName("const char *")] sbyte* default_location
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (SDL_Window* __dsl_window = window)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowSaveFileDialog(
                    callback,
                    __dsl_userdata,
                    __dsl_window,
                    __dsl_filters,
                    __dsl_default_location
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ShowSimpleMessageBox(
            [NativeTypeName("Uint32")] uint flags,
            [NativeTypeName("const char *")] sbyte* title,
            [NativeTypeName("const char *")] sbyte* message,
            SDL_Window* window
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowSimpleMessageBox(
            [NativeTypeName("Uint32")] uint flags,
            [NativeTypeName("const char *")] Ref<sbyte> title,
            [NativeTypeName("const char *")] Ref<sbyte> message,
            Ref<SDL_Window> window
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            fixed (sbyte* __dsl_message = message)
            fixed (sbyte* __dsl_title = title)
            {
                return (int)ShowSimpleMessageBox(flags, __dsl_title, __dsl_message, __dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ShowWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)ShowWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int ShowWindowSystemMenu(SDL_Window* window, int x, int y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowWindowSystemMenu(Ref<SDL_Window> window, int x, int y)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)ShowWindowSystemMenu(__dsl_window, x, y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SignalCondition(SDL_Condition* cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SignalCondition(Ref<SDL_Condition> cond)
        {
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)SignalCondition(__dsl_cond);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("size_t")]
        public static extern nuint SimdGetAlignment();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SoftStretch(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SoftStretch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SoftStretch(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)SoftStretch(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void StartTextInput();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int StopHapticEffect(SDL_Haptic* haptic, int effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticEffect(Ref<SDL_Haptic> haptic, int effect)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)StopHapticEffect(__dsl_haptic, effect);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int StopHapticEffects(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticEffects(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)StopHapticEffects(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int StopHapticRumble(SDL_Haptic* haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticRumble(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)StopHapticRumble(__dsl_haptic);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void StopTextInput();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int StorageReady(SDL_Storage* storage);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> StorageReady(Ref<SDL_Storage> storage)
        {
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (MaybeBool<int>)(int)StorageReady(__dsl_storage);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int SurfaceHasColorKey(Surface* surface);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SurfaceHasColorKey(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<int>)(int)SurfaceHasColorKey(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int SurfaceHasRLE(Surface* surface);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SurfaceHasRLE(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<int>)(int)SurfaceHasRLE(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int SyncWindow(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SyncWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SyncWindow(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Sint64")]
        public static extern long TellIO(SDL_IOStream* context);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long TellIO(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (long)TellIO(__dsl_context);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        public static MaybeBool<int> TextInputActive() => (MaybeBool<int>)(int)TextInputActiveRaw();

        [DllImport("SDL3", ExactSpelling = true, EntryPoint = "SDL_TextInputActive")]
        [return: NativeTypeName("SDL_bool")]
        public static extern int TextInputActiveRaw();

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_Time")]
        public static extern long TimeFromWindows(
            [NativeTypeName("Uint32")] uint dwLowDateTime,
            [NativeTypeName("Uint32")] uint dwHighDateTime
        );

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            DateTime* dt,
            [NativeTypeName("SDL_bool")] int localTime
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            Ref<DateTime> dt,
            [NativeTypeName("SDL_bool")] MaybeBool<int> localTime
        )
        {
            fixed (DateTime* __dsl_dt = dt)
            {
                return (int)TimeToDateTime(ticks, __dsl_dt, (int)localTime);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
            [NativeTypeName("Uint32 *")] uint* dwHighDateTime
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
            [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
        )
        {
            fixed (uint* __dsl_dwHighDateTime = dwHighDateTime)
            fixed (uint* __dsl_dwLowDateTime = dwLowDateTime)
            {
                TimeToWindows(ticks, __dsl_dwLowDateTime, __dsl_dwHighDateTime);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int TryLockMutex(SDL_Mutex* mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                return (int)TryLockMutex(__dsl_mutex);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int TryLockRWLockForReading(SDL_RWLock* rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockRWLockForReading(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                return (int)TryLockRWLockForReading(__dsl_rwlock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int TryLockRWLockForWriting(SDL_RWLock* rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockRWLockForWriting(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                return (int)TryLockRWLockForWriting(__dsl_rwlock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> TryLockSpinlock(
            [NativeTypeName("SDL_SpinLock *")] Ref<int> @lock
        )
        {
            fixed (int* __dsl_lock = @lock)
            {
                return (MaybeBool<int>)(int)TryLockSpinlock(__dsl_lock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int TryWaitSemaphore(SDL_Semaphore* sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryWaitSemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)TryWaitSemaphore(__dsl_sem);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnbindAudioStream(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                UnbindAudioStream(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnbindAudioStreams(SDL_AudioStream** streams, int num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStreams(Ref2D<SDL_AudioStream> streams, int num_streams)
        {
            fixed (SDL_AudioStream** __dsl_streams = streams)
            {
                UnbindAudioStreams(__dsl_streams, num_streams);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnloadObject(void* handle);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnloadObject(Ref handle)
        {
            fixed (void* __dsl_handle = handle)
            {
                UnloadObject(__dsl_handle);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UnlockAudioStream(SDL_AudioStream* stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UnlockAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)UnlockAudioStream(__dsl_stream);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockJoysticks();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockMutex(SDL_Mutex* mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                UnlockMutex(__dsl_mutex);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockRWLock(SDL_RWLock* rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockRWLock(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                UnlockRWLock(__dsl_rwlock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                UnlockSpinlock(__dsl_lock);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockSurface(Surface* surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                UnlockSurface(__dsl_surface);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UnlockTexture(SDL_Texture* texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockTexture(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                UnlockTexture(__dsl_texture);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UpdateGamepads();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UpdateHapticEffect(
            SDL_Haptic* haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateHapticEffect(
            Ref<SDL_Haptic> haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
        )
        {
            fixed (HapticEffect* __dsl_data = data)
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)UpdateHapticEffect(__dsl_haptic, effect, __dsl_data);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UpdateJoysticks();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UpdateNVTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* UVplane,
            int UVpitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateNVTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
            int UVpitch
        )
        {
            fixed (byte* __dsl_UVplane = UVplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)UpdateNVTexture(
                    __dsl_texture,
                    __dsl_rect,
                    __dsl_Yplane,
                    Ypitch,
                    __dsl_UVplane,
                    UVpitch
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void UpdateSensors();

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UpdateTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const void *")] void* pixels,
            int pitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const void *")] Ref pixels,
            int pitch
        )
        {
            fixed (void* __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)UpdateTexture(__dsl_texture, __dsl_rect, __dsl_pixels, pitch);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UpdateWindowSurface(SDL_Window* window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateWindowSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)UpdateWindowSurface(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UpdateWindowSurfaceRects(
            SDL_Window* window,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int numrects
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateWindowSurfaceRects(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int numrects
        )
        {
            fixed (Rect* __dsl_rects = rects)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)UpdateWindowSurfaceRects(__dsl_window, __dsl_rects, numrects);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int UpdateYUVTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] byte* Vplane,
            int Vpitch
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateYUVTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
            int Vpitch
        )
        {
            fixed (byte* __dsl_Vplane = Vplane)
            fixed (byte* __dsl_Uplane = Uplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)UpdateYUVTexture(
                    __dsl_texture,
                    __dsl_rect,
                    __dsl_Yplane,
                    Ypitch,
                    __dsl_Uplane,
                    Upitch,
                    __dsl_Vplane,
                    Vpitch
                );
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitCondition(Ref<SDL_Condition> cond, Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)WaitCondition(__dsl_cond, __dsl_mutex);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int WaitConditionTimeout(
            SDL_Condition* cond,
            SDL_Mutex* mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitConditionTimeout(
            Ref<SDL_Condition> cond,
            Ref<SDL_Mutex> mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)WaitConditionTimeout(__dsl_cond, __dsl_mutex, timeoutMS);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WaitEvent(Event* @event);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WaitEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<int>)(int)WaitEvent(__dsl_event);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WaitEventTimeout(
            Event* @event,
            [NativeTypeName("Sint32")] int timeoutMS
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WaitEventTimeout(
            Ref<Event> @event,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<int>)(int)WaitEventTimeout(__dsl_event, timeoutMS);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int WaitSemaphore(SDL_Semaphore* sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitSemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)WaitSemaphore(__dsl_sem);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int WaitSemaphoreTimeout(
            SDL_Semaphore* sem,
            [NativeTypeName("Sint32")] int timeoutMS
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitSemaphoreTimeout(
            Ref<SDL_Semaphore> sem,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)WaitSemaphoreTimeout(__dsl_sem, timeoutMS);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void WaitThread(SDL_Thread* thread, int* status);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitThread(Ref<SDL_Thread> thread, Ref<int> status)
        {
            fixed (int* __dsl_status = status)
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                WaitThread(__dsl_thread, __dsl_status);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int WarpMouseGlobal(float x, float y);

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern void WarpMouseInWindow(SDL_Window* window, float x, float y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WarpMouseInWindow(Ref<SDL_Window> window, float x, float y)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                WarpMouseInWindow(__dsl_window, x, y);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("Uint32")]
        public static extern uint WasInit([NativeTypeName("Uint32")] uint flags);

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WindowHasSurface(SDL_Window* window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WindowHasSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)WindowHasSurface(__dsl_window);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("size_t")]
        public static extern nuint WriteIO(
            SDL_IOStream* context,
            [NativeTypeName("const void *")] void* ptr,
            [NativeTypeName("size_t")] nuint size
        );

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint WriteIO(
            Ref<SDL_IOStream> context,
            [NativeTypeName("const void *")] Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (nuint)WriteIO(__dsl_context, __dsl_ptr, size);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteS16BE(
            SDL_IOStream* dst,
            [NativeTypeName("Sint16")] short value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS16BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint16")] short value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS16BE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteS16LE(
            SDL_IOStream* dst,
            [NativeTypeName("Sint16")] short value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS16LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint16")] short value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS16LE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteS32BE(
            SDL_IOStream* dst,
            [NativeTypeName("Sint32")] int value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS32BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint32")] int value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS32BE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteS32LE(
            SDL_IOStream* dst,
            [NativeTypeName("Sint32")] int value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS32LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint32")] int value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS32LE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteS64BE(
            SDL_IOStream* dst,
            [NativeTypeName("Sint64")] long value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS64BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS64BE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteS64LE(
            SDL_IOStream* dst,
            [NativeTypeName("Sint64")] long value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS64LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS64LE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        public static extern int WriteStorageFile(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const void *")] void* source,
            [NativeTypeName("Uint64")] ulong length
        );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteStorageFile(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const void *")] Ref source,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_source = source)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)WriteStorageFile(__dsl_storage, __dsl_path, __dsl_source, length);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU16BE(
            SDL_IOStream* dst,
            [NativeTypeName("Uint16")] ushort value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU16BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint16")] ushort value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU16BE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU16LE(
            SDL_IOStream* dst,
            [NativeTypeName("Uint16")] ushort value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU16LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint16")] ushort value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU16LE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU32BE(
            SDL_IOStream* dst,
            [NativeTypeName("Uint32")] uint value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU32BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint32")] uint value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU32BE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU32LE(
            SDL_IOStream* dst,
            [NativeTypeName("Uint32")] uint value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU32LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint32")] uint value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU32LE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU64BE(
            SDL_IOStream* dst,
            [NativeTypeName("Uint64")] ulong value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU64BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint64")] ulong value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU64BE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU64LE(
            SDL_IOStream* dst,
            [NativeTypeName("Uint64")] ulong value
        );

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU64LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint64")] ulong value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU64LE(__dsl_dst, value);
            }
        }

        [DllImport("SDL3", ExactSpelling = true)]
        [return: NativeTypeName("SDL_bool")]
        public static extern int WriteU8(SDL_IOStream* dst, [NativeTypeName("Uint8")] byte value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU8(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint8")] byte value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU8(__dsl_dst, value);
            }
        }
    }

    public partial class StaticWrapper<T> : ISdl
        where T : ISdl.Static
    {
        [NativeFunction("SDL3", EntryPoint = "AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* AcquireCameraFrame(
            SDL_Camera* camera,
            [NativeTypeName("Uint64 *")] ulong* timestampNS
        ) => T.AcquireCameraFrame(camera, timestampNS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> AcquireCameraFrame(
            Ref<SDL_Camera> camera,
            [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
        ) => T.AcquireCameraFrame(camera, timestampNS);

        [NativeFunction("SDL3", EntryPoint = "AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => T.AddEventWatch(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        ) => T.AddEventWatch(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
            T.AddGamepadMapping(mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping) =>
            T.AddGamepadMapping(mapping);

        [NativeFunction("SDL3", EntryPoint = "AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromFile([NativeTypeName("const char *")] sbyte* file) =>
            T.AddGamepadMappingsFromFile(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromFile([NativeTypeName("const char *")] Ref<sbyte> file) =>
            T.AddGamepadMappingsFromFile(file);

        [NativeFunction("SDL3", EntryPoint = "AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio
        ) => T.AddGamepadMappingsFromIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddGamepadMappingsFromIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        ) => T.AddGamepadMappingsFromIO(src, closeio);

        [NativeFunction("SDL3", EntryPoint = "AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            void* userdata
        ) => T.AddHintCallback(name, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            Ref userdata
        ) => T.AddHintCallback(name, callback, userdata);

        [return: NativeTypeName("SDL_TimerID")]
        [NativeFunction("SDL3", EntryPoint = "AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
            void* param2
        ) => T.AddTimer(interval, callback, param2);

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
            Ref param2
        ) => T.AddTimer(interval, callback, param2);

        [NativeFunction("SDL3", EntryPoint = "AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddVulkanRenderSemaphores(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            T.AddVulkanRenderSemaphores(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AddVulkanRenderSemaphores(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            T.AddVulkanRenderSemaphores(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr AllocateEventMemory([NativeTypeName("size_t")] nuint size) =>
            T.AllocateEventMemory(size);

        [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* AllocateEventMemoryRaw([NativeTypeName("size_t")] nuint size) =>
            T.AllocateEventMemoryRaw(size);

        [NativeFunction("SDL3", EntryPoint = "AtomicAdd")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicAdd(AtomicInt* a, int v) => T.AtomicAdd(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicAdd")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicAdd(Ref<AtomicInt> a, int v) => T.AtomicAdd(a, v);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "AtomicCompareAndSwap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicCompareAndSwap(AtomicInt* a, int oldval, int newval) =>
            T.AtomicCompareAndSwap(a, oldval, newval);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> AtomicCompareAndSwap(Ref<AtomicInt> a, int oldval, int newval) =>
            T.AtomicCompareAndSwap(a, oldval, newval);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "AtomicCompareAndSwapPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicCompareAndSwapPointer(void** a, void* oldval, void* newval) =>
            T.AtomicCompareAndSwapPointer(a, oldval, newval);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwapPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> AtomicCompareAndSwapPointer(Ref2D a, Ref oldval, Ref newval) =>
            T.AtomicCompareAndSwapPointer(a, oldval, newval);

        [NativeFunction("SDL3", EntryPoint = "AtomicGet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicGet(AtomicInt* a) => T.AtomicGet(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicGet(Ref<AtomicInt> a) => T.AtomicGet(a);

        [NativeFunction("SDL3", EntryPoint = "AtomicGetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* AtomicGetPtr(void** a) => T.AtomicGetPtr(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr AtomicGetPtr(Ref2D a) => T.AtomicGetPtr(a);

        [NativeFunction("SDL3", EntryPoint = "AtomicSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicSet(AtomicInt* a, int v) => T.AtomicSet(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AtomicSet(Ref<AtomicInt> a, int v) => T.AtomicSet(a, v);

        [NativeFunction("SDL3", EntryPoint = "AtomicSetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* AtomicSetPtr(void** a, void* v) => T.AtomicSetPtr(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr AtomicSetPtr(Ref2D a, Ref v) => T.AtomicSetPtr(a, v);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AttachVirtualJoystick(JoystickType type, int naxes, int nbuttons, int nhats) =>
            T.AttachVirtualJoystick(type, naxes, nbuttons, nhats);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "AttachVirtualJoystickEx")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AttachVirtualJoystickEx(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
        ) => T.AttachVirtualJoystickEx(desc);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystickEx")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint AttachVirtualJoystickEx(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
        ) => T.AttachVirtualJoystickEx(desc);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> AudioDevicePaused([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.AudioDevicePaused(dev);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.AudioDevicePausedRaw(dev);

        [NativeFunction("SDL3", EntryPoint = "BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            SDL_AudioStream* stream
        ) => T.BindAudioStream(devid, stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<SDL_AudioStream> stream
        ) => T.BindAudioStream(devid, stream);

        [NativeFunction("SDL3", EntryPoint = "BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            SDL_AudioStream** streams,
            int num_streams
        ) => T.BindAudioStreams(devid, streams, num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref2D<SDL_AudioStream> streams,
            int num_streams
        ) => T.BindAudioStreams(devid, streams, num_streams);

        [NativeFunction("SDL3", EntryPoint = "BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurface(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            Rect* dstrect
        ) => T.BlitSurface(src, srcrect, dst, dstrect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurface(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            Ref<Rect> dstrect
        ) => T.BlitSurface(src, srcrect, dst, dstrect);

        [NativeFunction("SDL3", EntryPoint = "BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurfaceScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            Rect* dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurfaceScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            Ref<Rect> dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

        [NativeFunction("SDL3", EntryPoint = "BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurfaceUnchecked(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => T.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurfaceUnchecked(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        ) => T.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

        [NativeFunction("SDL3", EntryPoint = "BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurfaceUncheckedScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BlitSurfaceUncheckedScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        ) => T.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

        [NativeFunction("SDL3", EntryPoint = "BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BroadcastCondition(SDL_Condition* cond) => T.BroadcastCondition(cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int BroadcastCondition(Ref<SDL_Condition> cond) => T.BroadcastCondition(cond);

        [NativeFunction("SDL3", EntryPoint = "CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CaptureMouse([NativeTypeName("SDL_bool")] int enabled) =>
            T.CaptureMouse(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CaptureMouse([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
            T.CaptureMouse(enabled);

        [NativeFunction("SDL3", EntryPoint = "CleanupTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CleanupTLS() => T.CleanupTLS();

        [NativeFunction("SDL3", EntryPoint = "ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ClearAudioStream(SDL_AudioStream* stream) => T.ClearAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ClearAudioStream(Ref<SDL_AudioStream> stream) => T.ClearAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "ClearClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ClearClipboardData() => T.ClearClipboardData();

        [NativeFunction("SDL3", EntryPoint = "ClearComposition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ClearComposition() => T.ClearComposition();

        [NativeFunction("SDL3", EntryPoint = "ClearError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ClearError() => T.ClearError();

        [NativeFunction("SDL3", EntryPoint = "ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.ClearProperty(props, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.ClearProperty(props, name);

        [NativeFunction("SDL3", EntryPoint = "CloseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.CloseAudioDevice(devid);

        [NativeFunction("SDL3", EntryPoint = "CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseCamera(SDL_Camera* camera) => T.CloseCamera(camera);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseCamera(Ref<SDL_Camera> camera) => T.CloseCamera(camera);

        [NativeFunction("SDL3", EntryPoint = "CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseGamepad(SDL_Gamepad* gamepad) => T.CloseGamepad(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseGamepad(Ref<SDL_Gamepad> gamepad) => T.CloseGamepad(gamepad);

        [NativeFunction("SDL3", EntryPoint = "CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseHaptic(SDL_Haptic* haptic) => T.CloseHaptic(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseHaptic(Ref<SDL_Haptic> haptic) => T.CloseHaptic(haptic);

        [NativeFunction("SDL3", EntryPoint = "CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CloseIO(SDL_IOStream* context) => T.CloseIO(context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CloseIO(Ref<SDL_IOStream> context) => T.CloseIO(context);

        [NativeFunction("SDL3", EntryPoint = "CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseJoystick(SDL_Joystick* joystick) => T.CloseJoystick(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseJoystick(Ref<SDL_Joystick> joystick) => T.CloseJoystick(joystick);

        [NativeFunction("SDL3", EntryPoint = "CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseSensor(SDL_Sensor* sensor) => T.CloseSensor(sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void CloseSensor(Ref<SDL_Sensor> sensor) => T.CloseSensor(sensor);

        [NativeFunction("SDL3", EntryPoint = "CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CloseStorage(SDL_Storage* storage) => T.CloseStorage(storage);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CloseStorage(Ref<SDL_Storage> storage) => T.CloseStorage(storage);

        [NativeFunction("SDL3", EntryPoint = "ComposeCustomBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public BlendMode ComposeCustomBlendMode(
            BlendFactor srcColorFactor,
            BlendFactor dstColorFactor,
            BlendOperation colorOperation,
            BlendFactor srcAlphaFactor,
            BlendFactor dstAlphaFactor,
            BlendOperation alphaOperation
        ) =>
            T.ComposeCustomBlendMode(
                srcColorFactor,
                dstColorFactor,
                colorOperation,
                srcAlphaFactor,
                dstAlphaFactor,
                alphaOperation
            );

        [NativeFunction("SDL3", EntryPoint = "ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const Uint8 *")] byte* src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
            [NativeTypeName("Uint8 **")] byte** dst_data,
            int* dst_len
        ) => T.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
            Ref<int> dst_len
        ) => T.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

        [NativeFunction("SDL3", EntryPoint = "ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertEventToRenderCoordinates(SDL_Renderer* renderer, Event* @event) =>
            T.ConvertEventToRenderCoordinates(renderer, @event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertEventToRenderCoordinates(Ref<SDL_Renderer> renderer, Ref<Event> @event) =>
            T.ConvertEventToRenderCoordinates(renderer, @event);

        [NativeFunction("SDL3", EntryPoint = "ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertPixels(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            void* dst,
            int dst_pitch
        ) => T.ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertPixels(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Ref dst,
            int dst_pitch
        ) => T.ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

        [NativeFunction("SDL3", EntryPoint = "ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormatEnum src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            void* dst,
            int dst_pitch
        ) =>
            T.ConvertPixelsAndColorspace(
                width,
                height,
                src_format,
                src_colorspace,
                src_properties,
                src,
                src_pitch,
                dst_format,
                dst_colorspace,
                dst_properties,
                dst,
                dst_pitch
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormatEnum src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            Ref dst,
            int dst_pitch
        ) =>
            T.ConvertPixelsAndColorspace(
                width,
                height,
                src_format,
                src_colorspace,
                src_properties,
                src,
                src_pitch,
                dst_format,
                dst_colorspace,
                dst_properties,
                dst,
                dst_pitch
            );

        [NativeFunction("SDL3", EntryPoint = "ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* ConvertSurface(
            Surface* surface,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format
        ) => T.ConvertSurface(surface, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> ConvertSurface(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format
        ) => T.ConvertSurface(surface, format);

        [NativeFunction("SDL3", EntryPoint = "ConvertSurfaceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* ConvertSurfaceFormat(Surface* surface, PixelFormatEnum pixel_format) =>
            T.ConvertSurfaceFormat(surface, pixel_format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> ConvertSurfaceFormat(
            Ref<Surface> surface,
            PixelFormatEnum pixel_format
        ) => T.ConvertSurfaceFormat(surface, pixel_format);

        [NativeFunction("SDL3", EntryPoint = "ConvertSurfaceFormatAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* ConvertSurfaceFormatAndColorspace(
            Surface* surface,
            PixelFormatEnum pixel_format,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.ConvertSurfaceFormatAndColorspace(surface, pixel_format, colorspace, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormatAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> ConvertSurfaceFormatAndColorspace(
            Ref<Surface> surface,
            PixelFormatEnum pixel_format,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.ConvertSurfaceFormatAndColorspace(surface, pixel_format, colorspace, props);

        [NativeFunction("SDL3", EntryPoint = "CopyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CopyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => T.CopyProperties(src, dst);

        [NativeFunction("SDL3", EntryPoint = "CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_AudioStream* CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => T.CreateAudioStream(src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_AudioStream> CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        ) => T.CreateAudioStream(src_spec, dst_spec);

        [NativeFunction("SDL3", EntryPoint = "CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Cursor* CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
            T.CreateColorCursor(surface, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Cursor> CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y) =>
            T.CreateColorCursor(surface, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Condition> CreateCondition() => T.CreateCondition();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Condition* CreateConditionRaw() => T.CreateConditionRaw();

        [NativeFunction("SDL3", EntryPoint = "CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Cursor* CreateCursor(
            [NativeTypeName("const Uint8 *")] byte* data,
            [NativeTypeName("const Uint8 *")] byte* mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        ) => T.CreateCursor(data, mask, w, h, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Cursor> CreateCursor(
            [NativeTypeName("const Uint8 *")] Ref<byte> data,
            [NativeTypeName("const Uint8 *")] Ref<byte> mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        ) => T.CreateCursor(data, mask, w, h, hot_x, hot_y);

        [NativeFunction("SDL3", EntryPoint = "CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
            T.CreateDirectory(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.CreateDirectory(path);

        [NativeFunction("SDL3", EntryPoint = "CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateHapticEffect(
            SDL_Haptic* haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => T.CreateHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateHapticEffect(
            Ref<SDL_Haptic> haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        ) => T.CreateHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Mutex> CreateMutex() => T.CreateMutex();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Mutex* CreateMutexRaw() => T.CreateMutexRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Palette> CreatePalette(int ncolors) => T.CreatePalette(ncolors);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Palette* CreatePaletteRaw(int ncolors) => T.CreatePaletteRaw(ncolors);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<PixelFormat> CreatePixelFormat(PixelFormatEnum pixel_format) =>
            T.CreatePixelFormat(pixel_format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PixelFormat* CreatePixelFormatRaw(PixelFormatEnum pixel_format) =>
            T.CreatePixelFormatRaw(pixel_format);

        [NativeFunction("SDL3", EntryPoint = "CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* CreatePopupWindow(
            SDL_Window* parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        ) => T.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> CreatePopupWindow(
            Ref<SDL_Window> parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        ) => T.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "CreateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint CreateProperties() => T.CreateProperties();

        [NativeFunction("SDL3", EntryPoint = "CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Renderer* CreateRenderer(
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Uint32")] uint flags
        ) => T.CreateRenderer(window, name, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Renderer> CreateRenderer(
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Uint32")] uint flags
        ) => T.CreateRenderer(window, name, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Renderer> CreateRendererWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateRendererWithProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Renderer* CreateRendererWithPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateRendererWithPropertiesRaw(props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_RWLock> CreateRWLock() => T.CreateRWLock();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_RWLock* CreateRWLockRaw() => T.CreateRWLockRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Semaphore> CreateSemaphore([NativeTypeName("Uint32")] uint initial_value) =>
            T.CreateSemaphore(initial_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Semaphore* CreateSemaphoreRaw([NativeTypeName("Uint32")] uint initial_value) =>
            T.CreateSemaphoreRaw(initial_value);

        [NativeFunction("SDL3", EntryPoint = "CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Renderer* CreateSoftwareRenderer(Surface* surface) =>
            T.CreateSoftwareRenderer(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Renderer> CreateSoftwareRenderer(Ref<Surface> surface) =>
            T.CreateSoftwareRenderer(surface);

        [NativeFunction("SDL3", EntryPoint = "CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => T.CreateStorageDirectory(storage, path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        ) => T.CreateStorageDirectory(storage, path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> CreateSurface(int width, int height, PixelFormatEnum format) =>
            T.CreateSurface(width, height, format);

        [NativeFunction("SDL3", EntryPoint = "CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* CreateSurfaceFrom(
            void* pixels,
            int width,
            int height,
            int pitch,
            PixelFormatEnum format
        ) => T.CreateSurfaceFrom(pixels, width, height, pitch, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> CreateSurfaceFrom(
            Ref pixels,
            int width,
            int height,
            int pitch,
            PixelFormatEnum format
        ) => T.CreateSurfaceFrom(pixels, width, height, pitch, format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* CreateSurfaceRaw(int width, int height, PixelFormatEnum format) =>
            T.CreateSurfaceRaw(width, height, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Cursor> CreateSystemCursor(SystemCursor id) => T.CreateSystemCursor(id);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Cursor* CreateSystemCursorRaw(SystemCursor id) => T.CreateSystemCursorRaw(id);

        [NativeFunction("SDL3", EntryPoint = "CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Texture* CreateTexture(
            SDL_Renderer* renderer,
            PixelFormatEnum format,
            int access,
            int w,
            int h
        ) => T.CreateTexture(renderer, format, access, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Texture> CreateTexture(
            Ref<SDL_Renderer> renderer,
            PixelFormatEnum format,
            int access,
            int w,
            int h
        ) => T.CreateTexture(renderer, format, access, w, h);

        [NativeFunction("SDL3", EntryPoint = "CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Texture* CreateTextureFromSurface(SDL_Renderer* renderer, Surface* surface) =>
            T.CreateTextureFromSurface(renderer, surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Texture> CreateTextureFromSurface(
            Ref<SDL_Renderer> renderer,
            Ref<Surface> surface
        ) => T.CreateTextureFromSurface(renderer, surface);

        [NativeFunction("SDL3", EntryPoint = "CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Texture* CreateTextureWithProperties(
            SDL_Renderer* renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateTextureWithProperties(renderer, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Texture> CreateTextureWithProperties(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateTextureWithProperties(renderer, props);

        [NativeFunction("SDL3", EntryPoint = "CreateThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Thread* CreateThread(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] sbyte* name,
            void* data
        ) => T.CreateThread(fn, name, data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Thread> CreateThread(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref data
        ) => T.CreateThread(fn, name, data);

        [NativeFunction("SDL3", EntryPoint = "CreateThreadWithStackSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Thread* CreateThreadWithStackSize(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const size_t")] nuint stacksize,
            void* data
        ) => T.CreateThreadWithStackSize(fn, name, stacksize, data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithStackSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Thread> CreateThreadWithStackSize(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const size_t")] nuint stacksize,
            Ref data
        ) => T.CreateThreadWithStackSize(fn, name, stacksize, data);

        [return: NativeTypeName("SDL_TLSID")]
        [NativeFunction("SDL3", EntryPoint = "CreateTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint CreateTLS() => T.CreateTLS();

        [NativeFunction("SDL3", EntryPoint = "CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* CreateWindow(
            [NativeTypeName("const char *")] sbyte* title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        ) => T.CreateWindow(title, w, h, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> CreateWindow(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        ) => T.CreateWindow(title, w, h, flags);

        [NativeFunction("SDL3", EntryPoint = "CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateWindowAndRenderer(
            [NativeTypeName("const char *")] sbyte* title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] uint window_flags,
            SDL_Window** window,
            SDL_Renderer** renderer
        ) => T.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CreateWindowAndRenderer(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] uint window_flags,
            Ref2D<SDL_Window> window,
            Ref2D<SDL_Renderer> renderer
        ) => T.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> CreateWindowWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateWindowWithProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* CreateWindowWithPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.CreateWindowWithPropertiesRaw(props);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> CursorVisible() => T.CursorVisible();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int CursorVisibleRaw() => T.CursorVisibleRaw();

        [NativeFunction("SDL3", EntryPoint = "DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
            [NativeTypeName("SDL_Time *")] long* ticks
        ) => T.DateTimeToTime(dt, ticks);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
            [NativeTypeName("SDL_Time *")] Ref<long> ticks
        ) => T.DateTimeToTime(dt, ticks);

        [NativeFunction("SDL3", EntryPoint = "Delay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void Delay([NativeTypeName("Uint32")] uint ms) => T.Delay(ms);

        [NativeFunction("SDL3", EntryPoint = "DelayNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelayNS([NativeTypeName("Uint64")] ulong ns) => T.DelayNS(ns);

        [NativeFunction("SDL3", EntryPoint = "DelEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => T.DelEventWatch(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DelEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        ) => T.DelEventWatch(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "DelHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            void* userdata
        ) => T.DelHintCallback(name, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DelHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DelHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            Ref userdata
        ) => T.DelHintCallback(name, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyAudioStream(SDL_AudioStream* stream) => T.DestroyAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyAudioStream(Ref<SDL_AudioStream> stream) => T.DestroyAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyCondition(SDL_Condition* cond) => T.DestroyCondition(cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyCondition(Ref<SDL_Condition> cond) => T.DestroyCondition(cond);

        [NativeFunction("SDL3", EntryPoint = "DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyCursor(SDL_Cursor* cursor) => T.DestroyCursor(cursor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyCursor(Ref<SDL_Cursor> cursor) => T.DestroyCursor(cursor);

        [NativeFunction("SDL3", EntryPoint = "DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyHapticEffect(SDL_Haptic* haptic, int effect) =>
            T.DestroyHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyHapticEffect(Ref<SDL_Haptic> haptic, int effect) =>
            T.DestroyHapticEffect(haptic, effect);

        [NativeFunction("SDL3", EntryPoint = "DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyMutex(SDL_Mutex* mutex) => T.DestroyMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyMutex(Ref<SDL_Mutex> mutex) => T.DestroyMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyPalette(Palette* palette) => T.DestroyPalette(palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyPalette(Ref<Palette> palette) => T.DestroyPalette(palette);

        [NativeFunction("SDL3", EntryPoint = "DestroyPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyPixelFormat(PixelFormat* format) => T.DestroyPixelFormat(format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyPixelFormat(Ref<PixelFormat> format) => T.DestroyPixelFormat(format);

        [NativeFunction("SDL3", EntryPoint = "DestroyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.DestroyProperties(props);

        [NativeFunction("SDL3", EntryPoint = "DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyRenderer(SDL_Renderer* renderer) => T.DestroyRenderer(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyRenderer(Ref<SDL_Renderer> renderer) => T.DestroyRenderer(renderer);

        [NativeFunction("SDL3", EntryPoint = "DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyRWLock(SDL_RWLock* rwlock) => T.DestroyRWLock(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyRWLock(Ref<SDL_RWLock> rwlock) => T.DestroyRWLock(rwlock);

        [NativeFunction("SDL3", EntryPoint = "DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySemaphore(SDL_Semaphore* sem) => T.DestroySemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySemaphore(Ref<SDL_Semaphore> sem) => T.DestroySemaphore(sem);

        [NativeFunction("SDL3", EntryPoint = "DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySurface(Surface* surface) => T.DestroySurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroySurface(Ref<Surface> surface) => T.DestroySurface(surface);

        [NativeFunction("SDL3", EntryPoint = "DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyTexture(SDL_Texture* texture) => T.DestroyTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyTexture(Ref<SDL_Texture> texture) => T.DestroyTexture(texture);

        [NativeFunction("SDL3", EntryPoint = "DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyWindow(SDL_Window* window) => T.DestroyWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DestroyWindow(Ref<SDL_Window> window) => T.DestroyWindow(window);

        [NativeFunction("SDL3", EntryPoint = "DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int DestroyWindowSurface(SDL_Window* window) => T.DestroyWindowSurface(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int DestroyWindowSurface(Ref<SDL_Window> window) => T.DestroyWindowSurface(window);

        [NativeFunction("SDL3", EntryPoint = "DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DetachThread(SDL_Thread* thread) => T.DetachThread(thread);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void DetachThread(Ref<SDL_Thread> thread) => T.DetachThread(thread);

        [NativeFunction("SDL3", EntryPoint = "DetachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int DetachVirtualJoystick([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.DetachVirtualJoystick(instance_id);

        [NativeFunction("SDL3", EntryPoint = "DisableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int DisableScreenSaver() => T.DisableScreenSaver();

        [NativeFunction("SDL3", EntryPoint = "DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* DuplicateSurface(Surface* surface) => T.DuplicateSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> DuplicateSurface(Ref<Surface> surface) => T.DuplicateSurface(surface);

        [return: NativeTypeName("SDL_EGLConfig")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr EGLGetCurrentEGLConfig() => T.EGLGetCurrentEGLConfig();

        [return: NativeTypeName("SDL_EGLConfig")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* EGLGetCurrentEGLConfigRaw() => T.EGLGetCurrentEGLConfigRaw();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr EGLGetCurrentEGLDisplay() => T.EGLGetCurrentEGLDisplay();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* EGLGetCurrentEGLDisplayRaw() => T.EGLGetCurrentEGLDisplayRaw();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "EGLGetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<void> EGLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        ) => T.EGLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<void> EGLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        ) => T.EGLGetProcAddress(proc);

        [return: NativeTypeName("SDL_EGLSurface")]
        [NativeFunction("SDL3", EntryPoint = "EGLGetWindowEGLSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* EGLGetWindowEGLSurface(SDL_Window* window) => T.EGLGetWindowEGLSurface(window);

        [return: NativeTypeName("SDL_EGLSurface")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowEGLSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr EGLGetWindowEGLSurface(Ref<SDL_Window> window) =>
            T.EGLGetWindowEGLSurface(window);

        [NativeFunction("SDL3", EntryPoint = "EGLSetEGLAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void EGLSetEGLAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                delegate* unmanaged<nint*> platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")]
                delegate* unmanaged<int*> surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")]
                delegate* unmanaged<int*> contextAttribCallback
        ) =>
            T.EGLSetEGLAttributeCallbacks(
                platformAttribCallback,
                surfaceAttribCallback,
                contextAttribCallback
            );

        [NativeFunction("SDL3", EntryPoint = "EnableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnableScreenSaver() => T.EnableScreenSaver();

        [NativeFunction("SDL3", EntryPoint = "EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnumerateDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            void* userdata
        ) => T.EnumerateDirectory(path, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnumerateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            Ref userdata
        ) => T.EnumerateDirectory(path, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                delegate* unmanaged<void*, uint, sbyte*, void> callback,
            void* userdata
        ) => T.EnumerateProperties(props, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                delegate* unmanaged<void*, uint, sbyte*, void> callback,
            Ref userdata
        ) => T.EnumerateProperties(props, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnumerateStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            void* userdata
        ) => T.EnumerateStorageDirectory(storage, path, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EnumerateStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            Ref userdata
        ) => T.EnumerateStorageDirectory(storage, path, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "Error")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int Error(Errorcode code) => T.Error(code);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> EventEnabled([NativeTypeName("Uint32")] uint type) =>
            T.EventEnabled(type);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int EventEnabledRaw([NativeTypeName("Uint32")] uint type) => T.EventEnabledRaw(type);

        [NativeFunction("SDL3", EntryPoint = "FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FillSurfaceRect(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRect(dst, rect, color);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FillSurfaceRect(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRect(dst, rect, color);

        [NativeFunction("SDL3", EntryPoint = "FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FillSurfaceRects(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRects(dst, rects, count, color);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FillSurfaceRects(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        ) => T.FillSurfaceRects(dst, rects, count, color);

        [NativeFunction("SDL3", EntryPoint = "FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => T.FilterEvents(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        ) => T.FilterEvents(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlashWindow(SDL_Window* window, FlashOperation operation) =>
            T.FlashWindow(window, operation);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlashWindow(Ref<SDL_Window> window, FlashOperation operation) =>
            T.FlashWindow(window, operation);

        [NativeFunction("SDL3", EntryPoint = "FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlipSurface(Surface* surface, FlipMode flip) => T.FlipSurface(surface, flip);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlipSurface(Ref<Surface> surface, FlipMode flip) => T.FlipSurface(surface, flip);

        [NativeFunction("SDL3", EntryPoint = "FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlushAudioStream(SDL_AudioStream* stream) => T.FlushAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlushAudioStream(Ref<SDL_AudioStream> stream) => T.FlushAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "FlushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FlushEvent([NativeTypeName("Uint32")] uint type) => T.FlushEvent(type);

        [NativeFunction("SDL3", EntryPoint = "FlushEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void FlushEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.FlushEvents(minType, maxType);

        [NativeFunction("SDL3", EntryPoint = "FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlushRenderer(SDL_Renderer* renderer) => T.FlushRenderer(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int FlushRenderer(Ref<SDL_Renderer> renderer) => T.FlushRenderer(renderer);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GamepadConnected(SDL_Gamepad* gamepad) => T.GamepadConnected(gamepad);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GamepadConnected(Ref<SDL_Gamepad> gamepad) =>
            T.GamepadConnected(gamepad);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GamepadEventsEnabled() => T.GamepadEventsEnabled();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GamepadEventsEnabledRaw() => T.GamepadEventsEnabledRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GamepadHasAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
            T.GamepadHasAxis(gamepad, axis);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GamepadHasAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis) =>
            T.GamepadHasAxis(gamepad, axis);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GamepadHasButton(SDL_Gamepad* gamepad, GamepadButton button) =>
            T.GamepadHasButton(gamepad, button);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GamepadHasButton(Ref<SDL_Gamepad> gamepad, GamepadButton button) =>
            T.GamepadHasButton(gamepad, button);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GamepadHasSensor(SDL_Gamepad* gamepad, SensorType type) =>
            T.GamepadHasSensor(gamepad, type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GamepadHasSensor(Ref<SDL_Gamepad> gamepad, SensorType type) =>
            T.GamepadHasSensor(gamepad, type);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GamepadSensorEnabled(SDL_Gamepad* gamepad, SensorType type) =>
            T.GamepadSensorEnabled(gamepad, type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GamepadSensorEnabled(Ref<SDL_Gamepad> gamepad, SensorType type) =>
            T.GamepadSensorEnabled(gamepad, type);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
            void** puserdata
        ) => T.GetAssertionHandler(puserdata);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
            Ref2D puserdata
        ) => T.GetAssertionHandler(puserdata);

        [return: NativeTypeName("const SDL_AssertData *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<AssertData> GetAssertionReport() => T.GetAssertionReport();

        [return: NativeTypeName("const SDL_AssertData *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertData* GetAssertionReportRaw() => T.GetAssertionReportRaw();

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioCaptureDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetAudioCaptureDevices(int* count) => T.GetAudioCaptureDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioCaptureDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetAudioCaptureDevices(Ref<int> count) => T.GetAudioCaptureDevices(count);

        [NativeFunction("SDL3", EntryPoint = "GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioSpec* spec,
            int* sample_frames
        ) => T.GetAudioDeviceFormat(devid, spec, sample_frames);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioSpec> spec,
            Ref<int> sample_frames
        ) => T.GetAudioDeviceFormat(devid, spec, sample_frames);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetAudioDeviceName([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.GetAudioDeviceName(devid);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetAudioDeviceNameRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            T.GetAudioDeviceNameRaw(devid);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetAudioDriver(int index) => T.GetAudioDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetAudioDriverRaw(int index) => T.GetAudioDriverRaw(index);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioOutputDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetAudioOutputDevices(int* count) => T.GetAudioOutputDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioOutputDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetAudioOutputDevices(Ref<int> count) => T.GetAudioOutputDevices(count);

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamAvailable(SDL_AudioStream* stream) =>
            T.GetAudioStreamAvailable(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamAvailable(Ref<SDL_AudioStream> stream) =>
            T.GetAudioStreamAvailable(stream);

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len) =>
            T.GetAudioStreamData(stream, buf, len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamData(Ref<SDL_AudioStream> stream, Ref buf, int len) =>
            T.GetAudioStreamData(stream, buf, len);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAudioStreamDevice(SDL_AudioStream* stream) => T.GetAudioStreamDevice(stream);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAudioStreamDevice(Ref<SDL_AudioStream> stream) =>
            T.GetAudioStreamDevice(stream);

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamFormat(
            SDL_AudioStream* stream,
            AudioSpec* src_spec,
            AudioSpec* dst_spec
        ) => T.GetAudioStreamFormat(stream, src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamFormat(
            Ref<SDL_AudioStream> stream,
            Ref<AudioSpec> src_spec,
            Ref<AudioSpec> dst_spec
        ) => T.GetAudioStreamFormat(stream, src_spec, dst_spec);

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetAudioStreamFrequencyRatio(SDL_AudioStream* stream) =>
            T.GetAudioStreamFrequencyRatio(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream) =>
            T.GetAudioStreamFrequencyRatio(stream);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAudioStreamProperties(SDL_AudioStream* stream) =>
            T.GetAudioStreamProperties(stream);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetAudioStreamProperties(Ref<SDL_AudioStream> stream) =>
            T.GetAudioStreamProperties(stream);

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamQueued(SDL_AudioStream* stream) => T.GetAudioStreamQueued(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetAudioStreamQueued(Ref<SDL_AudioStream> stream) =>
            T.GetAudioStreamQueued(stream);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetBasePath() => T.GetBasePath();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetBasePathRaw() => T.GetBasePathRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int default_value
        ) => T.GetBooleanProperty(props, name, default_value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
        ) => T.GetBooleanProperty(props, name, default_value);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCameraDeviceName(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => T.GetCameraDeviceName(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCameraDeviceNameRaw(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => T.GetCameraDeviceNameRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetCameraDevicePosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CameraPosition GetCameraDevicePosition(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => T.GetCameraDevicePosition(instance_id);

        [return: NativeTypeName("SDL_CameraDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "GetCameraDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetCameraDevices(int* count) => T.GetCameraDevices(count);

        [return: NativeTypeName("SDL_CameraDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetCameraDevices(Ref<int> count) => T.GetCameraDevices(count);

        [NativeFunction("SDL3", EntryPoint = "GetCameraDeviceSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public CameraSpec* GetCameraDeviceSupportedFormats(
            [NativeTypeName("SDL_CameraDeviceID")] uint devid,
            int* count
        ) => T.GetCameraDeviceSupportedFormats(devid, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<CameraSpec> GetCameraDeviceSupportedFormats(
            [NativeTypeName("SDL_CameraDeviceID")] uint devid,
            Ref<int> count
        ) => T.GetCameraDeviceSupportedFormats(devid, count);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCameraDriver(int index) => T.GetCameraDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCameraDriverRaw(int index) => T.GetCameraDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCameraFormat(SDL_Camera* camera, CameraSpec* spec) =>
            T.GetCameraFormat(camera, spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCameraFormat(Ref<SDL_Camera> camera, Ref<CameraSpec> spec) =>
            T.GetCameraFormat(camera, spec);

        [return: NativeTypeName("SDL_CameraDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "GetCameraInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetCameraInstanceID(SDL_Camera* camera) => T.GetCameraInstanceID(camera);

        [return: NativeTypeName("SDL_CameraDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetCameraInstanceID(Ref<SDL_Camera> camera) => T.GetCameraInstanceID(camera);

        [NativeFunction("SDL3", EntryPoint = "GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCameraPermissionState(SDL_Camera* camera) =>
            T.GetCameraPermissionState(camera);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCameraPermissionState(Ref<SDL_Camera> camera) =>
            T.GetCameraPermissionState(camera);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetCameraProperties(SDL_Camera* camera) => T.GetCameraProperties(camera);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetCameraProperties(Ref<SDL_Camera> camera) => T.GetCameraProperties(camera);

        [NativeFunction("SDL3", EntryPoint = "GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type,
            [NativeTypeName("size_t *")] nuint* size
        ) => T.GetClipboardData(mime_type, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type,
            [NativeTypeName("size_t *")] Ref<nuint> size
        ) => T.GetClipboardData(mime_type, size);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetClipboardText() => T.GetClipboardText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetClipboardTextRaw() => T.GetClipboardTextRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("SDL_bool")] int include_high_density_modes
        ) =>
            T.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes
            );

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("SDL_bool")] MaybeBool<int> include_high_density_modes
        ) =>
            T.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes
            );

        [NativeFunction("SDL3", EntryPoint = "GetCPUCacheLineSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCPUCacheLineSize() => T.GetCPUCacheLineSize();

        [NativeFunction("SDL3", EntryPoint = "GetCPUCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCPUCount() => T.GetCPUCount();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCurrentAudioDriver() => T.GetCurrentAudioDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCurrentAudioDriverRaw() => T.GetCurrentAudioDriverRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCurrentCameraDriver() => T.GetCurrentCameraDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCurrentCameraDriverRaw() => T.GetCurrentCameraDriverRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetCurrentDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetCurrentDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetCurrentDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetCurrentDisplayModeRaw(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetCurrentDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayOrientation GetCurrentDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetCurrentDisplayOrientation(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
            T.GetCurrentRenderOutputSize(renderer, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCurrentRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h) =>
            T.GetCurrentRenderOutputSize(renderer, w, h);

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "GetCurrentThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetCurrentThreadID() => T.GetCurrentThreadID();

        [NativeFunction("SDL3", EntryPoint = "GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
            T.GetCurrentTime(ticks);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks) =>
            T.GetCurrentTime(ticks);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetCurrentVideoDriver() => T.GetCurrentVideoDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetCurrentVideoDriverRaw() => T.GetCurrentVideoDriverRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Cursor> GetCursor() => T.GetCursor();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Cursor* GetCursorRaw() => T.GetCursorRaw();

        [NativeFunction("SDL3", EntryPoint = "GetDayOfWeek")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDayOfWeek(int year, int month, int day) => T.GetDayOfWeek(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "GetDayOfYear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDayOfYear(int year, int month, int day) => T.GetDayOfYear(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "GetDaysInMonth")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDaysInMonth(int year, int month) => T.GetDaysInMonth(year, month);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "GetDefaultAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<AssertData*, void*, AssertState> GetDefaultAssertionHandler() =>
            T.GetDefaultAssertionHandler();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Cursor> GetDefaultCursor() => T.GetDefaultCursor();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Cursor* GetDefaultCursorRaw() => T.GetDefaultCursorRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetDesktopDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetDesktopDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetDesktopDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetDesktopDisplayModeRaw(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDisplayBounds([NativeTypeName("SDL_DisplayID")] uint displayID, Rect* rect) =>
            T.GetDisplayBounds(displayID, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        ) => T.GetDisplayBounds(displayID, rect);

        [NativeFunction("SDL3", EntryPoint = "GetDisplayContentScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetDisplayContentScale([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayContentScale(displayID);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
            T.GetDisplayForPoint(point);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Ref<Point> point) =>
            T.GetDisplayForPoint(point);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
            T.GetDisplayForRect(rect);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect) =>
            T.GetDisplayForRect(rect);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForWindow(SDL_Window* window) => T.GetDisplayForWindow(window);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayForWindow(Ref<SDL_Window> window) => T.GetDisplayForWindow(window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayName(displayID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayNameRaw(displayID);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            T.GetDisplayProperties(displayID);

        [return: NativeTypeName("SDL_DisplayID *")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetDisplays(int* count) => T.GetDisplays(count);

        [return: NativeTypeName("SDL_DisplayID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetDisplays(Ref<int> count) => T.GetDisplays(count);

        [NativeFunction("SDL3", EntryPoint = "GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => T.GetDisplayUsableBounds(displayID, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        ) => T.GetDisplayUsableBounds(displayID, rect);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetError() => T.GetError();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetErrorRaw() => T.GetErrorRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
            void** userdata
        ) => T.GetEventFilter(filter, userdata);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
            Ref2D userdata
        ) => T.GetEventFilter(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float default_value
        ) => T.GetFloatProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float default_value
        ) => T.GetFloatProperty(props, name, default_value);

        [return: NativeTypeName("const SDL_DisplayMode **")]
        [NativeFunction("SDL3", EntryPoint = "GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode** GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int* count
        ) => T.GetFullscreenDisplayModes(displayID, count);

        [return: NativeTypeName("const SDL_DisplayMode **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<DisplayMode> GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<int> count
        ) => T.GetFullscreenDisplayModes(displayID, count);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
            T.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
            Ref<SDL_Gamepad> gamepad,
            GamepadAxis axis
        ) => T.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadAppleSFSymbolsNameForButton(
            SDL_Gamepad* gamepad,
            GamepadButton button
        ) => T.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        ) => T.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public short GetGamepadAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
            T.GetGamepadAxis(gamepad, axis);

        [return: NativeTypeName("Sint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public short GetGamepadAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis) =>
            T.GetGamepadAxis(gamepad, axis);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadAxis GetGamepadAxisFromString([NativeTypeName("const char *")] sbyte* str) =>
            T.GetGamepadAxisFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.GetGamepadAxisFromString(str);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadBinding** GetGamepadBindings(SDL_Gamepad* gamepad, int* count) =>
            T.GetGamepadBindings(gamepad, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<GamepadBinding> GetGamepadBindings(Ref<SDL_Gamepad> gamepad, Ref<int> count) =>
            T.GetGamepadBindings(gamepad, count);

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetGamepadButton(SDL_Gamepad* gamepad, GamepadButton button) =>
            T.GetGamepadButton(gamepad, button);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetGamepadButton(Ref<SDL_Gamepad> gamepad, GamepadButton button) =>
            T.GetGamepadButton(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => T.GetGamepadButtonFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.GetGamepadButtonFromString(str);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButtonLabel GetGamepadButtonLabel(
            SDL_Gamepad* gamepad,
            GamepadButton button
        ) => T.GetGamepadButtonLabel(gamepad, button);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButtonLabel GetGamepadButtonLabel(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        ) => T.GetGamepadButtonLabel(gamepad, button);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonLabelForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadButtonLabel GetGamepadButtonLabelForType(
            GamepadType type,
            GamepadButton button
        ) => T.GetGamepadButtonLabelForType(type, button);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickConnectionState GetGamepadConnectionState(SDL_Gamepad* gamepad) =>
            T.GetGamepadConnectionState(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickConnectionState GetGamepadConnectionState(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadConnectionState(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadFirmwareVersion(SDL_Gamepad* gamepad) =>
            T.GetGamepadFirmwareVersion(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadFirmwareVersion(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadFirmwareVersion(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Gamepad> GetGamepadFromInstanceID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Gamepad* GetGamepadFromInstanceIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadFromInstanceIDRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Gamepad> GetGamepadFromPlayerIndex(int player_index) =>
            T.GetGamepadFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Gamepad* GetGamepadFromPlayerIndexRaw(int player_index) =>
            T.GetGamepadFromPlayerIndexRaw(player_index);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetGamepadInstanceGuid([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetGamepadInstanceGuid(instance_id);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGamepadInstanceID(SDL_Gamepad* gamepad) => T.GetGamepadInstanceID(gamepad);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGamepadInstanceID(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadInstanceID(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadInstanceMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceMapping(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadInstanceMappingRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceMappingRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadInstanceName(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadInstanceNameRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceNameRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadInstancePath(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstancePath(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadInstancePathRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstancePathRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstancePlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadInstancePlayerIndex(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstancePlayerIndex(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadInstanceProduct(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceProduct(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadInstanceProductVersion(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceProductVersion(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceType(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadInstanceVendor(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetGamepadInstanceVendor(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Joystick* GetGamepadJoystick(SDL_Gamepad* gamepad) =>
            T.GetGamepadJoystick(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Joystick> GetGamepadJoystick(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadJoystick(gamepad);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadMapping(SDL_Gamepad* gamepad) => T.GetGamepadMapping(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadMapping(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadMapping(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadMappingForGuid(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid
        ) => T.GetGamepadMappingForGuid(guid);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadMappingForGuidRaw([NativeTypeName("SDL_JoystickGUID")] Guid guid) =>
            T.GetGamepadMappingForGuidRaw(guid);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GetGamepadMappings(int* count) => T.GetGamepadMappings(count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GetGamepadMappings(Ref<int> count) => T.GetGamepadMappings(count);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadName(SDL_Gamepad* gamepad) => T.GetGamepadName(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadName(Ref<SDL_Gamepad> gamepad) => T.GetGamepadName(gamepad);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadPath(SDL_Gamepad* gamepad) => T.GetGamepadPath(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadPath(Ref<SDL_Gamepad> gamepad) => T.GetGamepadPath(gamepad);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadPlayerIndex(SDL_Gamepad* gamepad) => T.GetGamepadPlayerIndex(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadPlayerIndex(gamepad);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent) =>
            T.GetGamepadPowerInfo(gamepad, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetGamepadPowerInfo(Ref<SDL_Gamepad> gamepad, Ref<int> percent) =>
            T.GetGamepadPowerInfo(gamepad, percent);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProduct(SDL_Gamepad* gamepad) => T.GetGamepadProduct(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProduct(Ref<SDL_Gamepad> gamepad) => T.GetGamepadProduct(gamepad);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProductVersion(SDL_Gamepad* gamepad) =>
            T.GetGamepadProductVersion(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadProductVersion(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadProductVersion(gamepad);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGamepadProperties(SDL_Gamepad* gamepad) => T.GetGamepadProperties(gamepad);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGamepadProperties(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadProperties(gamepad);

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetGamepads(int* count) => T.GetGamepads(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetGamepads(Ref<int> count) => T.GetGamepads(count);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadSensorData(
            SDL_Gamepad* gamepad,
            SensorType type,
            float* data,
            int num_values
        ) => T.GetGamepadSensorData(gamepad, type, data, num_values);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadSensorData(
            Ref<SDL_Gamepad> gamepad,
            SensorType type,
            Ref<float> data,
            int num_values
        ) => T.GetGamepadSensorData(gamepad, type, data, num_values);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SensorType type) =>
            T.GetGamepadSensorDataRate(gamepad, type);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetGamepadSensorDataRate(Ref<SDL_Gamepad> gamepad, SensorType type) =>
            T.GetGamepadSensorDataRate(gamepad, type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadSerial(SDL_Gamepad* gamepad) => T.GetGamepadSerial(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadSerial(Ref<SDL_Gamepad> gamepad) => T.GetGamepadSerial(gamepad);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetGamepadSteamHandle(SDL_Gamepad* gamepad) =>
            T.GetGamepadSteamHandle(gamepad);

        [return: NativeTypeName("Uint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetGamepadSteamHandle(Ref<SDL_Gamepad> gamepad) =>
            T.GetGamepadSteamHandle(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
            T.GetGamepadStringForAxis(axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis) =>
            T.GetGamepadStringForAxisRaw(axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
            T.GetGamepadStringForButton(button);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadStringForButtonRaw(GamepadButton button) =>
            T.GetGamepadStringForButtonRaw(button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
            T.GetGamepadStringForType(type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetGamepadStringForTypeRaw(GamepadType type) =>
            T.GetGamepadStringForTypeRaw(type);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadTouchpadFinger(
            SDL_Gamepad* gamepad,
            int touchpad,
            int finger,
            [NativeTypeName("Uint8 *")] byte* state,
            float* x,
            float* y,
            float* pressure
        ) => T.GetGamepadTouchpadFinger(gamepad, touchpad, finger, state, x, y, pressure);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetGamepadTouchpadFinger(
            Ref<SDL_Gamepad> gamepad,
            int touchpad,
            int finger,
            [NativeTypeName("Uint8 *")] Ref<byte> state,
            Ref<float> x,
            Ref<float> y,
            Ref<float> pressure
        ) => T.GetGamepadTouchpadFinger(gamepad, touchpad, finger, state, x, y, pressure);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadType(SDL_Gamepad* gamepad) => T.GetGamepadType(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadType(Ref<SDL_Gamepad> gamepad) => T.GetGamepadType(gamepad);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadTypeFromString([NativeTypeName("const char *")] sbyte* str) =>
            T.GetGamepadTypeFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        ) => T.GetGamepadTypeFromString(str);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadVendor(SDL_Gamepad* gamepad) => T.GetGamepadVendor(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetGamepadVendor(Ref<SDL_Gamepad> gamepad) => T.GetGamepadVendor(gamepad);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGlobalMouseState(float* x, float* y) => T.GetGlobalMouseState(x, y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGlobalMouseState(Ref<float> x, Ref<float> y) => T.GetGlobalMouseState(x, y);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetGlobalProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetGlobalProperties() => T.GetGlobalProperties();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GetGrabbedWindow() => T.GetGrabbedWindow();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GetGrabbedWindowRaw() => T.GetGrabbedWindowRaw();

        [NativeFunction("SDL3", EntryPoint = "GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetHapticEffectStatus(SDL_Haptic* haptic, int effect) =>
            T.GetHapticEffectStatus(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetHapticEffectStatus(Ref<SDL_Haptic> haptic, int effect) =>
            T.GetHapticEffectStatus(haptic, effect);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetHapticFeatures(SDL_Haptic* haptic) => T.GetHapticFeatures(haptic);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetHapticFeatures(Ref<SDL_Haptic> haptic) => T.GetHapticFeatures(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Haptic> GetHapticFromInstanceID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => T.GetHapticFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Haptic* GetHapticFromInstanceIDRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => T.GetHapticFromInstanceIDRaw(instance_id);

        [return: NativeTypeName("SDL_HapticID")]
        [NativeFunction("SDL3", EntryPoint = "GetHapticInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetHapticInstanceID(SDL_Haptic* haptic) => T.GetHapticInstanceID(haptic);

        [return: NativeTypeName("SDL_HapticID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetHapticInstanceID(Ref<SDL_Haptic> haptic) => T.GetHapticInstanceID(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetHapticInstanceName(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => T.GetHapticInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetHapticInstanceNameRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.GetHapticInstanceNameRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetHapticName(SDL_Haptic* haptic) => T.GetHapticName(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetHapticName(Ref<SDL_Haptic> haptic) => T.GetHapticName(haptic);

        [return: NativeTypeName("SDL_HapticID *")]
        [NativeFunction("SDL3", EntryPoint = "GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetHaptics(int* count) => T.GetHaptics(count);

        [return: NativeTypeName("SDL_HapticID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetHaptics(Ref<int> count) => T.GetHaptics(count);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetHint([NativeTypeName("const char *")] sbyte* name) => T.GetHint(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.GetHint(name);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetHintBoolean(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int default_value
        ) => T.GetHintBoolean(name, default_value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetHintBoolean(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
        ) => T.GetHintBoolean(name, default_value);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetIOProperties(SDL_IOStream* context) => T.GetIOProperties(context);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetIOProperties(Ref<SDL_IOStream> context) => T.GetIOProperties(context);

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetIOSize(SDL_IOStream* context) => T.GetIOSize(context);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetIOSize(Ref<SDL_IOStream> context) => T.GetIOSize(context);

        [NativeFunction("SDL3", EntryPoint = "GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStatus GetIOStatus(SDL_IOStream* context) => T.GetIOStatus(context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public IOStatus GetIOStatus(Ref<SDL_IOStream> context) => T.GetIOStatus(context);

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public short GetJoystickAxis(SDL_Joystick* joystick, int axis) =>
            T.GetJoystickAxis(joystick, axis);

        [return: NativeTypeName("Sint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public short GetJoystickAxis(Ref<SDL_Joystick> joystick, int axis) =>
            T.GetJoystickAxis(joystick, axis);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickAxisInitialState(
            SDL_Joystick* joystick,
            int axis,
            [NativeTypeName("Sint16 *")] short* state
        ) => T.GetJoystickAxisInitialState(joystick, axis, state);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetJoystickAxisInitialState(
            Ref<SDL_Joystick> joystick,
            int axis,
            [NativeTypeName("Sint16 *")] Ref<short> state
        ) => T.GetJoystickAxisInitialState(joystick, axis, state);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy) =>
            T.GetJoystickBall(joystick, ball, dx, dy);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickBall(
            Ref<SDL_Joystick> joystick,
            int ball,
            Ref<int> dx,
            Ref<int> dy
        ) => T.GetJoystickBall(joystick, ball, dx, dy);

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickButton(SDL_Joystick* joystick, int button) =>
            T.GetJoystickButton(joystick, button);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickButton(Ref<SDL_Joystick> joystick, int button) =>
            T.GetJoystickButton(joystick, button);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickConnectionState GetJoystickConnectionState(SDL_Joystick* joystick) =>
            T.GetJoystickConnectionState(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickConnectionState GetJoystickConnectionState(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickConnectionState(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickFirmwareVersion(SDL_Joystick* joystick) =>
            T.GetJoystickFirmwareVersion(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickFirmwareVersion(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickFirmwareVersion(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Joystick> GetJoystickFromInstanceID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Joystick* GetJoystickFromInstanceIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickFromInstanceIDRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Joystick> GetJoystickFromPlayerIndex(int player_index) =>
            T.GetJoystickFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Joystick* GetJoystickFromPlayerIndexRaw(int player_index) =>
            T.GetJoystickFromPlayerIndexRaw(player_index);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickGuid(SDL_Joystick* joystick) => T.GetJoystickGuid(joystick);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickGuid(Ref<SDL_Joystick> joystick) => T.GetJoystickGuid(joystick);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickGuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
            T.GetJoystickGuidFromString(pchGUID);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickGuidFromString(
            [NativeTypeName("const char *")] Ref<sbyte> pchGUID
        ) => T.GetJoystickGuidFromString(pchGUID);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetJoystickGuidInfo(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("Uint16 *")] ushort* vendor,
            [NativeTypeName("Uint16 *")] ushort* product,
            [NativeTypeName("Uint16 *")] ushort* version,
            [NativeTypeName("Uint16 *")] ushort* crc16
        ) => T.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetJoystickGuidInfo(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
            [NativeTypeName("Uint16 *")] Ref<ushort> product,
            [NativeTypeName("Uint16 *")] Ref<ushort> version,
            [NativeTypeName("Uint16 *")] Ref<ushort> crc16
        ) => T.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickGuidString(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        ) => T.GetJoystickGuidString(guid, pszGUID, cbGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickGuidString(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        ) => T.GetJoystickGuidString(guid, pszGUID, cbGUID);

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickHat(SDL_Joystick* joystick, int hat) =>
            T.GetJoystickHat(joystick, hat);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte GetJoystickHat(Ref<SDL_Joystick> joystick, int hat) =>
            T.GetJoystickHat(joystick, hat);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetJoystickInstanceGuid([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.GetJoystickInstanceGuid(instance_id);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetJoystickInstanceID(SDL_Joystick* joystick) =>
            T.GetJoystickInstanceID(joystick);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetJoystickInstanceID(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickInstanceID(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickInstanceName(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickInstanceNameRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstanceNameRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickInstancePath(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstancePath(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickInstancePathRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstancePathRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstancePlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickInstancePlayerIndex(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstancePlayerIndex(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickInstanceProduct(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstanceProduct(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickInstanceProductVersion(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstanceProductVersion(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickType GetJoystickInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstanceType(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickInstanceVendor(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetJoystickInstanceVendor(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickName(SDL_Joystick* joystick) => T.GetJoystickName(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickName(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickName(joystick);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickPath(SDL_Joystick* joystick) => T.GetJoystickPath(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickPath(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickPath(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickPlayerIndex(SDL_Joystick* joystick) =>
            T.GetJoystickPlayerIndex(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetJoystickPlayerIndex(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickPlayerIndex(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent) =>
            T.GetJoystickPowerInfo(joystick, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetJoystickPowerInfo(Ref<SDL_Joystick> joystick, Ref<int> percent) =>
            T.GetJoystickPowerInfo(joystick, percent);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProduct(SDL_Joystick* joystick) => T.GetJoystickProduct(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProduct(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickProduct(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProductVersion(SDL_Joystick* joystick) =>
            T.GetJoystickProductVersion(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickProductVersion(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickProductVersion(joystick);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetJoystickProperties(SDL_Joystick* joystick) =>
            T.GetJoystickProperties(joystick);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetJoystickProperties(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickProperties(joystick);

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetJoysticks(int* count) => T.GetJoysticks(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetJoysticks(Ref<int> count) => T.GetJoysticks(count);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetJoystickSerial(SDL_Joystick* joystick) => T.GetJoystickSerial(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetJoystickSerial(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickSerial(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickType GetJoystickType(SDL_Joystick* joystick) => T.GetJoystickType(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public JoystickType GetJoystickType(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickType(joystick);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickVendor(SDL_Joystick* joystick) => T.GetJoystickVendor(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ushort GetJoystickVendor(Ref<SDL_Joystick> joystick) =>
            T.GetJoystickVendor(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GetKeyboardFocus() => T.GetKeyboardFocus();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GetKeyboardFocusRaw() => T.GetKeyboardFocusRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetKeyboardInstanceName(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => T.GetKeyboardInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetKeyboardInstanceNameRaw(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => T.GetKeyboardInstanceNameRaw(instance_id);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetKeyboards(int* count) => T.GetKeyboards(count);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetKeyboards(Ref<int> count) => T.GetKeyboards(count);

        [return: NativeTypeName("const Uint8 *")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public byte* GetKeyboardState(int* numkeys) => T.GetKeyboardState(numkeys);

        [return: NativeTypeName("const Uint8 *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<byte> GetKeyboardState(Ref<int> numkeys) => T.GetKeyboardState(numkeys);

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
            T.GetKeyFromName(name);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.GetKeyFromName(name);

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyFromScancode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetKeyFromScancode(Scancode scancode) => T.GetKeyFromScancode(scancode);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] int key) => T.GetKeyName(key);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] int key) =>
            T.GetKeyNameRaw(key);

        [NativeFunction("SDL3", EntryPoint = "GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
            void** userdata
        ) => T.GetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
            Ref2D userdata
        ) => T.GetLogOutputFunction(callback, userdata);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetMasksForPixelFormatEnum")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMasksForPixelFormatEnum(
            PixelFormatEnum format,
            int* bpp,
            [NativeTypeName("Uint32 *")] uint* Rmask,
            [NativeTypeName("Uint32 *")] uint* Gmask,
            [NativeTypeName("Uint32 *")] uint* Bmask,
            [NativeTypeName("Uint32 *")] uint* Amask
        ) => T.GetMasksForPixelFormatEnum(format, bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormatEnum")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetMasksForPixelFormatEnum(
            PixelFormatEnum format,
            Ref<int> bpp,
            [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Amask
        ) => T.GetMasksForPixelFormatEnum(format, bpp, Rmask, Gmask, Bmask, Amask);

        [NativeFunction("SDL3", EntryPoint = "GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMaxHapticEffects(SDL_Haptic* haptic) => T.GetMaxHapticEffects(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMaxHapticEffects(Ref<SDL_Haptic> haptic) => T.GetMaxHapticEffects(haptic);

        [NativeFunction("SDL3", EntryPoint = "GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMaxHapticEffectsPlaying(SDL_Haptic* haptic) =>
            T.GetMaxHapticEffectsPlaying(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetMaxHapticEffectsPlaying(Ref<SDL_Haptic> haptic) =>
            T.GetMaxHapticEffectsPlaying(haptic);

        [return: NativeTypeName("SDL_MouseID *")]
        [NativeFunction("SDL3", EntryPoint = "GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetMice(int* count) => T.GetMice(count);

        [return: NativeTypeName("SDL_MouseID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetMice(Ref<int> count) => T.GetMice(count);

        [NativeFunction("SDL3", EntryPoint = "GetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Keymod GetModState() => T.GetModState();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GetMouseFocus() => T.GetMouseFocus();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GetMouseFocusRaw() => T.GetMouseFocusRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetMouseInstanceName([NativeTypeName("SDL_MouseID")] uint instance_id) =>
            T.GetMouseInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetMouseInstanceNameRaw([NativeTypeName("SDL_MouseID")] uint instance_id) =>
            T.GetMouseInstanceNameRaw(instance_id);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetMouseState(float* x, float* y) => T.GetMouseState(x, y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetMouseState(Ref<float> x, Ref<float> y) => T.GetMouseState(x, y);

        [NativeFunction("SDL3", EntryPoint = "GetNaturalDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayOrientation GetNaturalDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => T.GetNaturalDisplayOrientation(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetNumAudioDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumAudioDrivers() => T.GetNumAudioDrivers();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long default_value
        ) => T.GetNumberProperty(props, name, default_value);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long default_value
        ) => T.GetNumberProperty(props, name, default_value);

        [NativeFunction("SDL3", EntryPoint = "GetNumCameraDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumCameraDrivers() => T.GetNumCameraDrivers();

        [NativeFunction("SDL3", EntryPoint = "GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad) =>
            T.GetNumGamepadTouchpadFingers(gamepad, touchpad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumGamepadTouchpadFingers(Ref<SDL_Gamepad> gamepad, int touchpad) =>
            T.GetNumGamepadTouchpadFingers(gamepad, touchpad);

        [NativeFunction("SDL3", EntryPoint = "GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumGamepadTouchpads(SDL_Gamepad* gamepad) =>
            T.GetNumGamepadTouchpads(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumGamepadTouchpads(Ref<SDL_Gamepad> gamepad) =>
            T.GetNumGamepadTouchpads(gamepad);

        [NativeFunction("SDL3", EntryPoint = "GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumHapticAxes(SDL_Haptic* haptic) => T.GetNumHapticAxes(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumHapticAxes(Ref<SDL_Haptic> haptic) => T.GetNumHapticAxes(haptic);

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickAxes(SDL_Joystick* joystick) => T.GetNumJoystickAxes(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickAxes(Ref<SDL_Joystick> joystick) => T.GetNumJoystickAxes(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickBalls(SDL_Joystick* joystick) => T.GetNumJoystickBalls(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickBalls(Ref<SDL_Joystick> joystick) =>
            T.GetNumJoystickBalls(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickButtons(SDL_Joystick* joystick) =>
            T.GetNumJoystickButtons(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickButtons(Ref<SDL_Joystick> joystick) =>
            T.GetNumJoystickButtons(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickHats(SDL_Joystick* joystick) => T.GetNumJoystickHats(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumJoystickHats(Ref<SDL_Joystick> joystick) => T.GetNumJoystickHats(joystick);

        [NativeFunction("SDL3", EntryPoint = "GetNumRenderDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumRenderDrivers() => T.GetNumRenderDrivers();

        [NativeFunction("SDL3", EntryPoint = "GetNumVideoDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetNumVideoDrivers() => T.GetNumVideoDrivers();

        [NativeFunction("SDL3", EntryPoint = "GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetPathInfo([NativeTypeName("const char *")] sbyte* path, PathInfo* info) =>
            T.GetPathInfo(path, info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetPathInfo(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        ) => T.GetPathInfo(path, info);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetPenCapabilities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPenCapabilities(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            PenCapabilityInfo* capabilities
        ) => T.GetPenCapabilities(instance_id, capabilities);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenCapabilities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPenCapabilities(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            Ref<PenCapabilityInfo> capabilities
        ) => T.GetPenCapabilities(instance_id, capabilities);

        [return: NativeTypeName("SDL_PenID")]
        [NativeFunction("SDL3", EntryPoint = "GetPenFromGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPenFromGuid(Guid guid) => T.GetPenFromGuid(guid);

        [NativeFunction("SDL3", EntryPoint = "GetPenGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GetPenGuid([NativeTypeName("SDL_PenID")] uint instance_id) =>
            T.GetPenGuid(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPenName([NativeTypeName("SDL_PenID")] uint instance_id) =>
            T.GetPenName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPenNameRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
            T.GetPenNameRaw(instance_id);

        [return: NativeTypeName("SDL_PenID *")]
        [NativeFunction("SDL3", EntryPoint = "GetPens")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetPens(int* count) => T.GetPens(count);

        [return: NativeTypeName("SDL_PenID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPens")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetPens(Ref<int> count) => T.GetPens(count);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetPenStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPenStatus(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            float* x,
            float* y,
            float* axes,
            [NativeTypeName("size_t")] nuint num_axes
        ) => T.GetPenStatus(instance_id, x, y, axes, num_axes);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPenStatus(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            Ref<float> x,
            Ref<float> y,
            Ref<float> axes,
            [NativeTypeName("size_t")] nuint num_axes
        ) => T.GetPenStatus(instance_id, x, y, axes, num_axes);

        [NativeFunction("SDL3", EntryPoint = "GetPenType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PenSubtype GetPenType([NativeTypeName("SDL_PenID")] uint instance_id) =>
            T.GetPenType(instance_id);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetPerformanceCounter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetPerformanceCounter() => T.GetPerformanceCounter();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetPerformanceFrequency")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetPerformanceFrequency() => T.GetPerformanceFrequency();

        [NativeFunction("SDL3", EntryPoint = "GetPixelFormatEnumForMasks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PixelFormatEnum GetPixelFormatEnumForMasks(
            int bpp,
            [NativeTypeName("Uint32")] uint Rmask,
            [NativeTypeName("Uint32")] uint Gmask,
            [NativeTypeName("Uint32")] uint Bmask,
            [NativeTypeName("Uint32")] uint Amask
        ) => T.GetPixelFormatEnumForMasks(bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPixelFormatName(PixelFormatEnum format) =>
            T.GetPixelFormatName(format);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPixelFormatNameRaw(PixelFormatEnum format) =>
            T.GetPixelFormatNameRaw(format);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPlatform() => T.GetPlatform();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPlatformRaw() => T.GetPlatformRaw();

        [NativeFunction("SDL3", EntryPoint = "GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetPowerInfo(int* seconds, int* percent) =>
            T.GetPowerInfo(seconds, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent) =>
            T.GetPowerInfo(seconds, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Locale> GetPreferredLocales() => T.GetPreferredLocales();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Locale* GetPreferredLocalesRaw() => T.GetPreferredLocalesRaw();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPrefPath(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app
        ) => T.GetPrefPath(org, app);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPrefPath(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app
        ) => T.GetPrefPath(org, app);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetPrimaryDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetPrimaryDisplay() => T.GetPrimaryDisplay();

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetPrimarySelectionText() => T.GetPrimarySelectionText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetPrimarySelectionTextRaw() => T.GetPrimarySelectionTextRaw();

        [NativeFunction("SDL3", EntryPoint = "GetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* default_value
        ) => T.GetProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref default_value
        ) => T.GetProperty(props, name, default_value);

        [NativeFunction("SDL3", EntryPoint = "GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.GetPropertyType(props, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.GetPropertyType(props, name);

        [NativeFunction("SDL3", EntryPoint = "GetRealGamepadInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetRealGamepadInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.GetRealGamepadInstanceType(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetRealGamepadType(SDL_Gamepad* gamepad) =>
            T.GetRealGamepadType(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public GamepadType GetRealGamepadType(Ref<SDL_Gamepad> gamepad) =>
            T.GetRealGamepadType(gamepad);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int* X1,
            int* Y1,
            int* X2,
            int* Y2
        ) => T.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref<int> X1,
            Ref<int> Y1,
            Ref<int> X2,
            Ref<int> Y2
        ) => T.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* rect,
            float* X1,
            float* Y1,
            float* X2,
            float* Y2
        ) => T.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
            Ref<float> X1,
            Ref<float> Y1,
            Ref<float> X2,
            Ref<float> Y2
        ) => T.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Point* points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Rect* clip,
            Rect* result
        ) => T.GetRectEnclosingPoints(points, count, clip, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Ref<Point> points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
            Ref<Rect> result
        ) => T.GetRectEnclosingPoints(points, count, clip, result);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count,
            [NativeTypeName("const SDL_FRect *")] FRect* clip,
            FRect* result
        ) => T.GetRectEnclosingPointsFloat(points, count, clip, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
            Ref<FRect> result
        ) => T.GetRectEnclosingPointsFloat(points, count, clip, result);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => T.GetRectIntersection(A, B, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        ) => T.GetRectIntersection(A, B, result);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => T.GetRectIntersectionFloat(A, B, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        ) => T.GetRectIntersectionFloat(A, B, result);

        [NativeFunction("SDL3", EntryPoint = "GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => T.GetRectUnion(A, B, result);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        ) => T.GetRectUnion(A, B, result);

        [NativeFunction("SDL3", EntryPoint = "GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => T.GetRectUnionFloat(A, B, result);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        ) => T.GetRectUnionFloat(A, B, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetRelativeMouseMode() => T.GetRelativeMouseMode();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRelativeMouseModeRaw() => T.GetRelativeMouseModeRaw();

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRelativeMouseState(float* x, float* y) => T.GetRelativeMouseState(x, y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRelativeMouseState(Ref<float> x, Ref<float> y) =>
            T.GetRelativeMouseState(x, y);

        [NativeFunction("SDL3", EntryPoint = "GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderClipRect(SDL_Renderer* renderer, Rect* rect) =>
            T.GetRenderClipRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderClipRect(Ref<SDL_Renderer> renderer, Ref<Rect> rect) =>
            T.GetRenderClipRect(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderColorScale(SDL_Renderer* renderer, float* scale) =>
            T.GetRenderColorScale(renderer, scale);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderColorScale(Ref<SDL_Renderer> renderer, Ref<float> scale) =>
            T.GetRenderColorScale(renderer, scale);

        [NativeFunction("SDL3", EntryPoint = "GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode* blendMode) =>
            T.GetRenderDrawBlendMode(renderer, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, Ref<BlendMode> blendMode) =>
            T.GetRenderDrawBlendMode(renderer, blendMode);

        [NativeFunction("SDL3", EntryPoint = "GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderDrawColor(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => T.GetRenderDrawColor(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderDrawColor(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        ) => T.GetRenderDrawColor(renderer, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderDrawColorFloat(
            SDL_Renderer* renderer,
            float* r,
            float* g,
            float* b,
            float* a
        ) => T.GetRenderDrawColorFloat(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderDrawColorFloat(
            Ref<SDL_Renderer> renderer,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        ) => T.GetRenderDrawColorFloat(renderer, r, g, b, a);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetRenderDriver(int index) => T.GetRenderDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetRenderDriverRaw(int index) => T.GetRenderDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Renderer* GetRenderer(SDL_Window* window) => T.GetRenderer(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Renderer> GetRenderer(Ref<SDL_Window> window) => T.GetRenderer(window);

        [NativeFunction("SDL3", EntryPoint = "GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Renderer* GetRendererFromTexture(SDL_Texture* texture) =>
            T.GetRendererFromTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Renderer> GetRendererFromTexture(Ref<SDL_Texture> texture) =>
            T.GetRendererFromTexture(texture);

        [NativeFunction("SDL3", EntryPoint = "GetRendererInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRendererInfo(SDL_Renderer* renderer, RendererInfo* info) =>
            T.GetRendererInfo(renderer, info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRendererInfo(Ref<SDL_Renderer> renderer, Ref<RendererInfo> info) =>
            T.GetRendererInfo(renderer, info);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRendererProperties(SDL_Renderer* renderer) =>
            T.GetRendererProperties(renderer);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetRendererProperties(Ref<SDL_Renderer> renderer) =>
            T.GetRendererProperties(renderer);

        [NativeFunction("SDL3", EntryPoint = "GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderLogicalPresentation(
            SDL_Renderer* renderer,
            int* w,
            int* h,
            RendererLogicalPresentation* mode,
            ScaleMode* scale_mode
        ) => T.GetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderLogicalPresentation(
            Ref<SDL_Renderer> renderer,
            Ref<int> w,
            Ref<int> h,
            Ref<RendererLogicalPresentation> mode,
            Ref<ScaleMode> scale_mode
        ) => T.GetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

        [NativeFunction("SDL3", EntryPoint = "GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetRenderMetalCommandEncoder(SDL_Renderer* renderer) =>
            T.GetRenderMetalCommandEncoder(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetRenderMetalCommandEncoder(Ref<SDL_Renderer> renderer) =>
            T.GetRenderMetalCommandEncoder(renderer);

        [NativeFunction("SDL3", EntryPoint = "GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetRenderMetalLayer(SDL_Renderer* renderer) => T.GetRenderMetalLayer(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetRenderMetalLayer(Ref<SDL_Renderer> renderer) =>
            T.GetRenderMetalLayer(renderer);

        [NativeFunction("SDL3", EntryPoint = "GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
            T.GetRenderOutputSize(renderer, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h) =>
            T.GetRenderOutputSize(renderer, w, h);

        [NativeFunction("SDL3", EntryPoint = "GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY) =>
            T.GetRenderScale(renderer, scaleX, scaleY);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderScale(
            Ref<SDL_Renderer> renderer,
            Ref<float> scaleX,
            Ref<float> scaleY
        ) => T.GetRenderScale(renderer, scaleX, scaleY);

        [NativeFunction("SDL3", EntryPoint = "GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Texture* GetRenderTarget(SDL_Renderer* renderer) => T.GetRenderTarget(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Texture> GetRenderTarget(Ref<SDL_Renderer> renderer) =>
            T.GetRenderTarget(renderer);

        [NativeFunction("SDL3", EntryPoint = "GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderViewport(SDL_Renderer* renderer, Rect* rect) =>
            T.GetRenderViewport(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderViewport(Ref<SDL_Renderer> renderer, Ref<Rect> rect) =>
            T.GetRenderViewport(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderVSync(SDL_Renderer* renderer, int* vsync) =>
            T.GetRenderVSync(renderer, vsync);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetRenderVSync(Ref<SDL_Renderer> renderer, Ref<int> vsync) =>
            T.GetRenderVSync(renderer, vsync);

        [NativeFunction("SDL3", EntryPoint = "GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GetRenderWindow(SDL_Renderer* renderer) => T.GetRenderWindow(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GetRenderWindow(Ref<SDL_Renderer> renderer) =>
            T.GetRenderWindow(renderer);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetRevision() => T.GetRevision();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetRevisionRaw() => T.GetRevisionRaw();

        [NativeFunction("SDL3", EntryPoint = "GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => T.GetRGB(pixel, format, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        ) => T.GetRGB(pixel, format, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "GetRgba")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => T.GetRgba(pixel, format, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        ) => T.GetRgba(pixel, format, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromKey([NativeTypeName("SDL_Keycode")] int key) =>
            T.GetScancodeFromKey(key);

        [NativeFunction("SDL3", EntryPoint = "GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
            T.GetScancodeFromName(name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.GetScancodeFromName(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetScancodeName(Scancode scancode) => T.GetScancodeName(scancode);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetScancodeNameRaw(Scancode scancode) => T.GetScancodeNameRaw(scancode);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSemaphoreValue(SDL_Semaphore* sem) => T.GetSemaphoreValue(sem);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSemaphoreValue(Ref<SDL_Semaphore> sem) => T.GetSemaphoreValue(sem);

        [NativeFunction("SDL3", EntryPoint = "GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorData(SDL_Sensor* sensor, float* data, int num_values) =>
            T.GetSensorData(sensor, data, num_values);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorData(Ref<SDL_Sensor> sensor, Ref<float> data, int num_values) =>
            T.GetSensorData(sensor, data, num_values);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Sensor> GetSensorFromInstanceID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => T.GetSensorFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Sensor* GetSensorFromInstanceIDRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => T.GetSensorFromInstanceIDRaw(instance_id);

        [return: NativeTypeName("SDL_SensorID")]
        [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSensorInstanceID(SDL_Sensor* sensor) => T.GetSensorInstanceID(sensor);

        [return: NativeTypeName("SDL_SensorID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSensorInstanceID(Ref<SDL_Sensor> sensor) => T.GetSensorInstanceID(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetSensorInstanceName(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => T.GetSensorInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetSensorInstanceNameRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.GetSensorInstanceNameRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorInstanceNonPortableType(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => T.GetSensorInstanceNonPortableType(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorType GetSensorInstanceType(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => T.GetSensorInstanceType(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetSensorName(SDL_Sensor* sensor) => T.GetSensorName(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetSensorName(Ref<SDL_Sensor> sensor) => T.GetSensorName(sensor);

        [NativeFunction("SDL3", EntryPoint = "GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorNonPortableType(SDL_Sensor* sensor) =>
            T.GetSensorNonPortableType(sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSensorNonPortableType(Ref<SDL_Sensor> sensor) =>
            T.GetSensorNonPortableType(sensor);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSensorProperties(SDL_Sensor* sensor) => T.GetSensorProperties(sensor);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSensorProperties(Ref<SDL_Sensor> sensor) => T.GetSensorProperties(sensor);

        [return: NativeTypeName("SDL_SensorID *")]
        [NativeFunction("SDL3", EntryPoint = "GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint* GetSensors(int* count) => T.GetSensors(count);

        [return: NativeTypeName("SDL_SensorID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<uint> GetSensors(Ref<int> count) => T.GetSensors(count);

        [NativeFunction("SDL3", EntryPoint = "GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorType GetSensorType(SDL_Sensor* sensor) => T.GetSensorType(sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SensorType GetSensorType(Ref<SDL_Sensor> sensor) => T.GetSensorType(sensor);

        [NativeFunction("SDL3", EntryPoint = "GetSilenceValueForFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSilenceValueForFormat([NativeTypeName("SDL_AudioFormat")] ushort format) =>
            T.GetSilenceValueForFormat(format);

        [NativeFunction("SDL3", EntryPoint = "GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetStorageFileSize(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("Uint64 *")] ulong* length
        ) => T.GetStorageFileSize(storage, path, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetStorageFileSize(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("Uint64 *")] Ref<ulong> length
        ) => T.GetStorageFileSize(storage, path, length);

        [NativeFunction("SDL3", EntryPoint = "GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetStoragePathInfo(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        ) => T.GetStoragePathInfo(storage, path, info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetStoragePathInfo(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        ) => T.GetStoragePathInfo(storage, path, info);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetStorageSpaceRemaining(SDL_Storage* storage) =>
            T.GetStorageSpaceRemaining(storage);

        [return: NativeTypeName("Uint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetStorageSpaceRemaining(Ref<SDL_Storage> storage) =>
            T.GetStorageSpaceRemaining(storage);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* default_value
        ) => T.GetStringProperty(props, name, default_value);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> default_value
        ) => T.GetStringProperty(props, name, default_value);

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8 *")] byte* alpha) =>
            T.GetSurfaceAlphaMod(surface, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        ) => T.GetSurfaceAlphaMod(surface, alpha);

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceBlendMode(Surface* surface, BlendMode* blendMode) =>
            T.GetSurfaceBlendMode(surface, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceBlendMode(Ref<Surface> surface, Ref<BlendMode> blendMode) =>
            T.GetSurfaceBlendMode(surface, blendMode);

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceClipRect(Surface* surface, Rect* rect) =>
            T.GetSurfaceClipRect(surface, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect) =>
            T.GetSurfaceClipRect(surface, rect);

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceColorKey(Surface* surface, [NativeTypeName("Uint32 *")] uint* key) =>
            T.GetSurfaceColorKey(surface, key);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("Uint32 *")] Ref<uint> key
        ) => T.GetSurfaceColorKey(surface, key);

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => T.GetSurfaceColorMod(surface, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        ) => T.GetSurfaceColorMod(surface, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceColorspace(Surface* surface, Colorspace* colorspace) =>
            T.GetSurfaceColorspace(surface, colorspace);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSurfaceColorspace(Ref<Surface> surface, Ref<Colorspace> colorspace) =>
            T.GetSurfaceColorspace(surface, colorspace);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSurfaceProperties(Surface* surface) => T.GetSurfaceProperties(surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetSurfaceProperties(Ref<Surface> surface) => T.GetSurfaceProperties(surface);

        [NativeFunction("SDL3", EntryPoint = "GetSystemRAM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetSystemRAM() => T.GetSystemRAM();

        [NativeFunction("SDL3", EntryPoint = "GetSystemTheme")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SystemTheme GetSystemTheme() => T.GetSystemTheme();

        [NativeFunction("SDL3", EntryPoint = "GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureAlphaMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8 *")] byte* alpha
        ) => T.GetTextureAlphaMod(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureAlphaMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        ) => T.GetTextureAlphaMod(texture, alpha);

        [NativeFunction("SDL3", EntryPoint = "GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha) =>
            T.GetTextureAlphaModFloat(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureAlphaModFloat(Ref<SDL_Texture> texture, Ref<float> alpha) =>
            T.GetTextureAlphaModFloat(texture, alpha);

        [NativeFunction("SDL3", EntryPoint = "GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureBlendMode(SDL_Texture* texture, BlendMode* blendMode) =>
            T.GetTextureBlendMode(texture, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureBlendMode(Ref<SDL_Texture> texture, Ref<BlendMode> blendMode) =>
            T.GetTextureBlendMode(texture, blendMode);

        [NativeFunction("SDL3", EntryPoint = "GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureColorMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => T.GetTextureColorMod(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureColorMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        ) => T.GetTextureColorMod(texture, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureColorModFloat(SDL_Texture* texture, float* r, float* g, float* b) =>
            T.GetTextureColorModFloat(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureColorModFloat(
            Ref<SDL_Texture> texture,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b
        ) => T.GetTextureColorModFloat(texture, r, g, b);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetTextureProperties(SDL_Texture* texture) => T.GetTextureProperties(texture);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetTextureProperties(Ref<SDL_Texture> texture) =>
            T.GetTextureProperties(texture);

        [NativeFunction("SDL3", EntryPoint = "GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureScaleMode(SDL_Texture* texture, ScaleMode* scaleMode) =>
            T.GetTextureScaleMode(texture, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetTextureScaleMode(Ref<SDL_Texture> texture, Ref<ScaleMode> scaleMode) =>
            T.GetTextureScaleMode(texture, scaleMode);

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetThreadID(SDL_Thread* thread) => T.GetThreadID(thread);

        [return: NativeTypeName("SDL_ThreadID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetThreadID(Ref<SDL_Thread> thread) => T.GetThreadID(thread);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetThreadName(SDL_Thread* thread) => T.GetThreadName(thread);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetThreadName(Ref<SDL_Thread> thread) => T.GetThreadName(thread);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetTicks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetTicks() => T.GetTicks();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetTicksNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong GetTicksNS() => T.GetTicksNS();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetTLS([NativeTypeName("SDL_TLSID")] uint id) => T.GetTLS(id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetTLSRaw([NativeTypeName("SDL_TLSID")] uint id) => T.GetTLSRaw(id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetTouchDeviceName([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            T.GetTouchDeviceName(touchID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            T.GetTouchDeviceNameRaw(touchID);

        [return: NativeTypeName("SDL_TouchID *")]
        [NativeFunction("SDL3", EntryPoint = "GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public ulong* GetTouchDevices(int* count) => T.GetTouchDevices(count);

        [return: NativeTypeName("SDL_TouchID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<ulong> GetTouchDevices(Ref<int> count) => T.GetTouchDevices(count);

        [NativeFunction("SDL3", EntryPoint = "GetTouchDeviceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public TouchDeviceType GetTouchDeviceType([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            T.GetTouchDeviceType(touchID);

        [NativeFunction("SDL3", EntryPoint = "GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Finger** GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            int* count
        ) => T.GetTouchFingers(touchID, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<Finger> GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            Ref<int> count
        ) => T.GetTouchFingers(touchID, count);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetUserFolder(Folder folder) => T.GetUserFolder(folder);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetUserFolderRaw(Folder folder) => T.GetUserFolderRaw(folder);

        [NativeFunction("SDL3", EntryPoint = "GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetVersion(Version* ver) => T.GetVersion(ver);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetVersion(Ref<Version> ver) => T.GetVersion(ver);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetVideoDriver(int index) => T.GetVideoDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetVideoDriverRaw(int index) => T.GetVideoDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowBordersSize(
            SDL_Window* window,
            int* top,
            int* left,
            int* bottom,
            int* right
        ) => T.GetWindowBordersSize(window, top, left, bottom, right);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowBordersSize(
            Ref<SDL_Window> window,
            Ref<int> top,
            Ref<int> left,
            Ref<int> bottom,
            Ref<int> right
        ) => T.GetWindowBordersSize(window, top, left, bottom, right);

        [NativeFunction("SDL3", EntryPoint = "GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowDisplayScale(SDL_Window* window) => T.GetWindowDisplayScale(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowDisplayScale(Ref<SDL_Window> window) =>
            T.GetWindowDisplayScale(window);

        [return: NativeTypeName("SDL_WindowFlags")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowFlags(SDL_Window* window) => T.GetWindowFlags(window);

        [return: NativeTypeName("SDL_WindowFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowFlags(Ref<SDL_Window> window) => T.GetWindowFlags(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
            T.GetWindowFromID(id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GetWindowFromIDRaw([NativeTypeName("SDL_WindowID")] uint id) =>
            T.GetWindowFromIDRaw(id);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public DisplayMode* GetWindowFullscreenMode(SDL_Window* window) =>
            T.GetWindowFullscreenMode(window);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<DisplayMode> GetWindowFullscreenMode(Ref<SDL_Window> window) =>
            T.GetWindowFullscreenMode(window);

        [NativeFunction("SDL3", EntryPoint = "GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GetWindowICCProfile(
            SDL_Window* window,
            [NativeTypeName("size_t *")] nuint* size
        ) => T.GetWindowICCProfile(window, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GetWindowICCProfile(
            Ref<SDL_Window> window,
            [NativeTypeName("size_t *")] Ref<nuint> size
        ) => T.GetWindowICCProfile(window, size);

        [return: NativeTypeName("SDL_WindowID")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowID(SDL_Window* window) => T.GetWindowID(window);

        [return: NativeTypeName("SDL_WindowID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowID(Ref<SDL_Window> window) => T.GetWindowID(window);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowKeyboardGrab(SDL_Window* window) => T.GetWindowKeyboardGrab(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetWindowKeyboardGrab(Ref<SDL_Window> window) =>
            T.GetWindowKeyboardGrab(window);

        [NativeFunction("SDL3", EntryPoint = "GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowMaximumSize(SDL_Window* window, int* w, int* h) =>
            T.GetWindowMaximumSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowMaximumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
            T.GetWindowMaximumSize(window, w, h);

        [NativeFunction("SDL3", EntryPoint = "GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowMinimumSize(SDL_Window* window, int* w, int* h) =>
            T.GetWindowMinimumSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowMinimumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
            T.GetWindowMinimumSize(window, w, h);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowMouseGrab(SDL_Window* window) => T.GetWindowMouseGrab(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GetWindowMouseGrab(Ref<SDL_Window> window) =>
            T.GetWindowMouseGrab(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Rect* GetWindowMouseRect(SDL_Window* window) => T.GetWindowMouseRect(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Rect> GetWindowMouseRect(Ref<SDL_Window> window) => T.GetWindowMouseRect(window);

        [NativeFunction("SDL3", EntryPoint = "GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowOpacity(SDL_Window* window, float* out_opacity) =>
            T.GetWindowOpacity(window, out_opacity);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowOpacity(Ref<SDL_Window> window, Ref<float> out_opacity) =>
            T.GetWindowOpacity(window, out_opacity);

        [NativeFunction("SDL3", EntryPoint = "GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GetWindowParent(SDL_Window* window) => T.GetWindowParent(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GetWindowParent(Ref<SDL_Window> window) => T.GetWindowParent(window);

        [NativeFunction("SDL3", EntryPoint = "GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowPixelDensity(SDL_Window* window) => T.GetWindowPixelDensity(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public float GetWindowPixelDensity(Ref<SDL_Window> window) =>
            T.GetWindowPixelDensity(window);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowPixelFormat(SDL_Window* window) => T.GetWindowPixelFormat(window);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowPixelFormat(Ref<SDL_Window> window) => T.GetWindowPixelFormat(window);

        [NativeFunction("SDL3", EntryPoint = "GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowPosition(SDL_Window* window, int* x, int* y) =>
            T.GetWindowPosition(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowPosition(Ref<SDL_Window> window, Ref<int> x, Ref<int> y) =>
            T.GetWindowPosition(window, x, y);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowProperties(SDL_Window* window) => T.GetWindowProperties(window);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint GetWindowProperties(Ref<SDL_Window> window) => T.GetWindowProperties(window);

        [NativeFunction("SDL3", EntryPoint = "GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowSize(SDL_Window* window, int* w, int* h) =>
            T.GetWindowSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
            T.GetWindowSize(window, w, h);

        [NativeFunction("SDL3", EntryPoint = "GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowSizeInPixels(SDL_Window* window, int* w, int* h) =>
            T.GetWindowSizeInPixels(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GetWindowSizeInPixels(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
            T.GetWindowSizeInPixels(window, w, h);

        [NativeFunction("SDL3", EntryPoint = "GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* GetWindowSurface(SDL_Window* window) => T.GetWindowSurface(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> GetWindowSurface(Ref<SDL_Window> window) => T.GetWindowSurface(window);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte* GetWindowTitle(SDL_Window* window) => T.GetWindowTitle(window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<sbyte> GetWindowTitle(Ref<SDL_Window> window) => T.GetWindowTitle(window);

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "GLCreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GLCreateContext(SDL_Window* window) => T.GLCreateContext(window);

        [return: NativeTypeName("SDL_GLContext")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GLCreateContext(Ref<SDL_Window> window) => T.GLCreateContext(window);

        [NativeFunction("SDL3", EntryPoint = "GLDeleteContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLDeleteContext([NativeTypeName("SDL_GLContext")] void* context) =>
            T.GLDeleteContext(context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DeleteContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLDeleteContext([NativeTypeName("SDL_GLContext")] Ref context) =>
            T.GLDeleteContext(context);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GLExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
            T.GLExtensionSupported(extension);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> GLExtensionSupported(
            [NativeTypeName("const char *")] Ref<sbyte> extension
        ) => T.GLExtensionSupported(extension);

        [NativeFunction("SDL3", EntryPoint = "GLGetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLGetAttribute(GLattr attr, int* value) => T.GLGetAttribute(attr, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLGetAttribute(GLattr attr, Ref<int> value) => T.GLGetAttribute(attr, value);

        [return: NativeTypeName("SDL_GLContext")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr GLGetCurrentContext() => T.GLGetCurrentContext();

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* GLGetCurrentContextRaw() => T.GLGetCurrentContextRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Window> GLGetCurrentWindow() => T.GLGetCurrentWindow();

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Window* GLGetCurrentWindowRaw() => T.GLGetCurrentWindowRaw();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "GLGetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<void> GLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        ) => T.GLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<void> GLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        ) => T.GLGetProcAddress(proc);

        [NativeFunction("SDL3", EntryPoint = "GLGetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLGetSwapInterval(int* interval) => T.GLGetSwapInterval(interval);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLGetSwapInterval(Ref<int> interval) => T.GLGetSwapInterval(interval);

        [NativeFunction("SDL3", EntryPoint = "GLLoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
            T.GLLoadLibrary(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.GLLoadLibrary(path);

        [NativeFunction("SDL3", EntryPoint = "GLMakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLMakeCurrent(
            SDL_Window* window,
            [NativeTypeName("SDL_GLContext")] void* context
        ) => T.GLMakeCurrent(window, context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLMakeCurrent(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_GLContext")] Ref context
        ) => T.GLMakeCurrent(window, context);

        [NativeFunction("SDL3", EntryPoint = "GLResetAttributes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GLResetAttributes() => T.GLResetAttributes();

        [NativeFunction("SDL3", EntryPoint = "GLSetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLSetAttribute(GLattr attr, int value) => T.GLSetAttribute(attr, value);

        [NativeFunction("SDL3", EntryPoint = "GLSetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLSetSwapInterval(int interval) => T.GLSetSwapInterval(interval);

        [NativeFunction("SDL3", EntryPoint = "GLSwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLSwapWindow(SDL_Window* window) => T.GLSwapWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GLSwapWindow(Ref<SDL_Window> window) => T.GLSwapWindow(window);

        [NativeFunction("SDL3", EntryPoint = "GLUnloadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void GLUnloadLibrary() => T.GLUnloadLibrary();

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GlobDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("Uint32")] uint flags,
            int* count
        ) => T.GlobDirectory(path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GlobDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("Uint32")] uint flags,
            Ref<int> count
        ) => T.GlobDirectory(path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public sbyte** GlobStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("Uint32")] uint flags,
            int* count
        ) => T.GlobStorageDirectory(storage, path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr2D<sbyte> GlobStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("Uint32")] uint flags,
            Ref<int> count
        ) => T.GlobStorageDirectory(storage, path, pattern, flags, count);

        [NativeFunction("SDL3", EntryPoint = "GuidFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
            T.GuidFromString(pchGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Guid GuidFromString([NativeTypeName("const char *")] Ref<sbyte> pchGUID) =>
            T.GuidFromString(pchGUID);

        [NativeFunction("SDL3", EntryPoint = "GuidToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GuidToString(Guid guid, [NativeTypeName("char *")] sbyte* pszGUID, int cbGUID) =>
            T.GuidToString(guid, pszGUID, cbGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int GuidToString(
            Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        ) => T.GuidToString(guid, pszGUID, cbGUID);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HapticEffectSupported(
            SDL_Haptic* haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => T.HapticEffectSupported(haptic, effect);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HapticEffectSupported(
            Ref<SDL_Haptic> haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        ) => T.HapticEffectSupported(haptic, effect);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HapticRumbleSupported(SDL_Haptic* haptic) => T.HapticRumbleSupported(haptic);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HapticRumbleSupported(Ref<SDL_Haptic> haptic) =>
            T.HapticRumbleSupported(haptic);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasAltiVec() => T.HasAltiVec();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasAltiVecRaw() => T.HasAltiVecRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasArmsimd() => T.HasArmsimd();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasArmsimdRaw() => T.HasArmsimdRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasAVX() => T.HasAVX();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasAVX2() => T.HasAVX2();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasAVX2Raw() => T.HasAVX2Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasAVX512F() => T.HasAVX512F();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasAVX512FRaw() => T.HasAVX512FRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasAVXRaw() => T.HasAVXRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
            T.HasClipboardData(mime_type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type
        ) => T.HasClipboardData(mime_type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasClipboardText() => T.HasClipboardText();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasClipboardTextRaw() => T.HasClipboardTextRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasEvent([NativeTypeName("Uint32")] uint type) => T.HasEvent(type);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasEventRaw([NativeTypeName("Uint32")] uint type) => T.HasEventRaw(type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.HasEvents(minType, maxType);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasEventsRaw(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.HasEventsRaw(minType, maxType);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasGamepad() => T.HasGamepad();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasGamepadRaw() => T.HasGamepadRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasJoystick() => T.HasJoystick();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasJoystickRaw() => T.HasJoystickRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasKeyboard() => T.HasKeyboard();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasKeyboardRaw() => T.HasKeyboardRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasLasx() => T.HasLasx();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasLasxRaw() => T.HasLasxRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasLSX() => T.HasLSX();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasLSXRaw() => T.HasLSXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasMMX() => T.HasMMX();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasMMXRaw() => T.HasMMXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasMouse() => T.HasMouse();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasMouseRaw() => T.HasMouseRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasNeon() => T.HasNeon();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasNeonRaw() => T.HasNeonRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasPrimarySelectionText() => T.HasPrimarySelectionText();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasPrimarySelectionTextRaw() => T.HasPrimarySelectionTextRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.HasProperty(props, name);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.HasProperty(props, name);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B
        ) => T.HasRectIntersection(A, B);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
        ) => T.HasRectIntersection(A, B);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B
        ) => T.HasRectIntersectionFloat(A, B);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
        ) => T.HasRectIntersectionFloat(A, B);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasScreenKeyboardSupport() => T.HasScreenKeyboardSupport();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasScreenKeyboardSupportRaw() => T.HasScreenKeyboardSupportRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasSSE() => T.HasSSE();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasSSE2() => T.HasSSE2();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasSSE2Raw() => T.HasSSE2Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasSSE3() => T.HasSSE3();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasSSE3Raw() => T.HasSSE3Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasSSE41() => T.HasSSE41();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasSSE41Raw() => T.HasSSE41Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> HasSSE42() => T.HasSSE42();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasSSE42Raw() => T.HasSSE42Raw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HasSSERaw() => T.HasSSERaw();

        [NativeFunction("SDL3", EntryPoint = "HidBleScan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidBleScan([NativeTypeName("SDL_bool")] int active) => T.HidBleScan(active);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidBleScan([NativeTypeName("SDL_bool")] MaybeBool<int> active) =>
            T.HidBleScan(active);

        [NativeFunction("SDL3", EntryPoint = "HidClose")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidClose(SDL_hid_device* dev) => T.HidClose(dev);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidClose(Ref<SDL_hid_device> dev) => T.HidClose(dev);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "HidDeviceChangeCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint HidDeviceChangeCount() => T.HidDeviceChangeCount();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<HidDeviceInfo> HidEnumerate(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => T.HidEnumerate(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceInfo* HidEnumerateRaw(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => T.HidEnumerateRaw(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "HidExit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidExit() => T.HidExit();

        [NativeFunction("SDL3", EntryPoint = "HidFreeEnumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidFreeEnumeration(HidDeviceInfo* devs) => T.HidFreeEnumeration(devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void HidFreeEnumeration(Ref<HidDeviceInfo> devs) => T.HidFreeEnumeration(devs);

        [NativeFunction("SDL3", EntryPoint = "HidGetDeviceInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public HidDeviceInfo* HidGetDeviceInfo(SDL_hid_device* dev) => T.HidGetDeviceInfo(dev);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<HidDeviceInfo> HidGetDeviceInfo(Ref<SDL_hid_device> dev) =>
            T.HidGetDeviceInfo(dev);

        [NativeFunction("SDL3", EntryPoint = "HidGetFeatureReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetFeatureReport(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetFeatureReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetFeatureReport(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "HidGetIndexedString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetIndexedString(
            SDL_hid_device* dev,
            int string_index,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetIndexedString(dev, string_index, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetIndexedString(
            Ref<SDL_hid_device> dev,
            int string_index,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetIndexedString(dev, string_index, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "HidGetInputReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetInputReport(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetInputReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetInputReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidGetInputReport(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "HidGetManufacturerString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetManufacturerString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetManufacturerString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetManufacturerString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetManufacturerString(dev, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "HidGetProductString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetProductString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetProductString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetProductString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetProductString(dev, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "HidGetReportDescriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetReportDescriptor(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* buf,
            [NativeTypeName("size_t")] nuint buf_size
        ) => T.HidGetReportDescriptor(dev, buf, buf_size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetReportDescriptor(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> buf,
            [NativeTypeName("size_t")] nuint buf_size
        ) => T.HidGetReportDescriptor(dev, buf, buf_size);

        [NativeFunction("SDL3", EntryPoint = "HidGetSerialNumberString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetSerialNumberString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetSerialNumberString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidGetSerialNumberString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => T.HidGetSerialNumberString(dev, @string, maxlen);

        [NativeFunction("SDL3", EntryPoint = "HidInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidInit() => T.HidInit();

        [NativeFunction("SDL3", EntryPoint = "HidOpen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_hid_device* HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] uint* serial_number
        ) => T.HidOpen(vendor_id, product_id, serial_number);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_hid_device> HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
        ) => T.HidOpen(vendor_id, product_id, serial_number);

        [NativeFunction("SDL3", EntryPoint = "HidOpenPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_hid_device* HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
            T.HidOpenPath(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_hid_device> HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.HidOpenPath(path);

        [NativeFunction("SDL3", EntryPoint = "HidRead")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidRead(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidRead(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidRead(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidRead(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "HidReadTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidReadTimeout(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        ) => T.HidReadTimeout(dev, data, length, milliseconds);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidReadTimeout(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        ) => T.HidReadTimeout(dev, data, length, milliseconds);

        [NativeFunction("SDL3", EntryPoint = "HidSendFeatureReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSendFeatureReport(
            SDL_hid_device* dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidSendFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSendFeatureReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidSendFeatureReport(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "HidSetNonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSetNonblocking(SDL_hid_device* dev, int nonblock) =>
            T.HidSetNonblocking(dev, nonblock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidSetNonblocking(Ref<SDL_hid_device> dev, int nonblock) =>
            T.HidSetNonblocking(dev, nonblock);

        [NativeFunction("SDL3", EntryPoint = "HidWrite")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidWrite(
            SDL_hid_device* dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidWrite(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HidWrite(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        ) => T.HidWrite(dev, data, length);

        [NativeFunction("SDL3", EntryPoint = "HideCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HideCursor() => T.HideCursor();

        [NativeFunction("SDL3", EntryPoint = "HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HideWindow(SDL_Window* window) => T.HideWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int HideWindow(Ref<SDL_Window> window) => T.HideWindow(window);

        [NativeFunction("SDL3", EntryPoint = "Init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int Init([NativeTypeName("Uint32")] uint flags) => T.Init(flags);

        [NativeFunction("SDL3", EntryPoint = "InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int InitHapticRumble(SDL_Haptic* haptic) => T.InitHapticRumble(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int InitHapticRumble(Ref<SDL_Haptic> haptic) => T.InitHapticRumble(haptic);

        [NativeFunction("SDL3", EntryPoint = "InitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int InitSubSystem([NativeTypeName("Uint32")] uint flags) => T.InitSubSystem(flags);

        [NativeFunction("SDL3", EntryPoint = "IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_IOStream* IOFromConstMem(
            [NativeTypeName("const void *")] void* mem,
            [NativeTypeName("size_t")] nuint size
        ) => T.IOFromConstMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_IOStream> IOFromConstMem(
            [NativeTypeName("const void *")] Ref mem,
            [NativeTypeName("size_t")] nuint size
        ) => T.IOFromConstMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_IOStream> IOFromDynamicMem() => T.IOFromDynamicMem();

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_IOStream* IOFromDynamicMemRaw() => T.IOFromDynamicMemRaw();

        [NativeFunction("SDL3", EntryPoint = "IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_IOStream* IOFromFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("const char *")] sbyte* mode
        ) => T.IOFromFile(file, mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_IOStream> IOFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("const char *")] Ref<sbyte> mode
        ) => T.IOFromFile(file, mode);

        [NativeFunction("SDL3", EntryPoint = "IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_IOStream* IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
            T.IOFromMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_IOStream> IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size) =>
            T.IOFromMem(mem, size);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint IOvprintf(
            SDL_IOStream* context,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => T.IOvprintf(context, fmt, ap);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint IOvprintf(
            Ref<SDL_IOStream> context,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        ) => T.IOvprintf(context, fmt, ap);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> IsGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.IsGamepad(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.IsGamepadRaw(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int IsJoystickHaptic(SDL_Joystick* joystick) => T.IsJoystickHaptic(joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> IsJoystickHaptic(Ref<SDL_Joystick> joystick) =>
            T.IsJoystickHaptic(joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> IsJoystickVirtual(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.IsJoystickVirtual(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int IsJoystickVirtualRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.IsJoystickVirtualRaw(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> IsMouseHaptic() => T.IsMouseHaptic();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int IsMouseHapticRaw() => T.IsMouseHapticRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> IsTablet() => T.IsTablet();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int IsTabletRaw() => T.IsTabletRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int JoystickConnected(SDL_Joystick* joystick) => T.JoystickConnected(joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> JoystickConnected(Ref<SDL_Joystick> joystick) =>
            T.JoystickConnected(joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> JoystickEventsEnabled() => T.JoystickEventsEnabled();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int JoystickEventsEnabledRaw() => T.JoystickEventsEnabledRaw();

        [NativeFunction("SDL3", EntryPoint = "LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file) => T.LoadBMP(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file) =>
            T.LoadBMP(file);

        [NativeFunction("SDL3", EntryPoint = "LoadBMPIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* LoadBMPIO(SDL_IOStream* src, [NativeTypeName("SDL_bool")] int closeio) =>
            T.LoadBMPIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> LoadBMPIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        ) => T.LoadBMPIO(src, closeio);

        [NativeFunction("SDL3", EntryPoint = "LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* LoadFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("size_t *")] nuint* datasize
        ) => T.LoadFile(file, datasize);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr LoadFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("size_t *")] Ref<nuint> datasize
        ) => T.LoadFile(file, datasize);

        [NativeFunction("SDL3", EntryPoint = "LoadFileIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* LoadFileIO(
            SDL_IOStream* src,
            [NativeTypeName("size_t *")] nuint* datasize,
            [NativeTypeName("SDL_bool")] int closeio
        ) => T.LoadFileIO(src, datasize, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr LoadFileIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("size_t *")] Ref<nuint> datasize,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        ) => T.LoadFileIO(src, datasize, closeio);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<void> LoadFunction(
            void* handle,
            [NativeTypeName("const char *")] sbyte* name
        ) => T.LoadFunction(handle, name);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public delegate* unmanaged<void> LoadFunction(
            Ref handle,
            [NativeTypeName("const char *")] Ref<sbyte> name
        ) => T.LoadFunction(handle, name);

        [NativeFunction("SDL3", EntryPoint = "LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
            T.LoadObject(sofile);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile) =>
            T.LoadObject(sofile);

        [NativeFunction("SDL3", EntryPoint = "LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LoadWAV(
            [NativeTypeName("const char *")] sbyte* path,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => T.LoadWAV(path, spec, audio_buf, audio_len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LoadWAV(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        ) => T.LoadWAV(path, spec, audio_buf, audio_len);

        [NativeFunction("SDL3", EntryPoint = "LoadWAVIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LoadWAVIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => T.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LoadWAVIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        ) => T.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

        [NativeFunction("SDL3", EntryPoint = "LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockAudioStream(SDL_AudioStream* stream) => T.LockAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockAudioStream(Ref<SDL_AudioStream> stream) => T.LockAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "LockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockJoysticks() => T.LockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockMutex(SDL_Mutex* mutex) => T.LockMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockMutex(Ref<SDL_Mutex> mutex) => T.LockMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "LockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.LockProperties(props);

        [NativeFunction("SDL3", EntryPoint = "LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockRWLockForReading(SDL_RWLock* rwlock) => T.LockRWLockForReading(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockRWLockForReading(Ref<SDL_RWLock> rwlock) => T.LockRWLockForReading(rwlock);

        [NativeFunction("SDL3", EntryPoint = "LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockRWLockForWriting(SDL_RWLock* rwlock) => T.LockRWLockForWriting(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockRWLockForWriting(Ref<SDL_RWLock> rwlock) => T.LockRWLockForWriting(rwlock);

        [NativeFunction("SDL3", EntryPoint = "LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            T.LockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
            T.LockSpinlock(@lock);

        [NativeFunction("SDL3", EntryPoint = "LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockSurface(Surface* surface) => T.LockSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockSurface(Ref<Surface> surface) => T.LockSurface(surface);

        [NativeFunction("SDL3", EntryPoint = "LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            void** pixels,
            int* pitch
        ) => T.LockTexture(texture, rect, pixels, pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D pixels,
            Ref<int> pitch
        ) => T.LockTexture(texture, rect, pixels, pitch);

        [NativeFunction("SDL3", EntryPoint = "LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockTextureToSurface(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            Surface** surface
        ) => T.LockTextureToSurface(texture, rect, surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int LockTextureToSurface(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D<Surface> surface
        ) => T.LockTextureToSurface(texture, rect, surface);

        [NativeFunction("SDL3", EntryPoint = "LogGetPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public LogPriority LogGetPriority(int category) => T.LogGetPriority(category);

        [NativeFunction("SDL3", EntryPoint = "LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => T.LogMessageV(category, priority, fmt, ap);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        ) => T.LogMessageV(category, priority, fmt, ap);

        [NativeFunction("SDL3", EntryPoint = "LogResetPriorities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogResetPriorities() => T.LogResetPriorities();

        [NativeFunction("SDL3", EntryPoint = "LogSetAllPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogSetAllPriority(LogPriority priority) => T.LogSetAllPriority(priority);

        [NativeFunction("SDL3", EntryPoint = "LogSetPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void LogSetPriority(int category, LogPriority priority) =>
            T.LogSetPriority(category, priority);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRGB(
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.MapRGB(format, r, g, b);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRGB(
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.MapRGB(format, r, g, b);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "MapRgba")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRgba(
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.MapRgba(format, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint MapRgba(
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.MapRgba(format, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int MaximizeWindow(SDL_Window* window) => T.MaximizeWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int MaximizeWindow(Ref<SDL_Window> window) => T.MaximizeWindow(window);

        [NativeFunction("SDL3", EntryPoint = "MemoryBarrierAcquireFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MemoryBarrierAcquireFunction() => T.MemoryBarrierAcquireFunction();

        [NativeFunction("SDL3", EntryPoint = "MemoryBarrierReleaseFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MemoryBarrierReleaseFunction() => T.MemoryBarrierReleaseFunction();

        [return: NativeTypeName("SDL_MetalView")]
        [NativeFunction("SDL3", EntryPoint = "MetalCreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* MetalCreateView(SDL_Window* window) => T.MetalCreateView(window);

        [return: NativeTypeName("SDL_MetalView")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr MetalCreateView(Ref<SDL_Window> window) => T.MetalCreateView(window);

        [NativeFunction("SDL3", EntryPoint = "MetalDestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
            T.MetalDestroyView(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view) =>
            T.MetalDestroyView(view);

        [NativeFunction("SDL3", EntryPoint = "MetalGetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
            T.MetalGetLayer(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view) =>
            T.MetalGetLayer(view);

        [NativeFunction("SDL3", EntryPoint = "MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int MinimizeWindow(SDL_Window* window) => T.MinimizeWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int MinimizeWindow(Ref<SDL_Window> window) => T.MinimizeWindow(window);

        [NativeFunction("SDL3", EntryPoint = "MixAudioFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int MixAudioFormat(
            [NativeTypeName("Uint8 *")] byte* dst,
            [NativeTypeName("const Uint8 *")] byte* src,
            [NativeTypeName("SDL_AudioFormat")] ushort format,
            [NativeTypeName("Uint32")] uint len,
            int volume
        ) => T.MixAudioFormat(dst, src, format, len, volume);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudioFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int MixAudioFormat(
            [NativeTypeName("Uint8 *")] Ref<byte> dst,
            [NativeTypeName("const Uint8 *")] Ref<byte> src,
            [NativeTypeName("SDL_AudioFormat")] ushort format,
            [NativeTypeName("Uint32")] uint len,
            int volume
        ) => T.MixAudioFormat(dst, src, format, len, volume);

        [NativeFunction("SDL3", EntryPoint = "OnApplicationDidBecomeActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationDidBecomeActive() => T.OnApplicationDidBecomeActive();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationDidEnterBackground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationDidEnterBackground() => T.OnApplicationDidEnterBackground();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationDidReceiveMemoryWarning")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationDidReceiveMemoryWarning() =>
            T.OnApplicationDidReceiveMemoryWarning();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationWillEnterForeground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationWillEnterForeground() => T.OnApplicationWillEnterForeground();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationWillResignActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationWillResignActive() => T.OnApplicationWillResignActive();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationWillTerminate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void OnApplicationWillTerminate() => T.OnApplicationWillTerminate();

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
        ) => T.OpenAudioDevice(devid, spec);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
        ) => T.OpenAudioDevice(devid, spec);

        [NativeFunction("SDL3", EntryPoint = "OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_AudioStream* OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        ) => T.OpenAudioDeviceStream(devid, spec, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_AudioStream> OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        ) => T.OpenAudioDeviceStream(devid, spec, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "OpenCameraDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Camera* OpenCameraDevice(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
        ) => T.OpenCameraDevice(instance_id, spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCameraDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Camera> OpenCameraDevice(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
        ) => T.OpenCameraDevice(instance_id, spec);

        [NativeFunction("SDL3", EntryPoint = "OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Storage* OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
            T.OpenFileStorage(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Storage> OpenFileStorage([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.OpenFileStorage(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Gamepad> OpenGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.OpenGamepad(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Gamepad* OpenGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.OpenGamepadRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Haptic> OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.OpenHaptic(instance_id);

        [NativeFunction("SDL3", EntryPoint = "OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Haptic* OpenHapticFromJoystick(SDL_Joystick* joystick) =>
            T.OpenHapticFromJoystick(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Haptic> OpenHapticFromJoystick(Ref<SDL_Joystick> joystick) =>
            T.OpenHapticFromJoystick(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Haptic> OpenHapticFromMouse() => T.OpenHapticFromMouse();

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Haptic* OpenHapticFromMouseRaw() => T.OpenHapticFromMouseRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Haptic* OpenHapticRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
            T.OpenHapticRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_IOStream* OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
            void* userdata
        ) => T.OpenIO(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_IOStream> OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
            Ref userdata
        ) => T.OpenIO(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Joystick> OpenJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => T.OpenJoystick(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Joystick* OpenJoystickRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            T.OpenJoystickRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Sensor> OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.OpenSensor(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Sensor* OpenSensorRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
            T.OpenSensorRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Storage* OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
            void* userdata
        ) => T.OpenStorage(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Storage> OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
            Ref userdata
        ) => T.OpenStorage(iface, userdata);

        [NativeFunction("SDL3", EntryPoint = "OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Storage* OpenTitleStorage(
            [NativeTypeName("const char *")] sbyte* @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenTitleStorage(@override, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Storage> OpenTitleStorage(
            [NativeTypeName("const char *")] Ref<sbyte> @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenTitleStorage(@override, props);

        [NativeFunction("SDL3", EntryPoint = "OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int OpenURL([NativeTypeName("const char *")] sbyte* url) => T.OpenURL(url);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int OpenURL([NativeTypeName("const char *")] Ref<sbyte> url) => T.OpenURL(url);

        [NativeFunction("SDL3", EntryPoint = "OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public SDL_Storage* OpenUserStorage(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenUserStorage(org, app, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<SDL_Storage> OpenUserStorage(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => T.OpenUserStorage(org, app, props);

        [NativeFunction("SDL3", EntryPoint = "PauseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.PauseAudioDevice(dev);

        [NativeFunction("SDL3", EntryPoint = "PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PauseHaptic(SDL_Haptic* haptic) => T.PauseHaptic(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PauseHaptic(Ref<SDL_Haptic> haptic) => T.PauseHaptic(haptic);

        [NativeFunction("SDL3", EntryPoint = "PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PeepEvents(
            Event* events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.PeepEvents(events, numevents, action, minType, maxType);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PeepEvents(
            Ref<Event> events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => T.PeepEvents(events, numevents, action, minType, maxType);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> PenConnected([NativeTypeName("SDL_PenID")] uint instance_id) =>
            T.PenConnected(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PenConnectedRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
            T.PenConnectedRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PlayHapticRumble(
            SDL_Haptic* haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => T.PlayHapticRumble(haptic, strength, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PlayHapticRumble(
            Ref<SDL_Haptic> haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => T.PlayHapticRumble(haptic, strength, length);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PollEvent(Event* @event) => T.PollEvent(@event);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> PollEvent(Ref<Event> @event) => T.PollEvent(@event);

        [NativeFunction("SDL3", EntryPoint = "PostSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PostSemaphore(SDL_Semaphore* sem) => T.PostSemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PostSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PostSemaphore(Ref<SDL_Semaphore> sem) => T.PostSemaphore(sem);

        [NativeFunction("SDL3", EntryPoint = "PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PremultiplyAlpha(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            void* dst,
            int dst_pitch
        ) =>
            T.PremultiplyAlpha(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PremultiplyAlpha(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Ref dst,
            int dst_pitch
        ) =>
            T.PremultiplyAlpha(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch
            );

        [NativeFunction("SDL3", EntryPoint = "PumpEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void PumpEvents() => T.PumpEvents();

        [NativeFunction("SDL3", EntryPoint = "PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PushEvent(Event* @event) => T.PushEvent(@event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PushEvent(Ref<Event> @event) => T.PushEvent(@event);

        [NativeFunction("SDL3", EntryPoint = "PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PutAudioStreamData(
            SDL_AudioStream* stream,
            [NativeTypeName("const void *")] void* buf,
            int len
        ) => T.PutAudioStreamData(stream, buf, len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int PutAudioStreamData(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("const void *")] Ref buf,
            int len
        ) => T.PutAudioStreamData(stream, buf, len);

        [NativeFunction("SDL3", EntryPoint = "QueryTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int QueryTexture(
            SDL_Texture* texture,
            PixelFormatEnum* format,
            int* access,
            int* w,
            int* h
        ) => T.QueryTexture(texture, format, access, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_QueryTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int QueryTexture(
            Ref<SDL_Texture> texture,
            Ref<PixelFormatEnum> format,
            Ref<int> access,
            Ref<int> w,
            Ref<int> h
        ) => T.QueryTexture(texture, format, access, w, h);

        [NativeFunction("SDL3", EntryPoint = "Quit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void Quit() => T.Quit();

        [NativeFunction("SDL3", EntryPoint = "QuitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void QuitSubSystem([NativeTypeName("Uint32")] uint flags) => T.QuitSubSystem(flags);

        [NativeFunction("SDL3", EntryPoint = "RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RaiseWindow(SDL_Window* window) => T.RaiseWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RaiseWindow(Ref<SDL_Window> window) => T.RaiseWindow(window);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint ReadIO(
            SDL_IOStream* context,
            void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.ReadIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint ReadIO(
            Ref<SDL_IOStream> context,
            Ref ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.ReadIO(context, ptr, size);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadS16BE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
            T.ReadS16BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadS16BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        ) => T.ReadS16BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadS16LE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
            T.ReadS16LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadS16LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        ) => T.ReadS16LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadS32BE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
            T.ReadS32BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadS32BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        ) => T.ReadS32BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadS32LE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
            T.ReadS32LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadS32LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        ) => T.ReadS32LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadS64BE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
            T.ReadS64BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadS64BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        ) => T.ReadS64BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadS64LE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
            T.ReadS64LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadS64LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        ) => T.ReadS64LE(src, value);

        [NativeFunction("SDL3", EntryPoint = "ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadStorageFile(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            void* destination,
            [NativeTypeName("Uint64")] ulong length
        ) => T.ReadStorageFile(storage, path, destination, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadStorageFile(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref destination,
            [NativeTypeName("Uint64")] ulong length
        ) => T.ReadStorageFile(storage, path, destination, length);

        [NativeFunction("SDL3", EntryPoint = "ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => T.ReadSurfacePixel(surface, x, y, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        ) => T.ReadSurfacePixel(surface, x, y, r, g, b, a);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU16BE(SDL_IOStream* src, [NativeTypeName("Uint16 *")] ushort* value) =>
            T.ReadU16BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU16BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        ) => T.ReadU16BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU16LE(SDL_IOStream* src, [NativeTypeName("Uint16 *")] ushort* value) =>
            T.ReadU16LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU16LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        ) => T.ReadU16LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU32BE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
            T.ReadU32BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU32BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        ) => T.ReadU32BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU32LE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
            T.ReadU32LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU32LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        ) => T.ReadU32LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU64BE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
            T.ReadU64BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU64BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        ) => T.ReadU64BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU64LE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
            T.ReadU64LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU64LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        ) => T.ReadU64LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReadU8(SDL_IOStream* src, [NativeTypeName("Uint8 *")] byte* value) =>
            T.ReadU8(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ReadU8(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint8 *")] Ref<byte> value
        ) => T.ReadU8(src, value);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "RegisterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint RegisterEvents(int numevents) => T.RegisterEvents(numevents);

        [NativeFunction("SDL3", EntryPoint = "ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReleaseCameraFrame(SDL_Camera* camera, Surface* frame) =>
            T.ReleaseCameraFrame(camera, frame);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReleaseCameraFrame(Ref<SDL_Camera> camera, Ref<Surface> frame) =>
            T.ReleaseCameraFrame(camera, frame);

        [NativeFunction("SDL3", EntryPoint = "ReloadGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ReloadGamepadMappings() => T.ReloadGamepadMappings();

        [NativeFunction("SDL3", EntryPoint = "RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RemovePath([NativeTypeName("const char *")] sbyte* path) => T.RemovePath(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RemovePath([NativeTypeName("const char *")] Ref<sbyte> path) =>
            T.RemovePath(path);

        [NativeFunction("SDL3", EntryPoint = "RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RemoveStoragePath(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => T.RemoveStoragePath(storage, path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RemoveStoragePath(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        ) => T.RemoveStoragePath(storage, path);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
            T.RemoveTimer(id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) => T.RemoveTimerRaw(id);

        [NativeFunction("SDL3", EntryPoint = "RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenamePath(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => T.RenamePath(oldpath, newpath);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenamePath(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        ) => T.RenamePath(oldpath, newpath);

        [NativeFunction("SDL3", EntryPoint = "RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenameStoragePath(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => T.RenameStoragePath(storage, oldpath, newpath);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenameStoragePath(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        ) => T.RenameStoragePath(storage, oldpath, newpath);

        [NativeFunction("SDL3", EntryPoint = "RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderClear(SDL_Renderer* renderer) => T.RenderClear(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderClear(Ref<SDL_Renderer> renderer) => T.RenderClear(renderer);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderClipEnabled(SDL_Renderer* renderer) => T.RenderClipEnabled(renderer);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> RenderClipEnabled(Ref<SDL_Renderer> renderer) =>
            T.RenderClipEnabled(renderer);

        [NativeFunction("SDL3", EntryPoint = "RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderCoordinatesFromWindow(
            SDL_Renderer* renderer,
            float window_x,
            float window_y,
            float* x,
            float* y
        ) => T.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderCoordinatesFromWindow(
            Ref<SDL_Renderer> renderer,
            float window_x,
            float window_y,
            Ref<float> x,
            Ref<float> y
        ) => T.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

        [NativeFunction("SDL3", EntryPoint = "RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderCoordinatesToWindow(
            SDL_Renderer* renderer,
            float x,
            float y,
            float* window_x,
            float* window_y
        ) => T.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderCoordinatesToWindow(
            Ref<SDL_Renderer> renderer,
            float x,
            float y,
            Ref<float> window_x,
            Ref<float> window_y
        ) => T.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

        [NativeFunction("SDL3", EntryPoint = "RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderFillRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => T.RenderFillRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderFillRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        ) => T.RenderFillRect(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderFillRects(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => T.RenderFillRects(renderer, rects, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderFillRects(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        ) => T.RenderFillRects(renderer, rects, count);

        [NativeFunction("SDL3", EntryPoint = "RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderGeometry(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
            int num_vertices,
            [NativeTypeName("const int *")] int* indices,
            int num_indices
        ) => T.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderGeometry(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
            int num_vertices,
            [NativeTypeName("const int *")] Ref<int> indices,
            int num_indices
        ) => T.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

        [NativeFunction("SDL3", EntryPoint = "RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderGeometryRaw(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_Color *")] Color* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        ) =>
            T.RenderGeometryRaw(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderGeometryRaw(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_Color *")] Ref<Color> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        ) =>
            T.RenderGeometryRaw(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [NativeFunction("SDL3", EntryPoint = "RenderGeometryRawFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderGeometryRawFloat(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] FColor* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        ) =>
            T.RenderGeometryRawFloat(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRawFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderGeometryRawFloat(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        ) =>
            T.RenderGeometryRawFloat(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [NativeFunction("SDL3", EntryPoint = "RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2) =>
            T.RenderLine(renderer, x1, y1, x2, y2);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderLine(Ref<SDL_Renderer> renderer, float x1, float y1, float x2, float y2) =>
            T.RenderLine(renderer, x1, y1, x2, y2);

        [NativeFunction("SDL3", EntryPoint = "RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderLines(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => T.RenderLines(renderer, points, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderLines(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        ) => T.RenderLines(renderer, points, count);

        [NativeFunction("SDL3", EntryPoint = "RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderPoint(SDL_Renderer* renderer, float x, float y) =>
            T.RenderPoint(renderer, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderPoint(Ref<SDL_Renderer> renderer, float x, float y) =>
            T.RenderPoint(renderer, x, y);

        [NativeFunction("SDL3", EntryPoint = "RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderPoints(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => T.RenderPoints(renderer, points, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderPoints(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        ) => T.RenderPoints(renderer, points, count);

        [NativeFunction("SDL3", EntryPoint = "RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderPresent(SDL_Renderer* renderer) => T.RenderPresent(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderPresent(Ref<SDL_Renderer> renderer) => T.RenderPresent(renderer);

        [NativeFunction("SDL3", EntryPoint = "RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Surface* RenderReadPixels(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.RenderReadPixels(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public Ptr<Surface> RenderReadPixels(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.RenderReadPixels(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => T.RenderRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        ) => T.RenderRect(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderRects(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => T.RenderRects(renderer, rects, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderRects(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        ) => T.RenderRects(renderer, rects, count);

        [NativeFunction("SDL3", EntryPoint = "RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderTexture(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) => T.RenderTexture(renderer, texture, srcrect, dstrect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderTexture(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        ) => T.RenderTexture(renderer, texture, srcrect, dstrect);

        [NativeFunction("SDL3", EntryPoint = "RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderTextureRotated(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
            [NativeTypeName("const double")] double angle,
            [NativeTypeName("const SDL_FPoint *")] FPoint* center,
            [NativeTypeName("const SDL_FlipMode")] FlipMode flip
        ) => T.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderTextureRotated(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
            [NativeTypeName("const double")] double angle,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
            [NativeTypeName("const SDL_FlipMode")] FlipMode flip
        ) => T.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RenderViewportSet(SDL_Renderer* renderer) => T.RenderViewportSet(renderer);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> RenderViewportSet(Ref<SDL_Renderer> renderer) =>
            T.RenderViewportSet(renderer);

        [NativeFunction("SDL3", EntryPoint = "ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertState ReportAssertion(
            AssertData* data,
            [NativeTypeName("const char *")] sbyte* func,
            [NativeTypeName("const char *")] sbyte* file,
            int line
        ) => T.ReportAssertion(data, func, file, line);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public AssertState ReportAssertion(
            Ref<AssertData> data,
            [NativeTypeName("const char *")] Ref<sbyte> func,
            [NativeTypeName("const char *")] Ref<sbyte> file,
            int line
        ) => T.ReportAssertion(data, func, file, line);

        [NativeFunction("SDL3", EntryPoint = "ResetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetAssertionReport() => T.ResetAssertionReport();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ResetHint([NativeTypeName("const char *")] sbyte* name) => T.ResetHint(name);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
            T.ResetHint(name);

        [NativeFunction("SDL3", EntryPoint = "ResetHints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetHints() => T.ResetHints();

        [NativeFunction("SDL3", EntryPoint = "ResetKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ResetKeyboard() => T.ResetKeyboard();

        [NativeFunction("SDL3", EntryPoint = "RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RestoreWindow(SDL_Window* window) => T.RestoreWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RestoreWindow(Ref<SDL_Window> window) => T.RestoreWindow(window);

        [NativeFunction("SDL3", EntryPoint = "ResumeAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            T.ResumeAudioDevice(dev);

        [NativeFunction("SDL3", EntryPoint = "ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ResumeHaptic(SDL_Haptic* haptic) => T.ResumeHaptic(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ResumeHaptic(Ref<SDL_Haptic> haptic) => T.ResumeHaptic(haptic);

        [NativeFunction("SDL3", EntryPoint = "RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleGamepad(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleGamepad(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [NativeFunction("SDL3", EntryPoint = "RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleGamepadTriggers(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleGamepadTriggers(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms);

        [NativeFunction("SDL3", EntryPoint = "RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleJoystick(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystick(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleJoystick(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystick(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);

        [NativeFunction("SDL3", EntryPoint = "RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleJoystickTriggers(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RumbleJoystickTriggers(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) => T.RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms);

        [NativeFunction("SDL3", EntryPoint = "RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RunHapticEffect(
            SDL_Haptic* haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => T.RunHapticEffect(haptic, effect, iterations);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int RunHapticEffect(
            Ref<SDL_Haptic> haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => T.RunHapticEffect(haptic, effect, iterations);

        [NativeFunction("SDL3", EntryPoint = "SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
            T.SaveBMP(surface, file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SaveBMP(
            Ref<Surface> surface,
            [NativeTypeName("const char *")] Ref<sbyte> file
        ) => T.SaveBMP(surface, file);

        [NativeFunction("SDL3", EntryPoint = "SaveBMPIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SaveBMPIO(
            Surface* surface,
            SDL_IOStream* dst,
            [NativeTypeName("SDL_bool")] int closeio
        ) => T.SaveBMPIO(surface, dst, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SaveBMPIO(
            Ref<Surface> surface,
            Ref<SDL_IOStream> dst,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        ) => T.SaveBMPIO(surface, dst, closeio);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ScreenKeyboardShown(SDL_Window* window) => T.ScreenKeyboardShown(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ScreenKeyboardShown(Ref<SDL_Window> window) =>
            T.ScreenKeyboardShown(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> ScreenSaverEnabled() => T.ScreenSaverEnabled();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ScreenSaverEnabledRaw() => T.ScreenSaverEnabledRaw();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long SeekIO(
            SDL_IOStream* context,
            [NativeTypeName("Sint64")] long offset,
            int whence
        ) => T.SeekIO(context, offset, whence);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long SeekIO(
            Ref<SDL_IOStream> context,
            [NativeTypeName("Sint64")] long offset,
            int whence
        ) => T.SeekIO(context, offset, whence);

        [NativeFunction("SDL3", EntryPoint = "SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SendGamepadEffect(
            SDL_Gamepad* gamepad,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => T.SendGamepadEffect(gamepad, data, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SendGamepadEffect(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("const void *")] Ref data,
            int size
        ) => T.SendGamepadEffect(gamepad, data, size);

        [NativeFunction("SDL3", EntryPoint = "SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SendJoystickEffect(
            SDL_Joystick* joystick,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => T.SendJoystickEffect(joystick, data, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SendJoystickEffect(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("const void *")] Ref data,
            int size
        ) => T.SendJoystickEffect(joystick, data, size);

        [NativeFunction("SDL3", EntryPoint = "SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")]
                delegate* unmanaged<AssertData*, void*, AssertState> handler,
            void* userdata
        ) => T.SetAssertionHandler(handler, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")]
                delegate* unmanaged<AssertData*, void*, AssertState> handler,
            Ref userdata
        ) => T.SetAssertionHandler(handler, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")]
                delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
            void* userdata
        ) => T.SetAudioPostmixCallback(devid, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")]
                delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
            Ref userdata
        ) => T.SetAudioPostmixCallback(devid, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamFormat(
            SDL_AudioStream* stream,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => T.SetAudioStreamFormat(stream, src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamFormat(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        ) => T.SetAudioStreamFormat(stream, src_spec, dst_spec);

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio) =>
            T.SetAudioStreamFrequencyRatio(stream, ratio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream, float ratio) =>
            T.SetAudioStreamFrequencyRatio(stream, ratio);

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamGetCallback(
            SDL_AudioStream* stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        ) => T.SetAudioStreamGetCallback(stream, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamGetCallback(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        ) => T.SetAudioStreamGetCallback(stream, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamPutCallback(
            SDL_AudioStream* stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        ) => T.SetAudioStreamPutCallback(stream, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetAudioStreamPutCallback(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        ) => T.SetAudioStreamPutCallback(stream, callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int value
        ) => T.SetBooleanProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> value
        ) => T.SetBooleanProperty(props, name, value);

        [NativeFunction("SDL3", EntryPoint = "SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")]
                delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")]
                delegate* unmanaged<void*, void> cleanup,
            void* userdata,
            [NativeTypeName("const char **")] sbyte** mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        ) => T.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")]
                delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")]
                delegate* unmanaged<void*, void> cleanup,
            Ref userdata,
            [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        ) => T.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

        [NativeFunction("SDL3", EntryPoint = "SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
            T.SetClipboardText(text);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text) =>
            T.SetClipboardText(text);

        [NativeFunction("SDL3", EntryPoint = "SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetCursor(SDL_Cursor* cursor) => T.SetCursor(cursor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetCursor(Ref<SDL_Cursor> cursor) => T.SetCursor(cursor);

        [NativeFunction("SDL3", EntryPoint = "SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("SDL_bool")] int enabled
        ) => T.SetEventEnabled(type, enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => T.SetEventEnabled(type, enabled);

        [NativeFunction("SDL3", EntryPoint = "SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => T.SetEventFilter(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        ) => T.SetEventFilter(filter, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float value
        ) => T.SetFloatProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float value
        ) => T.SetFloatProperty(props, name, value);

        [NativeFunction("SDL3", EntryPoint = "SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
            T.SetGamepadEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
            T.SetGamepadEventsEnabled(enabled);

        [NativeFunction("SDL3", EntryPoint = "SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadLED(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetGamepadLED(gamepad, red, green, blue);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadLED(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetGamepadLED(gamepad, red, green, blue);

        [NativeFunction("SDL3", EntryPoint = "SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] sbyte* mapping
        ) => T.SetGamepadMapping(instance_id, mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] Ref<sbyte> mapping
        ) => T.SetGamepadMapping(instance_id, mapping);

        [NativeFunction("SDL3", EntryPoint = "SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index) =>
            T.SetGamepadPlayerIndex(gamepad, player_index);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad, int player_index) =>
            T.SetGamepadPlayerIndex(gamepad, player_index);

        [NativeFunction("SDL3", EntryPoint = "SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadSensorEnabled(
            SDL_Gamepad* gamepad,
            SensorType type,
            [NativeTypeName("SDL_bool")] int enabled
        ) => T.SetGamepadSensorEnabled(gamepad, type, enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetGamepadSensorEnabled(
            Ref<SDL_Gamepad> gamepad,
            SensorType type,
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => T.SetGamepadSensorEnabled(gamepad, type, enabled);

        [NativeFunction("SDL3", EntryPoint = "SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetHapticAutocenter(SDL_Haptic* haptic, int autocenter) =>
            T.SetHapticAutocenter(haptic, autocenter);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetHapticAutocenter(Ref<SDL_Haptic> haptic, int autocenter) =>
            T.SetHapticAutocenter(haptic, autocenter);

        [NativeFunction("SDL3", EntryPoint = "SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetHapticGain(SDL_Haptic* haptic, int gain) => T.SetHapticGain(haptic, gain);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetHapticGain(Ref<SDL_Haptic> haptic, int gain) => T.SetHapticGain(haptic, gain);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetHint(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => T.SetHint(name, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> SetHint(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        ) => T.SetHint(name, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetHintWithPriority(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value,
            HintPriority priority
        ) => T.SetHintWithPriority(name, value, priority);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> SetHintWithPriority(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value,
            HintPriority priority
        ) => T.SetHintWithPriority(name, value, priority);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetJoystickEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
            T.SetJoystickEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetJoystickEventsEnabled([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
            T.SetJoystickEventsEnabled(enabled);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickLED(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetJoystickLED(joystick, red, green, blue);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickLED(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => T.SetJoystickLED(joystick, red, green, blue);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index) =>
            T.SetJoystickPlayerIndex(joystick, player_index);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickPlayerIndex(Ref<SDL_Joystick> joystick, int player_index) =>
            T.SetJoystickPlayerIndex(joystick, player_index);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickVirtualAxis(
            SDL_Joystick* joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => T.SetJoystickVirtualAxis(joystick, axis, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickVirtualAxis(
            Ref<SDL_Joystick> joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => T.SetJoystickVirtualAxis(joystick, axis, value);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickVirtualButton(
            SDL_Joystick* joystick,
            int button,
            [NativeTypeName("Uint8")] byte value
        ) => T.SetJoystickVirtualButton(joystick, button, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickVirtualButton(
            Ref<SDL_Joystick> joystick,
            int button,
            [NativeTypeName("Uint8")] byte value
        ) => T.SetJoystickVirtualButton(joystick, button, value);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickVirtualHat(
            SDL_Joystick* joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => T.SetJoystickVirtualHat(joystick, hat, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetJoystickVirtualHat(
            Ref<SDL_Joystick> joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => T.SetJoystickVirtualHat(joystick, hat, value);

        [NativeFunction("SDL3", EntryPoint = "SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
            void* userdata
        ) => T.SetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
            Ref userdata
        ) => T.SetLogOutputFunction(callback, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void SetModState(Keymod modstate) => T.SetModState(modstate);

        [NativeFunction("SDL3", EntryPoint = "SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long value
        ) => T.SetNumberProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long value
        ) => T.SetNumberProperty(props, name, value);

        [NativeFunction("SDL3", EntryPoint = "SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPaletteColors(
            Palette* palette,
            [NativeTypeName("const SDL_Color *")] Color* colors,
            int firstcolor,
            int ncolors
        ) => T.SetPaletteColors(palette, colors, firstcolor, ncolors);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPaletteColors(
            Ref<Palette> palette,
            [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
            int firstcolor,
            int ncolors
        ) => T.SetPaletteColors(palette, colors, firstcolor, ncolors);

        [NativeFunction("SDL3", EntryPoint = "SetPixelFormatPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPixelFormatPalette(PixelFormat* format, Palette* palette) =>
            T.SetPixelFormatPalette(format, palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPixelFormatPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPixelFormatPalette(Ref<PixelFormat> format, Ref<Palette> palette) =>
            T.SetPixelFormatPalette(format, palette);

        [NativeFunction("SDL3", EntryPoint = "SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
            T.SetPrimarySelectionText(text);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPrimarySelectionText([NativeTypeName("const char *")] Ref<sbyte> text) =>
            T.SetPrimarySelectionText(text);

        [NativeFunction("SDL3", EntryPoint = "SetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value
        ) => T.SetProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value
        ) => T.SetProperty(props, name, value);

        [NativeFunction("SDL3", EntryPoint = "SetPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value,
            [NativeTypeName("void (*)(void *, void *)")]
                delegate* unmanaged<void*, void*, void> cleanup,
            void* userdata
        ) => T.SetPropertyWithCleanup(props, name, value, cleanup, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value,
            [NativeTypeName("void (*)(void *, void *)")]
                delegate* unmanaged<void*, void*, void> cleanup,
            Ref userdata
        ) => T.SetPropertyWithCleanup(props, name, value, cleanup, userdata);

        [NativeFunction("SDL3", EntryPoint = "SetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRelativeMouseMode([NativeTypeName("SDL_bool")] int enabled) =>
            T.SetRelativeMouseMode(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRelativeMouseMode([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
            T.SetRelativeMouseMode(enabled);

        [NativeFunction("SDL3", EntryPoint = "SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderClipRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetRenderClipRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderClipRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetRenderClipRect(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderColorScale(SDL_Renderer* renderer, float scale) =>
            T.SetRenderColorScale(renderer, scale);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderColorScale(Ref<SDL_Renderer> renderer, float scale) =>
            T.SetRenderColorScale(renderer, scale);

        [NativeFunction("SDL3", EntryPoint = "SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode blendMode) =>
            T.SetRenderDrawBlendMode(renderer, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, BlendMode blendMode) =>
            T.SetRenderDrawBlendMode(renderer, blendMode);

        [NativeFunction("SDL3", EntryPoint = "SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderDrawColor(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.SetRenderDrawColor(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderDrawColor(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => T.SetRenderDrawColor(renderer, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderDrawColorFloat(
            SDL_Renderer* renderer,
            float r,
            float g,
            float b,
            float a
        ) => T.SetRenderDrawColorFloat(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderDrawColorFloat(
            Ref<SDL_Renderer> renderer,
            float r,
            float g,
            float b,
            float a
        ) => T.SetRenderDrawColorFloat(renderer, r, g, b, a);

        [NativeFunction("SDL3", EntryPoint = "SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderLogicalPresentation(
            SDL_Renderer* renderer,
            int w,
            int h,
            RendererLogicalPresentation mode,
            ScaleMode scale_mode
        ) => T.SetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderLogicalPresentation(
            Ref<SDL_Renderer> renderer,
            int w,
            int h,
            RendererLogicalPresentation mode,
            ScaleMode scale_mode
        ) => T.SetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

        [NativeFunction("SDL3", EntryPoint = "SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY) =>
            T.SetRenderScale(renderer, scaleX, scaleY);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderScale(Ref<SDL_Renderer> renderer, float scaleX, float scaleY) =>
            T.SetRenderScale(renderer, scaleX, scaleY);

        [NativeFunction("SDL3", EntryPoint = "SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture) =>
            T.SetRenderTarget(renderer, texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderTarget(Ref<SDL_Renderer> renderer, Ref<SDL_Texture> texture) =>
            T.SetRenderTarget(renderer, texture);

        [NativeFunction("SDL3", EntryPoint = "SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderViewport(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetRenderViewport(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderViewport(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetRenderViewport(renderer, rect);

        [NativeFunction("SDL3", EntryPoint = "SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderVSync(SDL_Renderer* renderer, int vsync) =>
            T.SetRenderVSync(renderer, vsync);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetRenderVSync(Ref<SDL_Renderer> renderer, int vsync) =>
            T.SetRenderVSync(renderer, vsync);

        [NativeFunction("SDL3", EntryPoint = "SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => T.SetStringProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        ) => T.SetStringProperty(props, name, value);

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8")] byte alpha) =>
            T.SetSurfaceAlphaMod(surface, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceAlphaMod(Ref<Surface> surface, [NativeTypeName("Uint8")] byte alpha) =>
            T.SetSurfaceAlphaMod(surface, alpha);

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceBlendMode(Surface* surface, BlendMode blendMode) =>
            T.SetSurfaceBlendMode(surface, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceBlendMode(Ref<Surface> surface, BlendMode blendMode) =>
            T.SetSurfaceBlendMode(surface, blendMode);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceClipRect(
            Surface* surface,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> SetSurfaceClipRect(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetSurfaceClipRect(surface, rect);

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceColorKey(
            Surface* surface,
            int flag,
            [NativeTypeName("Uint32")] uint key
        ) => T.SetSurfaceColorKey(surface, flag, key);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceColorKey(
            Ref<Surface> surface,
            int flag,
            [NativeTypeName("Uint32")] uint key
        ) => T.SetSurfaceColorKey(surface, flag, key);

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetSurfaceColorMod(surface, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetSurfaceColorMod(surface, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
            T.SetSurfaceColorspace(surface, colorspace);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace) =>
            T.SetSurfaceColorspace(surface, colorspace);

        [NativeFunction("SDL3", EntryPoint = "SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfacePalette(Surface* surface, Palette* palette) =>
            T.SetSurfacePalette(surface, palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette) =>
            T.SetSurfacePalette(surface, palette);

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceRLE(Surface* surface, int flag) => T.SetSurfaceRLE(surface, flag);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetSurfaceRLE(Ref<Surface> surface, int flag) => T.SetSurfaceRLE(surface, flag);

        [NativeFunction("SDL3", EntryPoint = "SetTextInputRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
            T.SetTextInputRect(rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect) =>
            T.SetTextInputRect(rect);

        [NativeFunction("SDL3", EntryPoint = "SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureAlphaMod(SDL_Texture* texture, [NativeTypeName("Uint8")] byte alpha) =>
            T.SetTextureAlphaMod(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureAlphaMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8")] byte alpha
        ) => T.SetTextureAlphaMod(texture, alpha);

        [NativeFunction("SDL3", EntryPoint = "SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureAlphaModFloat(SDL_Texture* texture, float alpha) =>
            T.SetTextureAlphaModFloat(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureAlphaModFloat(Ref<SDL_Texture> texture, float alpha) =>
            T.SetTextureAlphaModFloat(texture, alpha);

        [NativeFunction("SDL3", EntryPoint = "SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureBlendMode(SDL_Texture* texture, BlendMode blendMode) =>
            T.SetTextureBlendMode(texture, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureBlendMode(Ref<SDL_Texture> texture, BlendMode blendMode) =>
            T.SetTextureBlendMode(texture, blendMode);

        [NativeFunction("SDL3", EntryPoint = "SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureColorMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetTextureColorMod(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureColorMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => T.SetTextureColorMod(texture, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureColorModFloat(SDL_Texture* texture, float r, float g, float b) =>
            T.SetTextureColorModFloat(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureColorModFloat(Ref<SDL_Texture> texture, float r, float g, float b) =>
            T.SetTextureColorModFloat(texture, r, g, b);

        [NativeFunction("SDL3", EntryPoint = "SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureScaleMode(SDL_Texture* texture, ScaleMode scaleMode) =>
            T.SetTextureScaleMode(texture, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTextureScaleMode(Ref<SDL_Texture> texture, ScaleMode scaleMode) =>
            T.SetTextureScaleMode(texture, scaleMode);

        [NativeFunction("SDL3", EntryPoint = "SetThreadPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetThreadPriority(ThreadPriority priority) => T.SetThreadPriority(priority);

        [NativeFunction("SDL3", EntryPoint = "SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTLS(
            [NativeTypeName("SDL_TLSID")] uint id,
            [NativeTypeName("const void *")] void* value,
            [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
        ) => T.SetTLS(id, value, destructor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetTLS(
            [NativeTypeName("SDL_TLSID")] uint id,
            [NativeTypeName("const void *")] Ref value,
            [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
        ) => T.SetTLS(id, value, destructor);

        [NativeFunction("SDL3", EntryPoint = "SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowAlwaysOnTop(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int on_top
        ) => T.SetWindowAlwaysOnTop(window, on_top);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowAlwaysOnTop(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> on_top
        ) => T.SetWindowAlwaysOnTop(window, on_top);

        [NativeFunction("SDL3", EntryPoint = "SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowBordered(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int bordered
        ) => T.SetWindowBordered(window, bordered);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowBordered(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> bordered
        ) => T.SetWindowBordered(window, bordered);

        [NativeFunction("SDL3", EntryPoint = "SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowFocusable(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int focusable
        ) => T.SetWindowFocusable(window, focusable);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowFocusable(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> focusable
        ) => T.SetWindowFocusable(window, focusable);

        [NativeFunction("SDL3", EntryPoint = "SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowFullscreen(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int fullscreen
        ) => T.SetWindowFullscreen(window, fullscreen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowFullscreen(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> fullscreen
        ) => T.SetWindowFullscreen(window, fullscreen);

        [NativeFunction("SDL3", EntryPoint = "SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowFullscreenMode(
            SDL_Window* window,
            [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
        ) => T.SetWindowFullscreenMode(window, mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowFullscreenMode(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
        ) => T.SetWindowFullscreenMode(window, mode);

        [NativeFunction("SDL3", EntryPoint = "SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowHitTest(
            SDL_Window* window,
            [NativeTypeName("SDL_HitTest")]
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
            void* callback_data
        ) => T.SetWindowHitTest(window, callback, callback_data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowHitTest(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_HitTest")]
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
            Ref callback_data
        ) => T.SetWindowHitTest(window, callback, callback_data);

        [NativeFunction("SDL3", EntryPoint = "SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowIcon(SDL_Window* window, Surface* icon) =>
            T.SetWindowIcon(window, icon);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowIcon(Ref<SDL_Window> window, Ref<Surface> icon) =>
            T.SetWindowIcon(window, icon);

        [NativeFunction("SDL3", EntryPoint = "SetWindowInputFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowInputFocus(SDL_Window* window) => T.SetWindowInputFocus(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowInputFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowInputFocus(Ref<SDL_Window> window) => T.SetWindowInputFocus(window);

        [NativeFunction("SDL3", EntryPoint = "SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowKeyboardGrab(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int grabbed
        ) => T.SetWindowKeyboardGrab(window, grabbed);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowKeyboardGrab(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
        ) => T.SetWindowKeyboardGrab(window, grabbed);

        [NativeFunction("SDL3", EntryPoint = "SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h) =>
            T.SetWindowMaximumSize(window, max_w, max_h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMaximumSize(Ref<SDL_Window> window, int max_w, int max_h) =>
            T.SetWindowMaximumSize(window, max_w, max_h);

        [NativeFunction("SDL3", EntryPoint = "SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h) =>
            T.SetWindowMinimumSize(window, min_w, min_h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMinimumSize(Ref<SDL_Window> window, int min_w, int min_h) =>
            T.SetWindowMinimumSize(window, min_w, min_h);

        [NativeFunction("SDL3", EntryPoint = "SetWindowModalFor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window) =>
            T.SetWindowModalFor(modal_window, parent_window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModalFor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowModalFor(Ref<SDL_Window> modal_window, Ref<SDL_Window> parent_window) =>
            T.SetWindowModalFor(modal_window, parent_window);

        [NativeFunction("SDL3", EntryPoint = "SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMouseGrab(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int grabbed
        ) => T.SetWindowMouseGrab(window, grabbed);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMouseGrab(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
        ) => T.SetWindowMouseGrab(window, grabbed);

        [NativeFunction("SDL3", EntryPoint = "SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMouseRect(
            SDL_Window* window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => T.SetWindowMouseRect(window, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowMouseRect(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        ) => T.SetWindowMouseRect(window, rect);

        [NativeFunction("SDL3", EntryPoint = "SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowOpacity(SDL_Window* window, float opacity) =>
            T.SetWindowOpacity(window, opacity);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowOpacity(Ref<SDL_Window> window, float opacity) =>
            T.SetWindowOpacity(window, opacity);

        [NativeFunction("SDL3", EntryPoint = "SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowPosition(SDL_Window* window, int x, int y) =>
            T.SetWindowPosition(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowPosition(Ref<SDL_Window> window, int x, int y) =>
            T.SetWindowPosition(window, x, y);

        [NativeFunction("SDL3", EntryPoint = "SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowResizable(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int resizable
        ) => T.SetWindowResizable(window, resizable);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowResizable(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> resizable
        ) => T.SetWindowResizable(window, resizable);

        [NativeFunction("SDL3", EntryPoint = "SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowShape(SDL_Window* window, Surface* shape) =>
            T.SetWindowShape(window, shape);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowShape(Ref<SDL_Window> window, Ref<Surface> shape) =>
            T.SetWindowShape(window, shape);

        [NativeFunction("SDL3", EntryPoint = "SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowSize(SDL_Window* window, int w, int h) => T.SetWindowSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowSize(Ref<SDL_Window> window, int w, int h) =>
            T.SetWindowSize(window, w, h);

        [NativeFunction("SDL3", EntryPoint = "SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowTitle(
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* title
        ) => T.SetWindowTitle(window, title);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SetWindowTitle(
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> title
        ) => T.SetWindowTitle(window, title);

        [NativeFunction("SDL3", EntryPoint = "ShowCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowCursor() => T.ShowCursor();

        [NativeFunction("SDL3", EntryPoint = "ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
            int* buttonid
        ) => T.ShowMessageBox(messageboxdata, buttonid);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
            Ref<int> buttonid
        ) => T.ShowMessageBox(messageboxdata, buttonid);

        [NativeFunction("SDL3", EntryPoint = "ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("SDL_bool")] int allow_many
        ) =>
            T.ShowOpenFileDialog(callback, userdata, window, filters, default_location, allow_many);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
        ) =>
            T.ShowOpenFileDialog(callback, userdata, window, filters, default_location, allow_many);

        [NativeFunction("SDL3", EntryPoint = "ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("SDL_bool")] int allow_many
        ) => T.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
        ) => T.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

        [NativeFunction("SDL3", EntryPoint = "ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            [NativeTypeName("const char *")] sbyte* default_location
        ) => T.ShowSaveFileDialog(callback, userdata, window, filters, default_location);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location
        ) => T.ShowSaveFileDialog(callback, userdata, window, filters, default_location);

        [NativeFunction("SDL3", EntryPoint = "ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowSimpleMessageBox(
            [NativeTypeName("Uint32")] uint flags,
            [NativeTypeName("const char *")] sbyte* title,
            [NativeTypeName("const char *")] sbyte* message,
            SDL_Window* window
        ) => T.ShowSimpleMessageBox(flags, title, message, window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowSimpleMessageBox(
            [NativeTypeName("Uint32")] uint flags,
            [NativeTypeName("const char *")] Ref<sbyte> title,
            [NativeTypeName("const char *")] Ref<sbyte> message,
            Ref<SDL_Window> window
        ) => T.ShowSimpleMessageBox(flags, title, message, window);

        [NativeFunction("SDL3", EntryPoint = "ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowWindow(SDL_Window* window) => T.ShowWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowWindow(Ref<SDL_Window> window) => T.ShowWindow(window);

        [NativeFunction("SDL3", EntryPoint = "ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowWindowSystemMenu(SDL_Window* window, int x, int y) =>
            T.ShowWindowSystemMenu(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int ShowWindowSystemMenu(Ref<SDL_Window> window, int x, int y) =>
            T.ShowWindowSystemMenu(window, x, y);

        [NativeFunction("SDL3", EntryPoint = "SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SignalCondition(SDL_Condition* cond) => T.SignalCondition(cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SignalCondition(Ref<SDL_Condition> cond) => T.SignalCondition(cond);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SimdGetAlignment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint SimdGetAlignment() => T.SimdGetAlignment();

        [NativeFunction("SDL3", EntryPoint = "SoftStretch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SoftStretch(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => T.SoftStretch(src, srcrect, dst, dstrect, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SoftStretch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SoftStretch(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        ) => T.SoftStretch(src, srcrect, dst, dstrect, scaleMode);

        [NativeFunction("SDL3", EntryPoint = "StartTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void StartTextInput() => T.StartTextInput();

        [NativeFunction("SDL3", EntryPoint = "StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StopHapticEffect(SDL_Haptic* haptic, int effect) =>
            T.StopHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StopHapticEffect(Ref<SDL_Haptic> haptic, int effect) =>
            T.StopHapticEffect(haptic, effect);

        [NativeFunction("SDL3", EntryPoint = "StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StopHapticEffects(SDL_Haptic* haptic) => T.StopHapticEffects(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StopHapticEffects(Ref<SDL_Haptic> haptic) => T.StopHapticEffects(haptic);

        [NativeFunction("SDL3", EntryPoint = "StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StopHapticRumble(SDL_Haptic* haptic) => T.StopHapticRumble(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StopHapticRumble(Ref<SDL_Haptic> haptic) => T.StopHapticRumble(haptic);

        [NativeFunction("SDL3", EntryPoint = "StopTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void StopTextInput() => T.StopTextInput();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int StorageReady(SDL_Storage* storage) => T.StorageReady(storage);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> StorageReady(Ref<SDL_Storage> storage) => T.StorageReady(storage);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SurfaceHasColorKey(Surface* surface) => T.SurfaceHasColorKey(surface);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> SurfaceHasColorKey(Ref<Surface> surface) =>
            T.SurfaceHasColorKey(surface);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SurfaceHasRLE(Surface* surface) => T.SurfaceHasRLE(surface);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> SurfaceHasRLE(Ref<Surface> surface) => T.SurfaceHasRLE(surface);

        [NativeFunction("SDL3", EntryPoint = "SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SyncWindow(SDL_Window* window) => T.SyncWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int SyncWindow(Ref<SDL_Window> window) => T.SyncWindow(window);

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long TellIO(SDL_IOStream* context) => T.TellIO(context);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long TellIO(Ref<SDL_IOStream> context) => T.TellIO(context);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> TextInputActive() => T.TextInputActive();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TextInputActiveRaw() => T.TextInputActiveRaw();

        [return: NativeTypeName("SDL_Time")]
        [NativeFunction("SDL3", EntryPoint = "TimeFromWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public long TimeFromWindows(
            [NativeTypeName("Uint32")] uint dwLowDateTime,
            [NativeTypeName("Uint32")] uint dwHighDateTime
        ) => T.TimeFromWindows(dwLowDateTime, dwHighDateTime);

        [NativeFunction("SDL3", EntryPoint = "TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            DateTime* dt,
            [NativeTypeName("SDL_bool")] int localTime
        ) => T.TimeToDateTime(ticks, dt, localTime);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            Ref<DateTime> dt,
            [NativeTypeName("SDL_bool")] MaybeBool<int> localTime
        ) => T.TimeToDateTime(ticks, dt, localTime);

        [NativeFunction("SDL3", EntryPoint = "TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
            [NativeTypeName("Uint32 *")] uint* dwHighDateTime
        ) => T.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
            [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
        ) => T.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

        [NativeFunction("SDL3", EntryPoint = "TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockMutex(SDL_Mutex* mutex) => T.TryLockMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockMutex(Ref<SDL_Mutex> mutex) => T.TryLockMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockRWLockForReading(SDL_RWLock* rwlock) => T.TryLockRWLockForReading(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockRWLockForReading(Ref<SDL_RWLock> rwlock) =>
            T.TryLockRWLockForReading(rwlock);

        [NativeFunction("SDL3", EntryPoint = "TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockRWLockForWriting(SDL_RWLock* rwlock) => T.TryLockRWLockForWriting(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockRWLockForWriting(Ref<SDL_RWLock> rwlock) =>
            T.TryLockRWLockForWriting(rwlock);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            T.TryLockSpinlock(@lock);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
            T.TryLockSpinlock(@lock);

        [NativeFunction("SDL3", EntryPoint = "TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryWaitSemaphore(SDL_Semaphore* sem) => T.TryWaitSemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int TryWaitSemaphore(Ref<SDL_Semaphore> sem) => T.TryWaitSemaphore(sem);

        [NativeFunction("SDL3", EntryPoint = "UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStream(SDL_AudioStream* stream) => T.UnbindAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStream(Ref<SDL_AudioStream> stream) => T.UnbindAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStreams(SDL_AudioStream** streams, int num_streams) =>
            T.UnbindAudioStreams(streams, num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnbindAudioStreams(Ref2D<SDL_AudioStream> streams, int num_streams) =>
            T.UnbindAudioStreams(streams, num_streams);

        [NativeFunction("SDL3", EntryPoint = "UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnloadObject(void* handle) => T.UnloadObject(handle);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnloadObject(Ref handle) => T.UnloadObject(handle);

        [NativeFunction("SDL3", EntryPoint = "UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UnlockAudioStream(SDL_AudioStream* stream) => T.UnlockAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UnlockAudioStream(Ref<SDL_AudioStream> stream) => T.UnlockAudioStream(stream);

        [NativeFunction("SDL3", EntryPoint = "UnlockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockJoysticks() => T.UnlockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockMutex(SDL_Mutex* mutex) => T.UnlockMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockMutex(Ref<SDL_Mutex> mutex) => T.UnlockMutex(mutex);

        [NativeFunction("SDL3", EntryPoint = "UnlockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            T.UnlockProperties(props);

        [NativeFunction("SDL3", EntryPoint = "UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockRWLock(SDL_RWLock* rwlock) => T.UnlockRWLock(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockRWLock(Ref<SDL_RWLock> rwlock) => T.UnlockRWLock(rwlock);

        [NativeFunction("SDL3", EntryPoint = "UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            T.UnlockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
            T.UnlockSpinlock(@lock);

        [NativeFunction("SDL3", EntryPoint = "UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSurface(Surface* surface) => T.UnlockSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockSurface(Ref<Surface> surface) => T.UnlockSurface(surface);

        [NativeFunction("SDL3", EntryPoint = "UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockTexture(SDL_Texture* texture) => T.UnlockTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UnlockTexture(Ref<SDL_Texture> texture) => T.UnlockTexture(texture);

        [NativeFunction("SDL3", EntryPoint = "UpdateGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UpdateGamepads() => T.UpdateGamepads();

        [NativeFunction("SDL3", EntryPoint = "UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateHapticEffect(
            SDL_Haptic* haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
        ) => T.UpdateHapticEffect(haptic, effect, data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateHapticEffect(
            Ref<SDL_Haptic> haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
        ) => T.UpdateHapticEffect(haptic, effect, data);

        [NativeFunction("SDL3", EntryPoint = "UpdateJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UpdateJoysticks() => T.UpdateJoysticks();

        [NativeFunction("SDL3", EntryPoint = "UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateNVTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* UVplane,
            int UVpitch
        ) => T.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateNVTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
            int UVpitch
        ) => T.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

        [NativeFunction("SDL3", EntryPoint = "UpdateSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void UpdateSensors() => T.UpdateSensors();

        [NativeFunction("SDL3", EntryPoint = "UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const void *")] void* pixels,
            int pitch
        ) => T.UpdateTexture(texture, rect, pixels, pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const void *")] Ref pixels,
            int pitch
        ) => T.UpdateTexture(texture, rect, pixels, pitch);

        [NativeFunction("SDL3", EntryPoint = "UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateWindowSurface(SDL_Window* window) => T.UpdateWindowSurface(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateWindowSurface(Ref<SDL_Window> window) => T.UpdateWindowSurface(window);

        [NativeFunction("SDL3", EntryPoint = "UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateWindowSurfaceRects(
            SDL_Window* window,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int numrects
        ) => T.UpdateWindowSurfaceRects(window, rects, numrects);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateWindowSurfaceRects(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int numrects
        ) => T.UpdateWindowSurfaceRects(window, rects, numrects);

        [NativeFunction("SDL3", EntryPoint = "UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateYUVTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] byte* Vplane,
            int Vpitch
        ) => T.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int UpdateYUVTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
            int Vpitch
        ) => T.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

        [NativeFunction("SDL3", EntryPoint = "WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex) =>
            T.WaitCondition(cond, mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitCondition(Ref<SDL_Condition> cond, Ref<SDL_Mutex> mutex) =>
            T.WaitCondition(cond, mutex);

        [NativeFunction("SDL3", EntryPoint = "WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitConditionTimeout(
            SDL_Condition* cond,
            SDL_Mutex* mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitConditionTimeout(cond, mutex, timeoutMS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitConditionTimeout(
            Ref<SDL_Condition> cond,
            Ref<SDL_Mutex> mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitConditionTimeout(cond, mutex, timeoutMS);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitEvent(Event* @event) => T.WaitEvent(@event);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WaitEvent(Ref<Event> @event) => T.WaitEvent(@event);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitEventTimeout(Event* @event, [NativeTypeName("Sint32")] int timeoutMS) =>
            T.WaitEventTimeout(@event, timeoutMS);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WaitEventTimeout(
            Ref<Event> @event,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitEventTimeout(@event, timeoutMS);

        [NativeFunction("SDL3", EntryPoint = "WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitSemaphore(SDL_Semaphore* sem) => T.WaitSemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitSemaphore(Ref<SDL_Semaphore> sem) => T.WaitSemaphore(sem);

        [NativeFunction("SDL3", EntryPoint = "WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitSemaphoreTimeout(
            SDL_Semaphore* sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitSemaphoreTimeout(sem, timeoutMS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WaitSemaphoreTimeout(
            Ref<SDL_Semaphore> sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => T.WaitSemaphoreTimeout(sem, timeoutMS);

        [NativeFunction("SDL3", EntryPoint = "WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WaitThread(SDL_Thread* thread, int* status) => T.WaitThread(thread, status);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WaitThread(Ref<SDL_Thread> thread, Ref<int> status) =>
            T.WaitThread(thread, status);

        [NativeFunction("SDL3", EntryPoint = "WarpMouseGlobal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WarpMouseGlobal(float x, float y) => T.WarpMouseGlobal(x, y);

        [NativeFunction("SDL3", EntryPoint = "WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WarpMouseInWindow(SDL_Window* window, float x, float y) =>
            T.WarpMouseInWindow(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public void WarpMouseInWindow(Ref<SDL_Window> window, float x, float y) =>
            T.WarpMouseInWindow(window, x, y);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "WasInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public uint WasInit([NativeTypeName("Uint32")] uint flags) => T.WasInit(flags);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WindowHasSurface(SDL_Window* window) => T.WindowHasSurface(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WindowHasSurface(Ref<SDL_Window> window) =>
            T.WindowHasSurface(window);

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint WriteIO(
            SDL_IOStream* context,
            [NativeTypeName("const void *")] void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.WriteIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public nuint WriteIO(
            Ref<SDL_IOStream> context,
            [NativeTypeName("const void *")] Ref ptr,
            [NativeTypeName("size_t")] nuint size
        ) => T.WriteIO(context, ptr, size);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteS16BE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
            T.WriteS16BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteS16BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint16")] short value
        ) => T.WriteS16BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteS16LE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
            T.WriteS16LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteS16LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint16")] short value
        ) => T.WriteS16LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteS32BE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
            T.WriteS32BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteS32BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint32")] int value
        ) => T.WriteS32BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteS32LE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
            T.WriteS32LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteS32LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint32")] int value
        ) => T.WriteS32LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteS64BE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
            T.WriteS64BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteS64BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint64")] long value
        ) => T.WriteS64BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteS64LE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
            T.WriteS64LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteS64LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint64")] long value
        ) => T.WriteS64LE(dst, value);

        [NativeFunction("SDL3", EntryPoint = "WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteStorageFile(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const void *")] void* source,
            [NativeTypeName("Uint64")] ulong length
        ) => T.WriteStorageFile(storage, path, source, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteStorageFile(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const void *")] Ref source,
            [NativeTypeName("Uint64")] ulong length
        ) => T.WriteStorageFile(storage, path, source, length);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU16BE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
            T.WriteU16BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU16BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint16")] ushort value
        ) => T.WriteU16BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU16LE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
            T.WriteU16LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU16LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint16")] ushort value
        ) => T.WriteU16LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU32BE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
            T.WriteU32BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU32BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint32")] uint value
        ) => T.WriteU32BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU32LE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
            T.WriteU32LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU32LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint32")] uint value
        ) => T.WriteU32LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU64BE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
            T.WriteU64BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU64BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint64")] ulong value
        ) => T.WriteU64BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU64LE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
            T.WriteU64LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU64LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint64")] ulong value
        ) => T.WriteU64LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public int WriteU8(SDL_IOStream* dst, [NativeTypeName("Uint8")] byte value) =>
            T.WriteU8(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public MaybeBool<int> WriteU8(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint8")] byte value
        ) => T.WriteU8(dst, value);
    }

    public partial class ThisThread
    {
        [NativeFunction("SDL3", EntryPoint = "AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* AcquireCameraFrame(
            SDL_Camera* camera,
            [NativeTypeName("Uint64 *")] ulong* timestampNS
        ) => Underlying.Value!.AcquireCameraFrame(camera, timestampNS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> AcquireCameraFrame(
            Ref<SDL_Camera> camera,
            [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
        )
        {
            fixed (ulong* __dsl_timestampNS = timestampNS)
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (Surface*)AcquireCameraFrame(__dsl_camera, __dsl_timestampNS);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => Underlying.Value!.AddEventWatch(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)AddEventWatch(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
            Underlying.Value!.AddGamepadMapping(mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping)
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (int)AddGamepadMapping(__dsl_mapping);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] sbyte* file
        ) => Underlying.Value!.AddGamepadMappingsFromFile(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (int)AddGamepadMappingsFromFile(__dsl_file);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio
        ) => Underlying.Value!.AddGamepadMappingsFromIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddGamepadMappingsFromIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (int)AddGamepadMappingsFromIO(__dsl_src, (int)closeio);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            void* userdata
        ) => Underlying.Value!.AddHintCallback(name, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)AddHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("SDL_TimerID")]
        [NativeFunction("SDL3", EntryPoint = "AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
            void* param2
        ) => Underlying.Value!.AddTimer(interval, callback, param2);

        [return: NativeTypeName("SDL_TimerID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AddTimer(
            [NativeTypeName("Uint32")] uint interval,
            [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
            Ref param2
        )
        {
            fixed (void* __dsl_param2 = param2)
            {
                return (uint)AddTimer(interval, callback, __dsl_param2);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddVulkanRenderSemaphores(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        ) =>
            Underlying.Value!.AddVulkanRenderSemaphores(
                renderer,
                wait_stage_mask,
                wait_semaphore,
                signal_semaphore
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AddVulkanRenderSemaphores(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint32")] uint wait_stage_mask,
            [NativeTypeName("Sint64")] long wait_semaphore,
            [NativeTypeName("Sint64")] long signal_semaphore
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)AddVulkanRenderSemaphores(
                    __dsl_renderer,
                    wait_stage_mask,
                    wait_semaphore,
                    signal_semaphore
                );
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr AllocateEventMemory([NativeTypeName("size_t")] nuint size) =>
            Underlying.Value!.AllocateEventMemory(size);

        [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* AllocateEventMemoryRaw([NativeTypeName("size_t")] nuint size) =>
            Underlying.Value!.AllocateEventMemoryRaw(size);

        [NativeFunction("SDL3", EntryPoint = "AtomicAdd")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicAdd(AtomicInt* a, int v) => Underlying.Value!.AtomicAdd(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicAdd")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicAdd(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AtomicAdd(__dsl_a, v);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "AtomicCompareAndSwap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicCompareAndSwap(AtomicInt* a, int oldval, int newval) =>
            Underlying.Value!.AtomicCompareAndSwap(a, oldval, newval);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwap")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> AtomicCompareAndSwap(Ref<AtomicInt> a, int oldval, int newval)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (MaybeBool<int>)(int)AtomicCompareAndSwap(__dsl_a, oldval, newval);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "AtomicCompareAndSwapPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicCompareAndSwapPointer(void** a, void* oldval, void* newval) =>
            Underlying.Value!.AtomicCompareAndSwapPointer(a, oldval, newval);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwapPointer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> AtomicCompareAndSwapPointer(Ref2D a, Ref oldval, Ref newval)
        {
            fixed (void* __dsl_newval = newval)
            fixed (void* __dsl_oldval = oldval)
            fixed (void** __dsl_a = a)
            {
                return (MaybeBool<int>)
                    (int)AtomicCompareAndSwapPointer(__dsl_a, __dsl_oldval, __dsl_newval);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AtomicGet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicGet(AtomicInt* a) => Underlying.Value!.AtomicGet(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicGet(Ref<AtomicInt> a)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AtomicGet(__dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AtomicGetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* AtomicGetPtr(void** a) => Underlying.Value!.AtomicGetPtr(a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr AtomicGetPtr(Ref2D a)
        {
            fixed (void** __dsl_a = a)
            {
                return (void*)AtomicGetPtr(__dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AtomicSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicSet(AtomicInt* a, int v) => Underlying.Value!.AtomicSet(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AtomicSet(Ref<AtomicInt> a, int v)
        {
            fixed (AtomicInt* __dsl_a = a)
            {
                return (int)AtomicSet(__dsl_a, v);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "AtomicSetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* AtomicSetPtr(void** a, void* v) => Underlying.Value!.AtomicSetPtr(a, v);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSetPtr")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr AtomicSetPtr(Ref2D a, Ref v)
        {
            fixed (void* __dsl_v = v)
            fixed (void** __dsl_a = a)
            {
                return (void*)AtomicSetPtr(__dsl_a, __dsl_v);
            }
        }

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "AttachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystick(
            JoystickType type,
            int naxes,
            int nbuttons,
            int nhats
        ) => Underlying.Value!.AttachVirtualJoystick(type, naxes, nbuttons, nhats);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "AttachVirtualJoystickEx")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystickEx(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
        ) => Underlying.Value!.AttachVirtualJoystickEx(desc);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystickEx")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint AttachVirtualJoystickEx(
            [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
        )
        {
            fixed (VirtualJoystickDesc* __dsl_desc = desc)
            {
                return (uint)AttachVirtualJoystickEx(__dsl_desc);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> AudioDevicePaused(
            [NativeTypeName("SDL_AudioDeviceID")] uint dev
        ) => Underlying.Value!.AudioDevicePaused(dev);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            Underlying.Value!.AudioDevicePausedRaw(dev);

        [NativeFunction("SDL3", EntryPoint = "BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            SDL_AudioStream* stream
        ) => Underlying.Value!.BindAudioStream(devid, stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BindAudioStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<SDL_AudioStream> stream
        )
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)BindAudioStream(devid, __dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            SDL_AudioStream** streams,
            int num_streams
        ) => Underlying.Value!.BindAudioStreams(devid, streams, num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BindAudioStreams(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref2D<SDL_AudioStream> streams,
            int num_streams
        )
        {
            fixed (SDL_AudioStream** __dsl_streams = streams)
            {
                return (int)BindAudioStreams(devid, __dsl_streams, num_streams);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurface(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            Rect* dstrect
        ) => Underlying.Value!.BlitSurface(src, srcrect, dst, dstrect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurface(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurface(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            Rect* dstrect,
            ScaleMode scaleMode
        ) => Underlying.Value!.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurfaceScaled(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceUnchecked(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect
        ) => Underlying.Value!.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceUnchecked(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurfaceUnchecked(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceUncheckedScaled(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => Underlying.Value!.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BlitSurfaceUncheckedScaled(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)BlitSurfaceUncheckedScaled(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BroadcastCondition(SDL_Condition* cond) =>
            Underlying.Value!.BroadcastCondition(cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int BroadcastCondition(Ref<SDL_Condition> cond)
        {
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)BroadcastCondition(__dsl_cond);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CaptureMouse([NativeTypeName("SDL_bool")] int enabled) =>
            Underlying.Value!.CaptureMouse(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CaptureMouse([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
            Underlying.Value!.CaptureMouse(enabled);

        [NativeFunction("SDL3", EntryPoint = "CleanupTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CleanupTLS() => Underlying.Value!.CleanupTLS();

        [NativeFunction("SDL3", EntryPoint = "ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearAudioStream(SDL_AudioStream* stream) =>
            Underlying.Value!.ClearAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)ClearAudioStream(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ClearClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearClipboardData() => Underlying.Value!.ClearClipboardData();

        [NativeFunction("SDL3", EntryPoint = "ClearComposition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ClearComposition() => Underlying.Value!.ClearComposition();

        [NativeFunction("SDL3", EntryPoint = "ClearError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ClearError() => Underlying.Value!.ClearError();

        [NativeFunction("SDL3", EntryPoint = "ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.ClearProperty(props, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ClearProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)ClearProperty(props, __dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
            Underlying.Value!.CloseAudioDevice(devid);

        [NativeFunction("SDL3", EntryPoint = "CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseCamera(SDL_Camera* camera) => Underlying.Value!.CloseCamera(camera);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseCamera(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                CloseCamera(__dsl_camera);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseGamepad(SDL_Gamepad* gamepad) =>
            Underlying.Value!.CloseGamepad(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseGamepad(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                CloseGamepad(__dsl_gamepad);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseHaptic(SDL_Haptic* haptic) => Underlying.Value!.CloseHaptic(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseHaptic(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                CloseHaptic(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CloseIO(SDL_IOStream* context) => Underlying.Value!.CloseIO(context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CloseIO(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (int)CloseIO(__dsl_context);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseJoystick(SDL_Joystick* joystick) =>
            Underlying.Value!.CloseJoystick(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseJoystick(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                CloseJoystick(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseSensor(SDL_Sensor* sensor) => Underlying.Value!.CloseSensor(sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void CloseSensor(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                CloseSensor(__dsl_sensor);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CloseStorage(SDL_Storage* storage) =>
            Underlying.Value!.CloseStorage(storage);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CloseStorage(Ref<SDL_Storage> storage)
        {
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)CloseStorage(__dsl_storage);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ComposeCustomBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static BlendMode ComposeCustomBlendMode(
            BlendFactor srcColorFactor,
            BlendFactor dstColorFactor,
            BlendOperation colorOperation,
            BlendFactor srcAlphaFactor,
            BlendFactor dstAlphaFactor,
            BlendOperation alphaOperation
        ) =>
            Underlying.Value!.ComposeCustomBlendMode(
                srcColorFactor,
                dstColorFactor,
                colorOperation,
                srcAlphaFactor,
                dstAlphaFactor,
                alphaOperation
            );

        [NativeFunction("SDL3", EntryPoint = "ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const Uint8 *")] byte* src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
            [NativeTypeName("Uint8 **")] byte** dst_data,
            int* dst_len
        ) =>
            Underlying.Value!.ConvertAudioSamples(
                src_spec,
                src_data,
                src_len,
                dst_spec,
                dst_data,
                dst_len
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertAudioSamples(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
            int src_len,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
            Ref<int> dst_len
        )
        {
            fixed (int* __dsl_dst_len = dst_len)
            fixed (byte** __dsl_dst_data = dst_data)
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (byte* __dsl_src_data = src_data)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (int)ConvertAudioSamples(
                    __dsl_src_spec,
                    __dsl_src_data,
                    src_len,
                    __dsl_dst_spec,
                    __dsl_dst_data,
                    __dsl_dst_len
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertEventToRenderCoordinates(SDL_Renderer* renderer, Event* @event) =>
            Underlying.Value!.ConvertEventToRenderCoordinates(renderer, @event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertEventToRenderCoordinates(
            Ref<SDL_Renderer> renderer,
            Ref<Event> @event
        )
        {
            fixed (Event* __dsl_event = @event)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)ConvertEventToRenderCoordinates(__dsl_renderer, __dsl_event);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertPixels(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            void* dst,
            int dst_pitch
        ) =>
            Underlying.Value!.ConvertPixels(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertPixels(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (int)ConvertPixels(
                    width,
                    height,
                    src_format,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    __dsl_dst,
                    dst_pitch
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormatEnum src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            void* dst,
            int dst_pitch
        ) =>
            Underlying.Value!.ConvertPixelsAndColorspace(
                width,
                height,
                src_format,
                src_colorspace,
                src_properties,
                src,
                src_pitch,
                dst_format,
                dst_colorspace,
                dst_properties,
                dst,
                dst_pitch
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ConvertPixelsAndColorspace(
            int width,
            int height,
            PixelFormatEnum src_format,
            Colorspace src_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint src_properties,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Colorspace dst_colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (int)ConvertPixelsAndColorspace(
                    width,
                    height,
                    src_format,
                    src_colorspace,
                    src_properties,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    dst_colorspace,
                    dst_properties,
                    __dsl_dst,
                    dst_pitch
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* ConvertSurface(
            Surface* surface,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format
        ) => Underlying.Value!.ConvertSurface(surface, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurface(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format
        )
        {
            fixed (PixelFormat* __dsl_format = format)
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurface(__dsl_surface, __dsl_format);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ConvertSurfaceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* ConvertSurfaceFormat(
            Surface* surface,
            PixelFormatEnum pixel_format
        ) => Underlying.Value!.ConvertSurfaceFormat(surface, pixel_format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurfaceFormat(
            Ref<Surface> surface,
            PixelFormatEnum pixel_format
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurfaceFormat(__dsl_surface, pixel_format);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ConvertSurfaceFormatAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* ConvertSurfaceFormatAndColorspace(
            Surface* surface,
            PixelFormatEnum pixel_format,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) =>
            Underlying.Value!.ConvertSurfaceFormatAndColorspace(
                surface,
                pixel_format,
                colorspace,
                props
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormatAndColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> ConvertSurfaceFormatAndColorspace(
            Ref<Surface> surface,
            PixelFormatEnum pixel_format,
            Colorspace colorspace,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)ConvertSurfaceFormatAndColorspace(
                    __dsl_surface,
                    pixel_format,
                    colorspace,
                    props
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CopyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CopyProperties(
            [NativeTypeName("SDL_PropertiesID")] uint src,
            [NativeTypeName("SDL_PropertiesID")] uint dst
        ) => Underlying.Value!.CopyProperties(src, dst);

        [NativeFunction("SDL3", EntryPoint = "CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_AudioStream* CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => Underlying.Value!.CreateAudioStream(src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_AudioStream> CreateAudioStream(
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            {
                return (SDL_AudioStream*)CreateAudioStream(__dsl_src_spec, __dsl_dst_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Cursor* CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
            Underlying.Value!.CreateColorCursor(surface, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (SDL_Cursor*)CreateColorCursor(__dsl_surface, hot_x, hot_y);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Condition> CreateCondition() => Underlying.Value!.CreateCondition();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Condition* CreateConditionRaw() => Underlying.Value!.CreateConditionRaw();

        [NativeFunction("SDL3", EntryPoint = "CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Cursor* CreateCursor(
            [NativeTypeName("const Uint8 *")] byte* data,
            [NativeTypeName("const Uint8 *")] byte* mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        ) => Underlying.Value!.CreateCursor(data, mask, w, h, hot_x, hot_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> CreateCursor(
            [NativeTypeName("const Uint8 *")] Ref<byte> data,
            [NativeTypeName("const Uint8 *")] Ref<byte> mask,
            int w,
            int h,
            int hot_x,
            int hot_y
        )
        {
            fixed (byte* __dsl_mask = mask)
            fixed (byte* __dsl_data = data)
            {
                return (SDL_Cursor*)CreateCursor(__dsl_data, __dsl_mask, w, h, hot_x, hot_y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.CreateDirectory(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (int)CreateDirectory(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateHapticEffect(
            SDL_Haptic* haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => Underlying.Value!.CreateHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateHapticEffect(
            Ref<SDL_Haptic> haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)CreateHapticEffect(__dsl_haptic, __dsl_effect);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Mutex> CreateMutex() => Underlying.Value!.CreateMutex();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Mutex* CreateMutexRaw() => Underlying.Value!.CreateMutexRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Palette> CreatePalette(int ncolors) =>
            Underlying.Value!.CreatePalette(ncolors);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Palette* CreatePaletteRaw(int ncolors) =>
            Underlying.Value!.CreatePaletteRaw(ncolors);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<PixelFormat> CreatePixelFormat(PixelFormatEnum pixel_format) =>
            Underlying.Value!.CreatePixelFormat(pixel_format);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PixelFormat* CreatePixelFormatRaw(PixelFormatEnum pixel_format) =>
            Underlying.Value!.CreatePixelFormatRaw(pixel_format);

        [NativeFunction("SDL3", EntryPoint = "CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* CreatePopupWindow(
            SDL_Window* parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        ) => Underlying.Value!.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> CreatePopupWindow(
            Ref<SDL_Window> parent,
            int offset_x,
            int offset_y,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        )
        {
            fixed (SDL_Window* __dsl_parent = parent)
            {
                return (SDL_Window*)CreatePopupWindow(
                    __dsl_parent,
                    offset_x,
                    offset_y,
                    w,
                    h,
                    flags
                );
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "CreateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint CreateProperties() => Underlying.Value!.CreateProperties();

        [NativeFunction("SDL3", EntryPoint = "CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Renderer* CreateRenderer(
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Uint32")] uint flags
        ) => Underlying.Value!.CreateRenderer(window, name, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> CreateRenderer(
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Uint32")] uint flags
        )
        {
            fixed (sbyte* __dsl_name = name)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (SDL_Renderer*)CreateRenderer(__dsl_window, __dsl_name, flags);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> CreateRendererWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateRendererWithProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Renderer* CreateRendererWithPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateRendererWithPropertiesRaw(props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_RWLock> CreateRWLock() => Underlying.Value!.CreateRWLock();

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_RWLock* CreateRWLockRaw() => Underlying.Value!.CreateRWLockRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Semaphore> CreateSemaphore(
            [NativeTypeName("Uint32")] uint initial_value
        ) => Underlying.Value!.CreateSemaphore(initial_value);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Semaphore* CreateSemaphoreRaw(
            [NativeTypeName("Uint32")] uint initial_value
        ) => Underlying.Value!.CreateSemaphoreRaw(initial_value);

        [NativeFunction("SDL3", EntryPoint = "CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Renderer* CreateSoftwareRenderer(Surface* surface) =>
            Underlying.Value!.CreateSoftwareRenderer(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> CreateSoftwareRenderer(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (SDL_Renderer*)CreateSoftwareRenderer(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => Underlying.Value!.CreateStorageDirectory(storage, path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)CreateStorageDirectory(__dsl_storage, __dsl_path);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurface(int width, int height, PixelFormatEnum format) =>
            Underlying.Value!.CreateSurface(width, height, format);

        [NativeFunction("SDL3", EntryPoint = "CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* CreateSurfaceFrom(
            void* pixels,
            int width,
            int height,
            int pitch,
            PixelFormatEnum format
        ) => Underlying.Value!.CreateSurfaceFrom(pixels, width, height, pitch, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> CreateSurfaceFrom(
            Ref pixels,
            int width,
            int height,
            int pitch,
            PixelFormatEnum format
        )
        {
            fixed (void* __dsl_pixels = pixels)
            {
                return (Surface*)CreateSurfaceFrom(__dsl_pixels, width, height, pitch, format);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* CreateSurfaceRaw(int width, int height, PixelFormatEnum format) =>
            Underlying.Value!.CreateSurfaceRaw(width, height, format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> CreateSystemCursor(SystemCursor id) =>
            Underlying.Value!.CreateSystemCursor(id);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Cursor* CreateSystemCursorRaw(SystemCursor id) =>
            Underlying.Value!.CreateSystemCursorRaw(id);

        [NativeFunction("SDL3", EntryPoint = "CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Texture* CreateTexture(
            SDL_Renderer* renderer,
            PixelFormatEnum format,
            int access,
            int w,
            int h
        ) => Underlying.Value!.CreateTexture(renderer, format, access, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> CreateTexture(
            Ref<SDL_Renderer> renderer,
            PixelFormatEnum format,
            int access,
            int w,
            int h
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)CreateTexture(__dsl_renderer, format, access, w, h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Texture* CreateTextureFromSurface(
            SDL_Renderer* renderer,
            Surface* surface
        ) => Underlying.Value!.CreateTextureFromSurface(renderer, surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> CreateTextureFromSurface(
            Ref<SDL_Renderer> renderer,
            Ref<Surface> surface
        )
        {
            fixed (Surface* __dsl_surface = surface)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)CreateTextureFromSurface(__dsl_renderer, __dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Texture* CreateTextureWithProperties(
            SDL_Renderer* renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateTextureWithProperties(renderer, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> CreateTextureWithProperties(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)CreateTextureWithProperties(__dsl_renderer, props);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Thread* CreateThread(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] sbyte* name,
            void* data
        ) => Underlying.Value!.CreateThread(fn, name, data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Thread> CreateThread(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref data
        )
        {
            fixed (void* __dsl_data = data)
            fixed (sbyte* __dsl_name = name)
            {
                return (SDL_Thread*)CreateThread(fn, __dsl_name, __dsl_data);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateThreadWithStackSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Thread* CreateThreadWithStackSize(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const size_t")] nuint stacksize,
            void* data
        ) => Underlying.Value!.CreateThreadWithStackSize(fn, name, stacksize, data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithStackSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Thread> CreateThreadWithStackSize(
            [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const size_t")] nuint stacksize,
            Ref data
        )
        {
            fixed (void* __dsl_data = data)
            fixed (sbyte* __dsl_name = name)
            {
                return (SDL_Thread*)CreateThreadWithStackSize(
                    fn,
                    __dsl_name,
                    stacksize,
                    __dsl_data
                );
            }
        }

        [return: NativeTypeName("SDL_TLSID")]
        [NativeFunction("SDL3", EntryPoint = "CreateTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint CreateTLS() => Underlying.Value!.CreateTLS();

        [NativeFunction("SDL3", EntryPoint = "CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* CreateWindow(
            [NativeTypeName("const char *")] sbyte* title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        ) => Underlying.Value!.CreateWindow(title, w, h, flags);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> CreateWindow(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int w,
            int h,
            [NativeTypeName("SDL_WindowFlags")] uint flags
        )
        {
            fixed (sbyte* __dsl_title = title)
            {
                return (SDL_Window*)CreateWindow(__dsl_title, w, h, flags);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateWindowAndRenderer(
            [NativeTypeName("const char *")] sbyte* title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] uint window_flags,
            SDL_Window** window,
            SDL_Renderer** renderer
        ) =>
            Underlying.Value!.CreateWindowAndRenderer(
                title,
                width,
                height,
                window_flags,
                window,
                renderer
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CreateWindowAndRenderer(
            [NativeTypeName("const char *")] Ref<sbyte> title,
            int width,
            int height,
            [NativeTypeName("SDL_WindowFlags")] uint window_flags,
            Ref2D<SDL_Window> window,
            Ref2D<SDL_Renderer> renderer
        )
        {
            fixed (SDL_Renderer** __dsl_renderer = renderer)
            fixed (SDL_Window** __dsl_window = window)
            fixed (sbyte* __dsl_title = title)
            {
                return (int)CreateWindowAndRenderer(
                    __dsl_title,
                    width,
                    height,
                    window_flags,
                    __dsl_window,
                    __dsl_renderer
                );
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> CreateWindowWithProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateWindowWithProperties(props);

        [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* CreateWindowWithPropertiesRaw(
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.CreateWindowWithPropertiesRaw(props);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> CursorVisible() => Underlying.Value!.CursorVisible();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int CursorVisibleRaw() => Underlying.Value!.CursorVisibleRaw();

        [NativeFunction("SDL3", EntryPoint = "DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
            [NativeTypeName("SDL_Time *")] long* ticks
        ) => Underlying.Value!.DateTimeToTime(dt, ticks);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DateTimeToTime(
            [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
            [NativeTypeName("SDL_Time *")] Ref<long> ticks
        )
        {
            fixed (long* __dsl_ticks = ticks)
            fixed (DateTime* __dsl_dt = dt)
            {
                return (int)DateTimeToTime(__dsl_dt, __dsl_ticks);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "Delay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void Delay([NativeTypeName("Uint32")] uint ms) => Underlying.Value!.Delay(ms);

        [NativeFunction("SDL3", EntryPoint = "DelayNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelayNS([NativeTypeName("Uint64")] ulong ns) =>
            Underlying.Value!.DelayNS(ns);

        [NativeFunction("SDL3", EntryPoint = "DelEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => Underlying.Value!.DelEventWatch(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DelEventWatch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelEventWatch(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                DelEventWatch(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DelHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelHintCallback(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            void* userdata
        ) => Underlying.Value!.DelHintCallback(name, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DelHintCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DelHintCallback(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_HintCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_name = name)
            {
                DelHintCallback(__dsl_name, callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAudioStream(SDL_AudioStream* stream) =>
            Underlying.Value!.DestroyAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                DestroyAudioStream(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCondition(SDL_Condition* cond) =>
            Underlying.Value!.DestroyCondition(cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCondition(Ref<SDL_Condition> cond)
        {
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                DestroyCondition(__dsl_cond);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCursor(SDL_Cursor* cursor) =>
            Underlying.Value!.DestroyCursor(cursor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyCursor(Ref<SDL_Cursor> cursor)
        {
            fixed (SDL_Cursor* __dsl_cursor = cursor)
            {
                DestroyCursor(__dsl_cursor);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyHapticEffect(SDL_Haptic* haptic, int effect) =>
            Underlying.Value!.DestroyHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyHapticEffect(Ref<SDL_Haptic> haptic, int effect)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                DestroyHapticEffect(__dsl_haptic, effect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMutex(SDL_Mutex* mutex) => Underlying.Value!.DestroyMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                DestroyMutex(__dsl_mutex);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPalette(Palette* palette) =>
            Underlying.Value!.DestroyPalette(palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPalette(Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            {
                DestroyPalette(__dsl_palette);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPixelFormat(PixelFormat* format) =>
            Underlying.Value!.DestroyPixelFormat(format);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyPixelFormat(Ref<PixelFormat> format)
        {
            fixed (PixelFormat* __dsl_format = format)
            {
                DestroyPixelFormat(__dsl_format);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            Underlying.Value!.DestroyProperties(props);

        [NativeFunction("SDL3", EntryPoint = "DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderer(SDL_Renderer* renderer) =>
            Underlying.Value!.DestroyRenderer(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRenderer(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                DestroyRenderer(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRWLock(SDL_RWLock* rwlock) =>
            Underlying.Value!.DestroyRWLock(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyRWLock(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                DestroyRWLock(__dsl_rwlock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(SDL_Semaphore* sem) =>
            Underlying.Value!.DestroySemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                DestroySemaphore(__dsl_sem);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurface(Surface* surface) =>
            Underlying.Value!.DestroySurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroySurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                DestroySurface(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTexture(SDL_Texture* texture) =>
            Underlying.Value!.DestroyTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyTexture(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                DestroyTexture(__dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyWindow(SDL_Window* window) =>
            Underlying.Value!.DestroyWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DestroyWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                DestroyWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DestroyWindowSurface(SDL_Window* window) =>
            Underlying.Value!.DestroyWindowSurface(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DestroyWindowSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)DestroyWindowSurface(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DetachThread(SDL_Thread* thread) =>
            Underlying.Value!.DetachThread(thread);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void DetachThread(Ref<SDL_Thread> thread)
        {
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                DetachThread(__dsl_thread);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "DetachVirtualJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DetachVirtualJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.DetachVirtualJoystick(instance_id);

        [NativeFunction("SDL3", EntryPoint = "DisableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int DisableScreenSaver() => Underlying.Value!.DisableScreenSaver();

        [NativeFunction("SDL3", EntryPoint = "DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* DuplicateSurface(Surface* surface) =>
            Underlying.Value!.DuplicateSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> DuplicateSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (Surface*)DuplicateSurface(__dsl_surface);
            }
        }

        [return: NativeTypeName("SDL_EGLConfig")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentEGLConfig() => Underlying.Value!.EGLGetCurrentEGLConfig();

        [return: NativeTypeName("SDL_EGLConfig")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* EGLGetCurrentEGLConfigRaw() =>
            Underlying.Value!.EGLGetCurrentEGLConfigRaw();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetCurrentEGLDisplay() => Underlying.Value!.EGLGetCurrentEGLDisplay();

        [return: NativeTypeName("SDL_EGLDisplay")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* EGLGetCurrentEGLDisplayRaw() =>
            Underlying.Value!.EGLGetCurrentEGLDisplayRaw();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "EGLGetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> EGLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        ) => Underlying.Value!.EGLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> EGLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (delegate* unmanaged<void>)EGLGetProcAddress(__dsl_proc);
            }
        }

        [return: NativeTypeName("SDL_EGLSurface")]
        [NativeFunction("SDL3", EntryPoint = "EGLGetWindowEGLSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* EGLGetWindowEGLSurface(SDL_Window* window) =>
            Underlying.Value!.EGLGetWindowEGLSurface(window);

        [return: NativeTypeName("SDL_EGLSurface")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowEGLSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr EGLGetWindowEGLSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)EGLGetWindowEGLSurface(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "EGLSetEGLAttributeCallbacks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void EGLSetEGLAttributeCallbacks(
            [NativeTypeName("SDL_EGLAttribArrayCallback")]
                delegate* unmanaged<nint*> platformAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")]
                delegate* unmanaged<int*> surfaceAttribCallback,
            [NativeTypeName("SDL_EGLIntArrayCallback")]
                delegate* unmanaged<int*> contextAttribCallback
        ) =>
            Underlying.Value!.EGLSetEGLAttributeCallbacks(
                platformAttribCallback,
                surfaceAttribCallback,
                contextAttribCallback
            );

        [NativeFunction("SDL3", EntryPoint = "EnableScreenSaver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnableScreenSaver() => Underlying.Value!.EnableScreenSaver();

        [NativeFunction("SDL3", EntryPoint = "EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            void* userdata
        ) => Underlying.Value!.EnumerateDirectory(path, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            {
                return (int)EnumerateDirectory(__dsl_path, callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                delegate* unmanaged<void*, uint, sbyte*, void> callback,
            void* userdata
        ) => Underlying.Value!.EnumerateProperties(props, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateProperties(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("SDL_EnumeratePropertiesCallback")]
                delegate* unmanaged<void*, uint, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)EnumerateProperties(props, callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            void* userdata
        ) => Underlying.Value!.EnumerateStorageDirectory(storage, path, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EnumerateStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("SDL_EnumerateDirectoryCallback")]
                delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)EnumerateStorageDirectory(
                    __dsl_storage,
                    __dsl_path,
                    callback,
                    __dsl_userdata
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "Error")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int Error(Errorcode code) => Underlying.Value!.Error(code);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> EventEnabled([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.EventEnabled(type);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.EventEnabledRaw(type);

        [NativeFunction("SDL3", EntryPoint = "FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FillSurfaceRect(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("Uint32")] uint color
        ) => Underlying.Value!.FillSurfaceRect(dst, rect, color);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FillSurfaceRect(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_dst = dst)
            {
                return (int)FillSurfaceRect(__dsl_dst, __dsl_rect, color);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FillSurfaceRects(
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        ) => Underlying.Value!.FillSurfaceRects(dst, rects, count, color);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FillSurfaceRects(
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int count,
            [NativeTypeName("Uint32")] uint color
        )
        {
            fixed (Rect* __dsl_rects = rects)
            fixed (Surface* __dsl_dst = dst)
            {
                return (int)FillSurfaceRects(__dsl_dst, __dsl_rects, count, color);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => Underlying.Value!.FilterEvents(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FilterEvents(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                FilterEvents(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlashWindow(SDL_Window* window, FlashOperation operation) =>
            Underlying.Value!.FlashWindow(window, operation);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlashWindow(Ref<SDL_Window> window, FlashOperation operation)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)FlashWindow(__dsl_window, operation);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlipSurface(Surface* surface, FlipMode flip) =>
            Underlying.Value!.FlipSurface(surface, flip);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlipSurface(Ref<Surface> surface, FlipMode flip)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)FlipSurface(__dsl_surface, flip);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlushAudioStream(SDL_AudioStream* stream) =>
            Underlying.Value!.FlushAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlushAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)FlushAudioStream(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "FlushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FlushEvent([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.FlushEvent(type);

        [NativeFunction("SDL3", EntryPoint = "FlushEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void FlushEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.FlushEvents(minType, maxType);

        [NativeFunction("SDL3", EntryPoint = "FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlushRenderer(SDL_Renderer* renderer) =>
            Underlying.Value!.FlushRenderer(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int FlushRenderer(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)FlushRenderer(__dsl_renderer);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GamepadConnected(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GamepadConnected(gamepad);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadConnected(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadConnected(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadEventsEnabled() =>
            Underlying.Value!.GamepadEventsEnabled();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GamepadEventsEnabledRaw() => Underlying.Value!.GamepadEventsEnabledRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GamepadHasAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
            Underlying.Value!.GamepadHasAxis(gamepad, axis);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadHasAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadHasAxis(__dsl_gamepad, axis);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GamepadHasButton(SDL_Gamepad* gamepad, GamepadButton button) =>
            Underlying.Value!.GamepadHasButton(gamepad, button);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadHasButton(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadHasButton(__dsl_gamepad, button);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GamepadHasSensor(SDL_Gamepad* gamepad, SensorType type) =>
            Underlying.Value!.GamepadHasSensor(gamepad, type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadHasSensor(Ref<SDL_Gamepad> gamepad, SensorType type)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadHasSensor(__dsl_gamepad, type);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GamepadSensorEnabled(SDL_Gamepad* gamepad, SensorType type) =>
            Underlying.Value!.GamepadSensorEnabled(gamepad, type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GamepadSensorEnabled(Ref<SDL_Gamepad> gamepad, SensorType type)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (MaybeBool<int>)(int)GamepadSensorEnabled(__dsl_gamepad, type);
            }
        }

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
            void** puserdata
        ) => Underlying.Value!.GetAssertionHandler(puserdata);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
            Ref2D puserdata
        )
        {
            fixed (void** __dsl_puserdata = puserdata)
            {
                return (delegate* unmanaged<AssertData*, void*, AssertState>)GetAssertionHandler(
                    __dsl_puserdata
                );
            }
        }

        [return: NativeTypeName("const SDL_AssertData *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<AssertData> GetAssertionReport() =>
            Underlying.Value!.GetAssertionReport();

        [return: NativeTypeName("const SDL_AssertData *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertData* GetAssertionReportRaw() =>
            Underlying.Value!.GetAssertionReportRaw();

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioCaptureDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetAudioCaptureDevices(int* count) =>
            Underlying.Value!.GetAudioCaptureDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioCaptureDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioCaptureDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioCaptureDevices(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            AudioSpec* spec,
            int* sample_frames
        ) => Underlying.Value!.GetAudioDeviceFormat(devid, spec, sample_frames);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioDeviceFormat(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            Ref<AudioSpec> spec,
            Ref<int> sample_frames
        )
        {
            fixed (int* __dsl_sample_frames = sample_frames)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (int)GetAudioDeviceFormat(devid, __dsl_spec, __dsl_sample_frames);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDeviceName(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        ) => Underlying.Value!.GetAudioDeviceName(devid);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetAudioDeviceNameRaw(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid
        ) => Underlying.Value!.GetAudioDeviceNameRaw(devid);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetAudioDriver(int index) =>
            Underlying.Value!.GetAudioDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetAudioDriverRaw(int index) =>
            Underlying.Value!.GetAudioDriverRaw(index);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioOutputDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetAudioOutputDevices(int* count) =>
            Underlying.Value!.GetAudioOutputDevices(count);

        [return: NativeTypeName("SDL_AudioDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioOutputDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetAudioOutputDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetAudioOutputDevices(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamAvailable(SDL_AudioStream* stream) =>
            Underlying.Value!.GetAudioStreamAvailable(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamAvailable(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamAvailable(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len) =>
            Underlying.Value!.GetAudioStreamData(stream, buf, len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamData(Ref<SDL_AudioStream> stream, Ref buf, int len)
        {
            fixed (void* __dsl_buf = buf)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamData(__dsl_stream, __dsl_buf, len);
            }
        }

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamDevice(SDL_AudioStream* stream) =>
            Underlying.Value!.GetAudioStreamDevice(stream);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamDevice(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (uint)GetAudioStreamDevice(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamFormat(
            SDL_AudioStream* stream,
            AudioSpec* src_spec,
            AudioSpec* dst_spec
        ) => Underlying.Value!.GetAudioStreamFormat(stream, src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamFormat(
            Ref<SDL_AudioStream> stream,
            Ref<AudioSpec> src_spec,
            Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamFormat(__dsl_stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetAudioStreamFrequencyRatio(SDL_AudioStream* stream) =>
            Underlying.Value!.GetAudioStreamFrequencyRatio(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (float)GetAudioStreamFrequencyRatio(__dsl_stream);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamProperties(SDL_AudioStream* stream) =>
            Underlying.Value!.GetAudioStreamProperties(stream);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetAudioStreamProperties(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (uint)GetAudioStreamProperties(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamQueued(SDL_AudioStream* stream) =>
            Underlying.Value!.GetAudioStreamQueued(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetAudioStreamQueued(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)GetAudioStreamQueued(__dsl_stream);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetBasePath() => Underlying.Value!.GetBasePath();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetBasePathRaw() => Underlying.Value!.GetBasePathRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int default_value
        ) => Underlying.Value!.GetBooleanProperty(props, name, default_value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)
                    (int)GetBooleanProperty(props, __dsl_name, (int)default_value);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraDeviceName(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => Underlying.Value!.GetCameraDeviceName(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCameraDeviceNameRaw(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => Underlying.Value!.GetCameraDeviceNameRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetCameraDevicePosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraPosition GetCameraDevicePosition(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
        ) => Underlying.Value!.GetCameraDevicePosition(instance_id);

        [return: NativeTypeName("SDL_CameraDeviceID *")]
        [NativeFunction("SDL3", EntryPoint = "GetCameraDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetCameraDevices(int* count) =>
            Underlying.Value!.GetCameraDevices(count);

        [return: NativeTypeName("SDL_CameraDeviceID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetCameraDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetCameraDevices(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetCameraDeviceSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static CameraSpec* GetCameraDeviceSupportedFormats(
            [NativeTypeName("SDL_CameraDeviceID")] uint devid,
            int* count
        ) => Underlying.Value!.GetCameraDeviceSupportedFormats(devid, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceSupportedFormats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<CameraSpec> GetCameraDeviceSupportedFormats(
            [NativeTypeName("SDL_CameraDeviceID")] uint devid,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (CameraSpec*)GetCameraDeviceSupportedFormats(devid, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCameraDriver(int index) =>
            Underlying.Value!.GetCameraDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCameraDriverRaw(int index) =>
            Underlying.Value!.GetCameraDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraFormat(SDL_Camera* camera, CameraSpec* spec) =>
            Underlying.Value!.GetCameraFormat(camera, spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraFormat(Ref<SDL_Camera> camera, Ref<CameraSpec> spec)
        {
            fixed (CameraSpec* __dsl_spec = spec)
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (int)GetCameraFormat(__dsl_camera, __dsl_spec);
            }
        }

        [return: NativeTypeName("SDL_CameraDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "GetCameraInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraInstanceID(SDL_Camera* camera) =>
            Underlying.Value!.GetCameraInstanceID(camera);

        [return: NativeTypeName("SDL_CameraDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraInstanceID(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (uint)GetCameraInstanceID(__dsl_camera);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraPermissionState(SDL_Camera* camera) =>
            Underlying.Value!.GetCameraPermissionState(camera);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCameraPermissionState(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (int)GetCameraPermissionState(__dsl_camera);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraProperties(SDL_Camera* camera) =>
            Underlying.Value!.GetCameraProperties(camera);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetCameraProperties(Ref<SDL_Camera> camera)
        {
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (uint)GetCameraProperties(__dsl_camera);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetClipboardData(
            [NativeTypeName("const char *")] sbyte* mime_type,
            [NativeTypeName("size_t *")] nuint* size
        ) => Underlying.Value!.GetClipboardData(mime_type, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (void*)GetClipboardData(__dsl_mime_type, __dsl_size);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetClipboardText() => Underlying.Value!.GetClipboardText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetClipboardTextRaw() => Underlying.Value!.GetClipboardTextRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("SDL_bool")] int include_high_density_modes
        ) =>
            Underlying.Value!.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes
            );

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetClosestFullscreenDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int w,
            int h,
            float refresh_rate,
            [NativeTypeName("SDL_bool")] MaybeBool<int> include_high_density_modes
        ) =>
            Underlying.Value!.GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                include_high_density_modes
            );

        [NativeFunction("SDL3", EntryPoint = "GetCPUCacheLineSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCPUCacheLineSize() => Underlying.Value!.GetCPUCacheLineSize();

        [NativeFunction("SDL3", EntryPoint = "GetCPUCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCPUCount() => Underlying.Value!.GetCPUCount();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentAudioDriver() =>
            Underlying.Value!.GetCurrentAudioDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCurrentAudioDriverRaw() =>
            Underlying.Value!.GetCurrentAudioDriverRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentCameraDriver() =>
            Underlying.Value!.GetCurrentCameraDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCurrentCameraDriverRaw() =>
            Underlying.Value!.GetCurrentCameraDriverRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetCurrentDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetCurrentDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetCurrentDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetCurrentDisplayModeRaw(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetCurrentDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayOrientation GetCurrentDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetCurrentDisplayOrientation(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
            Underlying.Value!.GetCurrentRenderOutputSize(renderer, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCurrentRenderOutputSize(
            Ref<SDL_Renderer> renderer,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetCurrentRenderOutputSize(__dsl_renderer, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "GetCurrentThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetCurrentThreadID() => Underlying.Value!.GetCurrentThreadID();

        [NativeFunction("SDL3", EntryPoint = "GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
            Underlying.Value!.GetCurrentTime(ticks);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks)
        {
            fixed (long* __dsl_ticks = ticks)
            {
                return (int)GetCurrentTime(__dsl_ticks);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetCurrentVideoDriver() =>
            Underlying.Value!.GetCurrentVideoDriver();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetCurrentVideoDriverRaw() =>
            Underlying.Value!.GetCurrentVideoDriverRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> GetCursor() => Underlying.Value!.GetCursor();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Cursor* GetCursorRaw() => Underlying.Value!.GetCursorRaw();

        [NativeFunction("SDL3", EntryPoint = "GetDayOfWeek")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDayOfWeek(int year, int month, int day) =>
            Underlying.Value!.GetDayOfWeek(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "GetDayOfYear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDayOfYear(int year, int month, int day) =>
            Underlying.Value!.GetDayOfYear(year, month, day);

        [NativeFunction("SDL3", EntryPoint = "GetDaysInMonth")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDaysInMonth(int year, int month) =>
            Underlying.Value!.GetDaysInMonth(year, month);

        [return: NativeTypeName("SDL_AssertionHandler")]
        [NativeFunction("SDL3", EntryPoint = "GetDefaultAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<
            AssertData*,
            void*,
            AssertState> GetDefaultAssertionHandler() =>
            Underlying.Value!.GetDefaultAssertionHandler();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Cursor> GetDefaultCursor() => Underlying.Value!.GetDefaultCursor();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Cursor* GetDefaultCursorRaw() => Underlying.Value!.GetDefaultCursorRaw();

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetDesktopDisplayMode(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetDesktopDisplayMode(displayID);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetDesktopDisplayModeRaw(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetDesktopDisplayModeRaw(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => Underlying.Value!.GetDisplayBounds(displayID, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDisplayBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (int)GetDisplayBounds(displayID, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetDisplayContentScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetDisplayContentScale(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetDisplayContentScale(displayID);

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
            Underlying.Value!.GetDisplayForPoint(point);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForPoint(
            [NativeTypeName("const SDL_Point *")] Ref<Point> point
        )
        {
            fixed (Point* __dsl_point = point)
            {
                return (uint)GetDisplayForPoint(__dsl_point);
            }
        }

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
            Underlying.Value!.GetDisplayForRect(rect);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (uint)GetDisplayForRect(__dsl_rect);
            }
        }

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForWindow(SDL_Window* window) =>
            Underlying.Value!.GetDisplayForWindow(window);

        [return: NativeTypeName("SDL_DisplayID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayForWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetDisplayForWindow(__dsl_window);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            Underlying.Value!.GetDisplayName(displayID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            Underlying.Value!.GetDisplayNameRaw(displayID);

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplayProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
            Underlying.Value!.GetDisplayProperties(displayID);

        [return: NativeTypeName("SDL_DisplayID *")]
        [NativeFunction("SDL3", EntryPoint = "GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetDisplays(int* count) => Underlying.Value!.GetDisplays(count);

        [return: NativeTypeName("SDL_DisplayID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetDisplays(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetDisplays(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Rect* rect
        ) => Underlying.Value!.GetDisplayUsableBounds(displayID, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetDisplayUsableBounds(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (int)GetDisplayUsableBounds(displayID, __dsl_rect);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetError() => Underlying.Value!.GetError();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetErrorRaw() => Underlying.Value!.GetErrorRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
            void** userdata
        ) => Underlying.Value!.GetEventFilter(filter, userdata);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetEventFilter(
            [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            {
                return (MaybeBool<int>)(int)GetEventFilter(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float default_value
        ) => Underlying.Value!.GetFloatProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (float)GetFloatProperty(props, __dsl_name, default_value);
            }
        }

        [return: NativeTypeName("const SDL_DisplayMode **")]
        [NativeFunction("SDL3", EntryPoint = "GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode** GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            int* count
        ) => Underlying.Value!.GetFullscreenDisplayModes(displayID, count);

        [return: NativeTypeName("const SDL_DisplayMode **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<DisplayMode> GetFullscreenDisplayModes(
            [NativeTypeName("SDL_DisplayID")] uint displayID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (DisplayMode**)GetFullscreenDisplayModes(displayID, __dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadAppleSFSymbolsNameForAxis(
            SDL_Gamepad* gamepad,
            GamepadAxis axis
        ) => Underlying.Value!.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
            Ref<SDL_Gamepad> gamepad,
            GamepadAxis axis
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadAppleSFSymbolsNameForAxis(__dsl_gamepad, axis);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadAppleSFSymbolsNameForButton(
            SDL_Gamepad* gamepad,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadAppleSFSymbolsNameForButton(__dsl_gamepad, button);
            }
        }

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetGamepadAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
            Underlying.Value!.GetGamepadAxis(gamepad, axis);

        [return: NativeTypeName("Sint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetGamepadAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (short)GetGamepadAxis(__dsl_gamepad, axis);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.GetGamepadAxisFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadAxis GetGamepadAxisFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadAxis)GetGamepadAxisFromString(__dsl_str);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadBinding** GetGamepadBindings(SDL_Gamepad* gamepad, int* count) =>
            Underlying.Value!.GetGamepadBindings(gamepad, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<GamepadBinding> GetGamepadBindings(
            Ref<SDL_Gamepad> gamepad,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadBinding**)GetGamepadBindings(__dsl_gamepad, __dsl_count);
            }
        }

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetGamepadButton(SDL_Gamepad* gamepad, GamepadButton button) =>
            Underlying.Value!.GetGamepadButton(gamepad, button);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetGamepadButton(Ref<SDL_Gamepad> gamepad, GamepadButton button)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (byte)GetGamepadButton(__dsl_gamepad, button);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.GetGamepadButtonFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButton GetGamepadButtonFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadButton)GetGamepadButtonFromString(__dsl_str);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButtonLabel GetGamepadButtonLabel(
            SDL_Gamepad* gamepad,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadButtonLabel(gamepad, button);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButtonLabel GetGamepadButtonLabel(
            Ref<SDL_Gamepad> gamepad,
            GamepadButton button
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadButtonLabel)GetGamepadButtonLabel(__dsl_gamepad, button);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonLabelForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadButtonLabel GetGamepadButtonLabelForType(
            GamepadType type,
            GamepadButton button
        ) => Underlying.Value!.GetGamepadButtonLabelForType(type, button);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetGamepadConnectionState(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadConnectionState(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetGamepadConnectionState(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (JoystickConnectionState)GetGamepadConnectionState(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadFirmwareVersion(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadFirmwareVersion(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadFirmwareVersion(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadFirmwareVersion(__dsl_gamepad);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Gamepad> GetGamepadFromInstanceID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Gamepad* GetGamepadFromInstanceIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadFromInstanceIDRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Gamepad> GetGamepadFromPlayerIndex(int player_index) =>
            Underlying.Value!.GetGamepadFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Gamepad* GetGamepadFromPlayerIndexRaw(int player_index) =>
            Underlying.Value!.GetGamepadFromPlayerIndexRaw(player_index);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetGamepadInstanceGuid(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceGuid(instance_id);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadInstanceID(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadInstanceID(gamepad);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadInstanceID(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (uint)GetGamepadInstanceID(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadInstanceMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceMapping(instance_id);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadInstanceMappingRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceMappingRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadInstanceName(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadInstanceNameRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceNameRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadInstancePath(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstancePath(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadInstancePathRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstancePathRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstancePlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadInstancePlayerIndex(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstancePlayerIndex(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadInstanceProduct(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceProduct(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadInstanceProductVersion(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceProductVersion(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceType(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadInstanceVendor(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetGamepadInstanceVendor(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Joystick* GetGamepadJoystick(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadJoystick(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> GetGamepadJoystick(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (SDL_Joystick*)GetGamepadJoystick(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadMapping(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadMapping(gamepad);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMapping(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadMapping(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadMappingForGuid(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid
        ) => Underlying.Value!.GetGamepadMappingForGuid(guid);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadMappingForGuidRaw(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid
        ) => Underlying.Value!.GetGamepadMappingForGuidRaw(guid);

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GetGamepadMappings(int* count) =>
            Underlying.Value!.GetGamepadMappings(count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GetGamepadMappings(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (sbyte**)GetGamepadMappings(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadName(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadName(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadName(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadName(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadPath(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadPath(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadPath(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadPath(__dsl_gamepad);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadPlayerIndex(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadPlayerIndex(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetGamepadPlayerIndex(__dsl_gamepad);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent) =>
            Underlying.Value!.GetGamepadPowerInfo(gamepad, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetGamepadPowerInfo(Ref<SDL_Gamepad> gamepad, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (PowerState)GetGamepadPowerInfo(__dsl_gamepad, __dsl_percent);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProduct(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadProduct(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProduct(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadProduct(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProductVersion(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadProductVersion(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadProductVersion(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadProductVersion(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadProperties(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadProperties(gamepad);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGamepadProperties(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (uint)GetGamepadProperties(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetGamepads(int* count) => Underlying.Value!.GetGamepads(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetGamepads(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetGamepads(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadSensorData(
            SDL_Gamepad* gamepad,
            SensorType type,
            float* data,
            int num_values
        ) => Underlying.Value!.GetGamepadSensorData(gamepad, type, data, num_values);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadSensorData(
            Ref<SDL_Gamepad> gamepad,
            SensorType type,
            Ref<float> data,
            int num_values
        )
        {
            fixed (float* __dsl_data = data)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetGamepadSensorData(__dsl_gamepad, type, __dsl_data, num_values);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SensorType type) =>
            Underlying.Value!.GetGamepadSensorDataRate(gamepad, type);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetGamepadSensorDataRate(Ref<SDL_Gamepad> gamepad, SensorType type)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (float)GetGamepadSensorDataRate(__dsl_gamepad, type);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadSerial(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadSerial(gamepad);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadSerial(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (sbyte*)GetGamepadSerial(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetGamepadSteamHandle(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadSteamHandle(gamepad);

        [return: NativeTypeName("Uint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetGamepadSteamHandle(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ulong)GetGamepadSteamHandle(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
            Underlying.Value!.GetGamepadStringForAxis(axis);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis) =>
            Underlying.Value!.GetGamepadStringForAxisRaw(axis);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
            Underlying.Value!.GetGamepadStringForButton(button);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadStringForButtonRaw(GamepadButton button) =>
            Underlying.Value!.GetGamepadStringForButtonRaw(button);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
            Underlying.Value!.GetGamepadStringForType(type);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetGamepadStringForTypeRaw(GamepadType type) =>
            Underlying.Value!.GetGamepadStringForTypeRaw(type);

        [NativeFunction("SDL3", EntryPoint = "GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadTouchpadFinger(
            SDL_Gamepad* gamepad,
            int touchpad,
            int finger,
            [NativeTypeName("Uint8 *")] byte* state,
            float* x,
            float* y,
            float* pressure
        ) =>
            Underlying.Value!.GetGamepadTouchpadFinger(
                gamepad,
                touchpad,
                finger,
                state,
                x,
                y,
                pressure
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetGamepadTouchpadFinger(
            Ref<SDL_Gamepad> gamepad,
            int touchpad,
            int finger,
            [NativeTypeName("Uint8 *")] Ref<byte> state,
            Ref<float> x,
            Ref<float> y,
            Ref<float> pressure
        )
        {
            fixed (float* __dsl_pressure = pressure)
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            fixed (byte* __dsl_state = state)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetGamepadTouchpadFinger(
                    __dsl_gamepad,
                    touchpad,
                    finger,
                    __dsl_state,
                    __dsl_x,
                    __dsl_y,
                    __dsl_pressure
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadType(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadType(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadType(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadType)GetGamepadType(__dsl_gamepad);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] sbyte* str
        ) => Underlying.Value!.GetGamepadTypeFromString(str);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetGamepadTypeFromString(
            [NativeTypeName("const char *")] Ref<sbyte> str
        )
        {
            fixed (sbyte* __dsl_str = str)
            {
                return (GamepadType)GetGamepadTypeFromString(__dsl_str);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadVendor(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetGamepadVendor(gamepad);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetGamepadVendor(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (ushort)GetGamepadVendor(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalMouseState(float* x, float* y) =>
            Underlying.Value!.GetGlobalMouseState(x, y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetGlobalMouseState(__dsl_x, __dsl_y);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetGlobalProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetGlobalProperties() => Underlying.Value!.GetGlobalProperties();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetGrabbedWindow() => Underlying.Value!.GetGrabbedWindow();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GetGrabbedWindowRaw() => Underlying.Value!.GetGrabbedWindowRaw();

        [NativeFunction("SDL3", EntryPoint = "GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetHapticEffectStatus(SDL_Haptic* haptic, int effect) =>
            Underlying.Value!.GetHapticEffectStatus(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetHapticEffectStatus(Ref<SDL_Haptic> haptic, int effect)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetHapticEffectStatus(__dsl_haptic, effect);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticFeatures(SDL_Haptic* haptic) =>
            Underlying.Value!.GetHapticFeatures(haptic);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticFeatures(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (uint)GetHapticFeatures(__dsl_haptic);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> GetHapticFromInstanceID(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Haptic* GetHapticFromInstanceIDRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticFromInstanceIDRaw(instance_id);

        [return: NativeTypeName("SDL_HapticID")]
        [NativeFunction("SDL3", EntryPoint = "GetHapticInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticInstanceID(SDL_Haptic* haptic) =>
            Underlying.Value!.GetHapticInstanceID(haptic);

        [return: NativeTypeName("SDL_HapticID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetHapticInstanceID(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (uint)GetHapticInstanceID(__dsl_haptic);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticInstanceName(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetHapticInstanceNameRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.GetHapticInstanceNameRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetHapticName(SDL_Haptic* haptic) =>
            Underlying.Value!.GetHapticName(haptic);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHapticName(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (sbyte*)GetHapticName(__dsl_haptic);
            }
        }

        [return: NativeTypeName("SDL_HapticID *")]
        [NativeFunction("SDL3", EntryPoint = "GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetHaptics(int* count) => Underlying.Value!.GetHaptics(count);

        [return: NativeTypeName("SDL_HapticID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetHaptics(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetHaptics(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetHint([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetHint(name);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetHint(__dsl_name);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetHintBoolean(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int default_value
        ) => Underlying.Value!.GetHintBoolean(name, default_value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetHintBoolean(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)GetHintBoolean(__dsl_name, (int)default_value);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetIOProperties(SDL_IOStream* context) =>
            Underlying.Value!.GetIOProperties(context);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetIOProperties(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (uint)GetIOProperties(__dsl_context);
            }
        }

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetIOSize(SDL_IOStream* context) => Underlying.Value!.GetIOSize(context);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetIOSize(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (long)GetIOSize(__dsl_context);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStatus GetIOStatus(SDL_IOStream* context) =>
            Underlying.Value!.GetIOStatus(context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static IOStatus GetIOStatus(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (IOStatus)GetIOStatus(__dsl_context);
            }
        }

        [return: NativeTypeName("Sint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetJoystickAxis(SDL_Joystick* joystick, int axis) =>
            Underlying.Value!.GetJoystickAxis(joystick, axis);

        [return: NativeTypeName("Sint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static short GetJoystickAxis(Ref<SDL_Joystick> joystick, int axis)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (short)GetJoystickAxis(__dsl_joystick, axis);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickAxisInitialState(
            SDL_Joystick* joystick,
            int axis,
            [NativeTypeName("Sint16 *")] short* state
        ) => Underlying.Value!.GetJoystickAxisInitialState(joystick, axis, state);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetJoystickAxisInitialState(
            Ref<SDL_Joystick> joystick,
            int axis,
            [NativeTypeName("Sint16 *")] Ref<short> state
        )
        {
            fixed (short* __dsl_state = state)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (MaybeBool<int>)
                    (int)GetJoystickAxisInitialState(__dsl_joystick, axis, __dsl_state);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy) =>
            Underlying.Value!.GetJoystickBall(joystick, ball, dx, dy);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickBall(
            Ref<SDL_Joystick> joystick,
            int ball,
            Ref<int> dx,
            Ref<int> dy
        )
        {
            fixed (int* __dsl_dy = dy)
            fixed (int* __dsl_dx = dx)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetJoystickBall(__dsl_joystick, ball, __dsl_dx, __dsl_dy);
            }
        }

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickButton(SDL_Joystick* joystick, int button) =>
            Underlying.Value!.GetJoystickButton(joystick, button);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickButton(Ref<SDL_Joystick> joystick, int button)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (byte)GetJoystickButton(__dsl_joystick, button);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetJoystickConnectionState(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickConnectionState(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickConnectionState GetJoystickConnectionState(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (JoystickConnectionState)GetJoystickConnectionState(__dsl_joystick);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickFirmwareVersion(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickFirmwareVersion(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickFirmwareVersion(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickFirmwareVersion(__dsl_joystick);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> GetJoystickFromInstanceID(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Joystick* GetJoystickFromInstanceIDRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickFromInstanceIDRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> GetJoystickFromPlayerIndex(int player_index) =>
            Underlying.Value!.GetJoystickFromPlayerIndex(player_index);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Joystick* GetJoystickFromPlayerIndexRaw(int player_index) =>
            Underlying.Value!.GetJoystickFromPlayerIndexRaw(player_index);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuid(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickGuid(joystick);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuid(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (Guid)GetJoystickGuid(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuidFromString(
            [NativeTypeName("const char *")] sbyte* pchGUID
        ) => Underlying.Value!.GetJoystickGuidFromString(pchGUID);

        [return: NativeTypeName("SDL_JoystickGUID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickGuidFromString(
            [NativeTypeName("const char *")] Ref<sbyte> pchGUID
        )
        {
            fixed (sbyte* __dsl_pchGUID = pchGUID)
            {
                return (Guid)GetJoystickGuidFromString(__dsl_pchGUID);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetJoystickGuidInfo(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("Uint16 *")] ushort* vendor,
            [NativeTypeName("Uint16 *")] ushort* product,
            [NativeTypeName("Uint16 *")] ushort* version,
            [NativeTypeName("Uint16 *")] ushort* crc16
        ) => Underlying.Value!.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetJoystickGuidInfo(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
            [NativeTypeName("Uint16 *")] Ref<ushort> product,
            [NativeTypeName("Uint16 *")] Ref<ushort> version,
            [NativeTypeName("Uint16 *")] Ref<ushort> crc16
        )
        {
            fixed (ushort* __dsl_crc16 = crc16)
            fixed (ushort* __dsl_version = version)
            fixed (ushort* __dsl_product = product)
            fixed (ushort* __dsl_vendor = vendor)
            {
                GetJoystickGuidInfo(guid, __dsl_vendor, __dsl_product, __dsl_version, __dsl_crc16);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickGuidString(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        ) => Underlying.Value!.GetJoystickGuidString(guid, pszGUID, cbGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickGuidString(
            [NativeTypeName("SDL_JoystickGUID")] Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        )
        {
            fixed (sbyte* __dsl_pszGUID = pszGUID)
            {
                return (int)GetJoystickGuidString(guid, __dsl_pszGUID, cbGUID);
            }
        }

        [return: NativeTypeName("Uint8")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickHat(SDL_Joystick* joystick, int hat) =>
            Underlying.Value!.GetJoystickHat(joystick, hat);

        [return: NativeTypeName("Uint8")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte GetJoystickHat(Ref<SDL_Joystick> joystick, int hat)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (byte)GetJoystickHat(__dsl_joystick, hat);
            }
        }

        [return: NativeTypeName("SDL_JoystickGUID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetJoystickInstanceGuid(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceGuid(instance_id);

        [return: NativeTypeName("SDL_JoystickID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickInstanceID(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickInstanceID(joystick);

        [return: NativeTypeName("SDL_JoystickID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickInstanceID(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (uint)GetJoystickInstanceID(__dsl_joystick);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickInstanceName(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickInstanceNameRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceNameRaw(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickInstancePath(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstancePath(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickInstancePathRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstancePathRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstancePlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickInstancePlayerIndex(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstancePlayerIndex(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickInstanceProduct(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceProduct(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickInstanceProductVersion(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceProductVersion(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickType GetJoystickInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceType(instance_id);

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickInstanceVendor(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetJoystickInstanceVendor(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickName(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickName(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickName(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (sbyte*)GetJoystickName(__dsl_joystick);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickPath(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickPath(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickPath(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (sbyte*)GetJoystickPath(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickPlayerIndex(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickPlayerIndex(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetJoystickPlayerIndex(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetJoystickPlayerIndex(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent) =>
            Underlying.Value!.GetJoystickPowerInfo(joystick, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetJoystickPowerInfo(Ref<SDL_Joystick> joystick, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (PowerState)GetJoystickPowerInfo(__dsl_joystick, __dsl_percent);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProduct(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickProduct(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProduct(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickProduct(__dsl_joystick);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProductVersion(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickProductVersion(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickProductVersion(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickProductVersion(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickProperties(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickProperties(joystick);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetJoystickProperties(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (uint)GetJoystickProperties(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_JoystickID *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetJoysticks(int* count) => Underlying.Value!.GetJoysticks(count);

        [return: NativeTypeName("SDL_JoystickID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetJoysticks(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetJoysticks(__dsl_count);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetJoystickSerial(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickSerial(joystick);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetJoystickSerial(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (sbyte*)GetJoystickSerial(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickType GetJoystickType(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickType(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static JoystickType GetJoystickType(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (JoystickType)GetJoystickType(__dsl_joystick);
            }
        }

        [return: NativeTypeName("Uint16")]
        [NativeFunction("SDL3", EntryPoint = "GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickVendor(SDL_Joystick* joystick) =>
            Underlying.Value!.GetJoystickVendor(joystick);

        [return: NativeTypeName("Uint16")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ushort GetJoystickVendor(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (ushort)GetJoystickVendor(__dsl_joystick);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetKeyboardFocus() => Underlying.Value!.GetKeyboardFocus();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GetKeyboardFocusRaw() => Underlying.Value!.GetKeyboardFocusRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyboardInstanceName(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => Underlying.Value!.GetKeyboardInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetKeyboardInstanceNameRaw(
            [NativeTypeName("SDL_KeyboardID")] uint instance_id
        ) => Underlying.Value!.GetKeyboardInstanceNameRaw(instance_id);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetKeyboards(int* count) => Underlying.Value!.GetKeyboards(count);

        [return: NativeTypeName("SDL_KeyboardID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetKeyboards(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetKeyboards(__dsl_count);
            }
        }

        [return: NativeTypeName("const Uint8 *")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static byte* GetKeyboardState(int* numkeys) =>
            Underlying.Value!.GetKeyboardState(numkeys);

        [return: NativeTypeName("const Uint8 *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<byte> GetKeyboardState(Ref<int> numkeys)
        {
            fixed (int* __dsl_numkeys = numkeys)
            {
                return (byte*)GetKeyboardState(__dsl_numkeys);
            }
        }

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetKeyFromName(name);

        [return: NativeTypeName("SDL_Keycode")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)GetKeyFromName(__dsl_name);
            }
        }

        [return: NativeTypeName("SDL_Keycode")]
        [NativeFunction("SDL3", EntryPoint = "GetKeyFromScancode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetKeyFromScancode(Scancode scancode) =>
            Underlying.Value!.GetKeyFromScancode(scancode);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] int key) =>
            Underlying.Value!.GetKeyName(key);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] int key) =>
            Underlying.Value!.GetKeyNameRaw(key);

        [NativeFunction("SDL3", EntryPoint = "GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
            void** userdata
        ) => Underlying.Value!.GetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction *")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
            Ref2D userdata
        )
        {
            fixed (void** __dsl_userdata = userdata)
            {
                GetLogOutputFunction(callback, __dsl_userdata);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetMasksForPixelFormatEnum")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMasksForPixelFormatEnum(
            PixelFormatEnum format,
            int* bpp,
            [NativeTypeName("Uint32 *")] uint* Rmask,
            [NativeTypeName("Uint32 *")] uint* Gmask,
            [NativeTypeName("Uint32 *")] uint* Bmask,
            [NativeTypeName("Uint32 *")] uint* Amask
        ) => Underlying.Value!.GetMasksForPixelFormatEnum(format, bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormatEnum")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetMasksForPixelFormatEnum(
            PixelFormatEnum format,
            Ref<int> bpp,
            [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
            [NativeTypeName("Uint32 *")] Ref<uint> Amask
        )
        {
            fixed (uint* __dsl_Amask = Amask)
            fixed (uint* __dsl_Bmask = Bmask)
            fixed (uint* __dsl_Gmask = Gmask)
            fixed (uint* __dsl_Rmask = Rmask)
            fixed (int* __dsl_bpp = bpp)
            {
                return (MaybeBool<int>)
                    (int)GetMasksForPixelFormatEnum(
                        format,
                        __dsl_bpp,
                        __dsl_Rmask,
                        __dsl_Gmask,
                        __dsl_Bmask,
                        __dsl_Amask
                    );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffects(SDL_Haptic* haptic) =>
            Underlying.Value!.GetMaxHapticEffects(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffects(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetMaxHapticEffects(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffectsPlaying(SDL_Haptic* haptic) =>
            Underlying.Value!.GetMaxHapticEffectsPlaying(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetMaxHapticEffectsPlaying(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetMaxHapticEffectsPlaying(__dsl_haptic);
            }
        }

        [return: NativeTypeName("SDL_MouseID *")]
        [NativeFunction("SDL3", EntryPoint = "GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetMice(int* count) => Underlying.Value!.GetMice(count);

        [return: NativeTypeName("SDL_MouseID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetMice(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetMice(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Keymod GetModState() => Underlying.Value!.GetModState();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetMouseFocus() => Underlying.Value!.GetMouseFocus();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GetMouseFocusRaw() => Underlying.Value!.GetMouseFocusRaw();

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetMouseInstanceName(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        ) => Underlying.Value!.GetMouseInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetMouseInstanceNameRaw(
            [NativeTypeName("SDL_MouseID")] uint instance_id
        ) => Underlying.Value!.GetMouseInstanceNameRaw(instance_id);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetMouseState(float* x, float* y) =>
            Underlying.Value!.GetMouseState(x, y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetMouseState(__dsl_x, __dsl_y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNaturalDisplayOrientation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayOrientation GetNaturalDisplayOrientation(
            [NativeTypeName("SDL_DisplayID")] uint displayID
        ) => Underlying.Value!.GetNaturalDisplayOrientation(displayID);

        [NativeFunction("SDL3", EntryPoint = "GetNumAudioDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumAudioDrivers() => Underlying.Value!.GetNumAudioDrivers();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long default_value
        ) => Underlying.Value!.GetNumberProperty(props, name, default_value);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long GetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long default_value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (long)GetNumberProperty(props, __dsl_name, default_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumCameraDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumCameraDrivers() => Underlying.Value!.GetNumCameraDrivers();

        [NativeFunction("SDL3", EntryPoint = "GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad) =>
            Underlying.Value!.GetNumGamepadTouchpadFingers(gamepad, touchpad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpadFingers(Ref<SDL_Gamepad> gamepad, int touchpad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetNumGamepadTouchpadFingers(__dsl_gamepad, touchpad);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpads(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetNumGamepadTouchpads(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumGamepadTouchpads(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)GetNumGamepadTouchpads(__dsl_gamepad);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumHapticAxes(SDL_Haptic* haptic) =>
            Underlying.Value!.GetNumHapticAxes(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumHapticAxes(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)GetNumHapticAxes(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickAxes(SDL_Joystick* joystick) =>
            Underlying.Value!.GetNumJoystickAxes(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickAxes(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickAxes(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickBalls(SDL_Joystick* joystick) =>
            Underlying.Value!.GetNumJoystickBalls(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickBalls(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickBalls(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickButtons(SDL_Joystick* joystick) =>
            Underlying.Value!.GetNumJoystickButtons(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickButtons(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickButtons(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickHats(SDL_Joystick* joystick) =>
            Underlying.Value!.GetNumJoystickHats(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumJoystickHats(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)GetNumJoystickHats(__dsl_joystick);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetNumRenderDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumRenderDrivers() => Underlying.Value!.GetNumRenderDrivers();

        [NativeFunction("SDL3", EntryPoint = "GetNumVideoDrivers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetNumVideoDrivers() => Underlying.Value!.GetNumVideoDrivers();

        [NativeFunction("SDL3", EntryPoint = "GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetPathInfo(
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        ) => Underlying.Value!.GetPathInfo(path, info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetPathInfo(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            {
                return (int)GetPathInfo(__dsl_path, __dsl_info);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetPenCapabilities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenCapabilities(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            PenCapabilityInfo* capabilities
        ) => Underlying.Value!.GetPenCapabilities(instance_id, capabilities);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenCapabilities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenCapabilities(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            Ref<PenCapabilityInfo> capabilities
        )
        {
            fixed (PenCapabilityInfo* __dsl_capabilities = capabilities)
            {
                return (uint)GetPenCapabilities(instance_id, __dsl_capabilities);
            }
        }

        [return: NativeTypeName("SDL_PenID")]
        [NativeFunction("SDL3", EntryPoint = "GetPenFromGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenFromGuid(Guid guid) => Underlying.Value!.GetPenFromGuid(guid);

        [NativeFunction("SDL3", EntryPoint = "GetPenGuid")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GetPenGuid([NativeTypeName("SDL_PenID")] uint instance_id) =>
            Underlying.Value!.GetPenGuid(instance_id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPenName([NativeTypeName("SDL_PenID")] uint instance_id) =>
            Underlying.Value!.GetPenName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPenNameRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
            Underlying.Value!.GetPenNameRaw(instance_id);

        [return: NativeTypeName("SDL_PenID *")]
        [NativeFunction("SDL3", EntryPoint = "GetPens")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetPens(int* count) => Underlying.Value!.GetPens(count);

        [return: NativeTypeName("SDL_PenID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPens")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetPens(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetPens(__dsl_count);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetPenStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenStatus(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            float* x,
            float* y,
            float* axes,
            [NativeTypeName("size_t")] nuint num_axes
        ) => Underlying.Value!.GetPenStatus(instance_id, x, y, axes, num_axes);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPenStatus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPenStatus(
            [NativeTypeName("SDL_PenID")] uint instance_id,
            Ref<float> x,
            Ref<float> y,
            Ref<float> axes,
            [NativeTypeName("size_t")] nuint num_axes
        )
        {
            fixed (float* __dsl_axes = axes)
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetPenStatus(instance_id, __dsl_x, __dsl_y, __dsl_axes, num_axes);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetPenType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PenSubtype GetPenType([NativeTypeName("SDL_PenID")] uint instance_id) =>
            Underlying.Value!.GetPenType(instance_id);

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetPerformanceCounter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPerformanceCounter() => Underlying.Value!.GetPerformanceCounter();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetPerformanceFrequency")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetPerformanceFrequency() =>
            Underlying.Value!.GetPerformanceFrequency();

        [NativeFunction("SDL3", EntryPoint = "GetPixelFormatEnumForMasks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PixelFormatEnum GetPixelFormatEnumForMasks(
            int bpp,
            [NativeTypeName("Uint32")] uint Rmask,
            [NativeTypeName("Uint32")] uint Gmask,
            [NativeTypeName("Uint32")] uint Bmask,
            [NativeTypeName("Uint32")] uint Amask
        ) => Underlying.Value!.GetPixelFormatEnumForMasks(bpp, Rmask, Gmask, Bmask, Amask);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPixelFormatName(PixelFormatEnum format) =>
            Underlying.Value!.GetPixelFormatName(format);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPixelFormatNameRaw(PixelFormatEnum format) =>
            Underlying.Value!.GetPixelFormatNameRaw(format);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPlatform() => Underlying.Value!.GetPlatform();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPlatformRaw() => Underlying.Value!.GetPlatformRaw();

        [NativeFunction("SDL3", EntryPoint = "GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetPowerInfo(int* seconds, int* percent) =>
            Underlying.Value!.GetPowerInfo(seconds, percent);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent)
        {
            fixed (int* __dsl_percent = percent)
            fixed (int* __dsl_seconds = seconds)
            {
                return (PowerState)GetPowerInfo(__dsl_seconds, __dsl_percent);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Locale> GetPreferredLocales() => Underlying.Value!.GetPreferredLocales();

        [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Locale* GetPreferredLocalesRaw() =>
            Underlying.Value!.GetPreferredLocalesRaw();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPrefPath(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app
        ) => Underlying.Value!.GetPrefPath(org, app);

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrefPath(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (sbyte*)GetPrefPath(__dsl_org, __dsl_app);
            }
        }

        [return: NativeTypeName("SDL_DisplayID")]
        [NativeFunction("SDL3", EntryPoint = "GetPrimaryDisplay")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetPrimaryDisplay() => Underlying.Value!.GetPrimaryDisplay();

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetPrimarySelectionText() =>
            Underlying.Value!.GetPrimarySelectionText();

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetPrimarySelectionTextRaw() =>
            Underlying.Value!.GetPrimarySelectionTextRaw();

        [NativeFunction("SDL3", EntryPoint = "GetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* default_value
        ) => Underlying.Value!.GetProperty(props, name, default_value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref default_value
        )
        {
            fixed (void* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (void*)GetProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.GetPropertyType(props, name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static PropertyType GetPropertyType(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (PropertyType)GetPropertyType(props, __dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRealGamepadInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetRealGamepadInstanceType(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.GetRealGamepadInstanceType(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetRealGamepadType(SDL_Gamepad* gamepad) =>
            Underlying.Value!.GetRealGamepadType(gamepad);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static GamepadType GetRealGamepadType(Ref<SDL_Gamepad> gamepad)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (GamepadType)GetRealGamepadType(__dsl_gamepad);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            int* X1,
            int* Y1,
            int* X2,
            int* Y2
        ) => Underlying.Value!.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectAndLineIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref<int> X1,
            Ref<int> Y1,
            Ref<int> X2,
            Ref<int> Y2
        )
        {
            fixed (int* __dsl_Y2 = Y2)
            fixed (int* __dsl_X2 = X2)
            fixed (int* __dsl_Y1 = Y1)
            fixed (int* __dsl_X1 = X1)
            fixed (Rect* __dsl_rect = rect)
            {
                return (MaybeBool<int>)
                    (int)GetRectAndLineIntersection(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* rect,
            float* X1,
            float* Y1,
            float* X2,
            float* Y2
        ) => Underlying.Value!.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectAndLineIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
            Ref<float> X1,
            Ref<float> Y1,
            Ref<float> X2,
            Ref<float> Y2
        )
        {
            fixed (float* __dsl_Y2 = Y2)
            fixed (float* __dsl_X2 = X2)
            fixed (float* __dsl_Y1 = Y1)
            fixed (float* __dsl_X1 = X1)
            fixed (FRect* __dsl_rect = rect)
            {
                return (MaybeBool<int>)
                    (int)GetRectAndLineIntersectionFloat(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Point* points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Rect* clip,
            Rect* result
        ) => Underlying.Value!.GetRectEnclosingPoints(points, count, clip, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectEnclosingPoints(
            [NativeTypeName("const SDL_Point *")] Ref<Point> points,
            int count,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_clip = clip)
            fixed (Point* __dsl_points = points)
            {
                return (MaybeBool<int>)
                    (int)GetRectEnclosingPoints(__dsl_points, count, __dsl_clip, __dsl_result);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count,
            [NativeTypeName("const SDL_FRect *")] FRect* clip,
            FRect* result
        ) => Underlying.Value!.GetRectEnclosingPointsFloat(points, count, clip, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectEnclosingPointsFloat(
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_clip = clip)
            fixed (FPoint* __dsl_points = points)
            {
                return (MaybeBool<int>)
                    (int)GetRectEnclosingPointsFloat(__dsl_points, count, __dsl_clip, __dsl_result);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => Underlying.Value!.GetRectIntersection(A, B, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<int>)(int)GetRectIntersection(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => Underlying.Value!.GetRectIntersectionFloat(A, B, result);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<int>)
                    (int)GetRectIntersectionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B,
            Rect* result
        ) => Underlying.Value!.GetRectUnion(A, B, result);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectUnion(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
            Ref<Rect> result
        )
        {
            fixed (Rect* __dsl_result = result)
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (int)GetRectUnion(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B,
            FRect* result
        ) => Underlying.Value!.GetRectUnionFloat(A, B, result);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRectUnionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
            Ref<FRect> result
        )
        {
            fixed (FRect* __dsl_result = result)
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (int)GetRectUnionFloat(__dsl_A, __dsl_B, __dsl_result);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetRelativeMouseMode() =>
            Underlying.Value!.GetRelativeMouseMode();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRelativeMouseModeRaw() => Underlying.Value!.GetRelativeMouseModeRaw();

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRelativeMouseState(float* x, float* y) =>
            Underlying.Value!.GetRelativeMouseState(x, y);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRelativeMouseState(Ref<float> x, Ref<float> y)
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            {
                return (uint)GetRelativeMouseState(__dsl_x, __dsl_y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderClipRect(SDL_Renderer* renderer, Rect* rect) =>
            Underlying.Value!.GetRenderClipRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderClipRect(Ref<SDL_Renderer> renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderClipRect(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderColorScale(SDL_Renderer* renderer, float* scale) =>
            Underlying.Value!.GetRenderColorScale(renderer, scale);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderColorScale(Ref<SDL_Renderer> renderer, Ref<float> scale)
        {
            fixed (float* __dsl_scale = scale)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderColorScale(__dsl_renderer, __dsl_scale);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode* blendMode) =>
            Underlying.Value!.GetRenderDrawBlendMode(renderer, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawBlendMode(
            Ref<SDL_Renderer> renderer,
            Ref<BlendMode> blendMode
        )
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderDrawBlendMode(__dsl_renderer, __dsl_blendMode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawColor(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => Underlying.Value!.GetRenderDrawColor(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawColor(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderDrawColor(__dsl_renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawColorFloat(
            SDL_Renderer* renderer,
            float* r,
            float* g,
            float* b,
            float* a
        ) => Underlying.Value!.GetRenderDrawColorFloat(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderDrawColorFloat(
            Ref<SDL_Renderer> renderer,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b,
            Ref<float> a
        )
        {
            fixed (float* __dsl_a = a)
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderDrawColorFloat(
                    __dsl_renderer,
                    __dsl_r,
                    __dsl_g,
                    __dsl_b,
                    __dsl_a
                );
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRenderDriver(int index) =>
            Underlying.Value!.GetRenderDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetRenderDriverRaw(int index) =>
            Underlying.Value!.GetRenderDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Renderer* GetRenderer(SDL_Window* window) =>
            Underlying.Value!.GetRenderer(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> GetRenderer(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (SDL_Renderer*)GetRenderer(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Renderer* GetRendererFromTexture(SDL_Texture* texture) =>
            Underlying.Value!.GetRendererFromTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Renderer> GetRendererFromTexture(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (SDL_Renderer*)GetRendererFromTexture(__dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRendererInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRendererInfo(SDL_Renderer* renderer, RendererInfo* info) =>
            Underlying.Value!.GetRendererInfo(renderer, info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRendererInfo(Ref<SDL_Renderer> renderer, Ref<RendererInfo> info)
        {
            fixed (RendererInfo* __dsl_info = info)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRendererInfo(__dsl_renderer, __dsl_info);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRendererProperties(SDL_Renderer* renderer) =>
            Underlying.Value!.GetRendererProperties(renderer);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetRendererProperties(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (uint)GetRendererProperties(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderLogicalPresentation(
            SDL_Renderer* renderer,
            int* w,
            int* h,
            RendererLogicalPresentation* mode,
            ScaleMode* scale_mode
        ) => Underlying.Value!.GetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderLogicalPresentation(
            Ref<SDL_Renderer> renderer,
            Ref<int> w,
            Ref<int> h,
            Ref<RendererLogicalPresentation> mode,
            Ref<ScaleMode> scale_mode
        )
        {
            fixed (ScaleMode* __dsl_scale_mode = scale_mode)
            fixed (RendererLogicalPresentation* __dsl_mode = mode)
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderLogicalPresentation(
                    __dsl_renderer,
                    __dsl_w,
                    __dsl_h,
                    __dsl_mode,
                    __dsl_scale_mode
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetRenderMetalCommandEncoder(SDL_Renderer* renderer) =>
            Underlying.Value!.GetRenderMetalCommandEncoder(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalCommandEncoder(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (void*)GetRenderMetalCommandEncoder(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetRenderMetalLayer(SDL_Renderer* renderer) =>
            Underlying.Value!.GetRenderMetalLayer(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetRenderMetalLayer(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (void*)GetRenderMetalLayer(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
            Underlying.Value!.GetRenderOutputSize(renderer, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderOutputSize(__dsl_renderer, __dsl_w, __dsl_h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY) =>
            Underlying.Value!.GetRenderScale(renderer, scaleX, scaleY);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderScale(
            Ref<SDL_Renderer> renderer,
            Ref<float> scaleX,
            Ref<float> scaleY
        )
        {
            fixed (float* __dsl_scaleY = scaleY)
            fixed (float* __dsl_scaleX = scaleX)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderScale(__dsl_renderer, __dsl_scaleX, __dsl_scaleY);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Texture* GetRenderTarget(SDL_Renderer* renderer) =>
            Underlying.Value!.GetRenderTarget(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Texture> GetRenderTarget(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Texture*)GetRenderTarget(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderViewport(SDL_Renderer* renderer, Rect* rect) =>
            Underlying.Value!.GetRenderViewport(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderViewport(Ref<SDL_Renderer> renderer, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderViewport(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderVSync(SDL_Renderer* renderer, int* vsync) =>
            Underlying.Value!.GetRenderVSync(renderer, vsync);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetRenderVSync(Ref<SDL_Renderer> renderer, Ref<int> vsync)
        {
            fixed (int* __dsl_vsync = vsync)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)GetRenderVSync(__dsl_renderer, __dsl_vsync);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GetRenderWindow(SDL_Renderer* renderer) =>
            Underlying.Value!.GetRenderWindow(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetRenderWindow(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (SDL_Window*)GetRenderWindow(__dsl_renderer);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetRevision() => Underlying.Value!.GetRevision();

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetRevisionRaw() => Underlying.Value!.GetRevisionRaw();

        [NativeFunction("SDL3", EntryPoint = "GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => Underlying.Value!.GetRGB(pixel, format, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRGB(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (PixelFormat* __dsl_format = format)
            {
                GetRGB(pixel, __dsl_format, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetRgba")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => Underlying.Value!.GetRgba(pixel, format, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GetRgba(
            [NativeTypeName("Uint32")] uint pixel,
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (PixelFormat* __dsl_format = format)
            {
                GetRgba(pixel, __dsl_format, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetScancodeFromKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromKey([NativeTypeName("SDL_Keycode")] int key) =>
            Underlying.Value!.GetScancodeFromKey(key);

        [NativeFunction("SDL3", EntryPoint = "GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.GetScancodeFromName(name);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (Scancode)GetScancodeFromName(__dsl_name);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetScancodeName(Scancode scancode) =>
            Underlying.Value!.GetScancodeName(scancode);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetScancodeNameRaw(Scancode scancode) =>
            Underlying.Value!.GetScancodeNameRaw(scancode);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSemaphoreValue(SDL_Semaphore* sem) =>
            Underlying.Value!.GetSemaphoreValue(sem);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSemaphoreValue(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (uint)GetSemaphoreValue(__dsl_sem);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorData(SDL_Sensor* sensor, float* data, int num_values) =>
            Underlying.Value!.GetSensorData(sensor, data, num_values);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorData(Ref<SDL_Sensor> sensor, Ref<float> data, int num_values)
        {
            fixed (float* __dsl_data = data)
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (int)GetSensorData(__dsl_sensor, __dsl_data, num_values);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Sensor> GetSensorFromInstanceID(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorFromInstanceID(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Sensor* GetSensorFromInstanceIDRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorFromInstanceIDRaw(instance_id);

        [return: NativeTypeName("SDL_SensorID")]
        [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorInstanceID(SDL_Sensor* sensor) =>
            Underlying.Value!.GetSensorInstanceID(sensor);

        [return: NativeTypeName("SDL_SensorID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorInstanceID(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (uint)GetSensorInstanceID(__dsl_sensor);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorInstanceName(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorInstanceName(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetSensorInstanceNameRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorInstanceNameRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorInstanceNonPortableType(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorInstanceNonPortableType(instance_id);

        [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorType GetSensorInstanceType(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.GetSensorInstanceType(instance_id);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetSensorName(SDL_Sensor* sensor) =>
            Underlying.Value!.GetSensorName(sensor);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetSensorName(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (sbyte*)GetSensorName(__dsl_sensor);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorNonPortableType(SDL_Sensor* sensor) =>
            Underlying.Value!.GetSensorNonPortableType(sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSensorNonPortableType(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (int)GetSensorNonPortableType(__dsl_sensor);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorProperties(SDL_Sensor* sensor) =>
            Underlying.Value!.GetSensorProperties(sensor);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSensorProperties(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (uint)GetSensorProperties(__dsl_sensor);
            }
        }

        [return: NativeTypeName("SDL_SensorID *")]
        [NativeFunction("SDL3", EntryPoint = "GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint* GetSensors(int* count) => Underlying.Value!.GetSensors(count);

        [return: NativeTypeName("SDL_SensorID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<uint> GetSensors(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (uint*)GetSensors(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorType GetSensorType(SDL_Sensor* sensor) =>
            Underlying.Value!.GetSensorType(sensor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SensorType GetSensorType(Ref<SDL_Sensor> sensor)
        {
            fixed (SDL_Sensor* __dsl_sensor = sensor)
            {
                return (SensorType)GetSensorType(__dsl_sensor);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSilenceValueForFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSilenceValueForFormat(
            [NativeTypeName("SDL_AudioFormat")] ushort format
        ) => Underlying.Value!.GetSilenceValueForFormat(format);

        [NativeFunction("SDL3", EntryPoint = "GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetStorageFileSize(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("Uint64 *")] ulong* length
        ) => Underlying.Value!.GetStorageFileSize(storage, path, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetStorageFileSize(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("Uint64 *")] Ref<ulong> length
        )
        {
            fixed (ulong* __dsl_length = length)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)GetStorageFileSize(__dsl_storage, __dsl_path, __dsl_length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetStoragePathInfo(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            PathInfo* info
        ) => Underlying.Value!.GetStoragePathInfo(storage, path, info);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetStoragePathInfo(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<PathInfo> info
        )
        {
            fixed (PathInfo* __dsl_info = info)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)GetStoragePathInfo(__dsl_storage, __dsl_path, __dsl_info);
            }
        }

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetStorageSpaceRemaining(SDL_Storage* storage) =>
            Underlying.Value!.GetStorageSpaceRemaining(storage);

        [return: NativeTypeName("Uint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetStorageSpaceRemaining(Ref<SDL_Storage> storage)
        {
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (ulong)GetStorageSpaceRemaining(__dsl_storage);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* default_value
        ) => Underlying.Value!.GetStringProperty(props, name, default_value);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> default_value
        )
        {
            fixed (sbyte* __dsl_default_value = default_value)
            fixed (sbyte* __dsl_name = name)
            {
                return (sbyte*)GetStringProperty(props, __dsl_name, __dsl_default_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* alpha
        ) => Underlying.Value!.GetSurfaceAlphaMod(surface, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceAlphaMod(__dsl_surface, __dsl_alpha);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceBlendMode(Surface* surface, BlendMode* blendMode) =>
            Underlying.Value!.GetSurfaceBlendMode(surface, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceBlendMode(Ref<Surface> surface, Ref<BlendMode> blendMode)
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceBlendMode(__dsl_surface, __dsl_blendMode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceClipRect(Surface* surface, Rect* rect) =>
            Underlying.Value!.GetSurfaceClipRect(surface, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorKey(
            Surface* surface,
            [NativeTypeName("Uint32 *")] uint* key
        ) => Underlying.Value!.GetSurfaceColorKey(surface, key);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorKey(
            Ref<Surface> surface,
            [NativeTypeName("Uint32 *")] Ref<uint> key
        )
        {
            fixed (uint* __dsl_key = key)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceColorKey(__dsl_surface, __dsl_key);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => Underlying.Value!.GetSurfaceColorMod(surface, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceColorMod(__dsl_surface, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorspace(Surface* surface, Colorspace* colorspace) =>
            Underlying.Value!.GetSurfaceColorspace(surface, colorspace);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSurfaceColorspace(Ref<Surface> surface, Ref<Colorspace> colorspace)
        {
            fixed (Colorspace* __dsl_colorspace = colorspace)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)GetSurfaceColorspace(__dsl_surface, __dsl_colorspace);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSurfaceProperties(Surface* surface) =>
            Underlying.Value!.GetSurfaceProperties(surface);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetSurfaceProperties(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (uint)GetSurfaceProperties(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetSystemRAM")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetSystemRAM() => Underlying.Value!.GetSystemRAM();

        [NativeFunction("SDL3", EntryPoint = "GetSystemTheme")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SystemTheme GetSystemTheme() => Underlying.Value!.GetSystemTheme();

        [NativeFunction("SDL3", EntryPoint = "GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureAlphaMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8 *")] byte* alpha
        ) => Underlying.Value!.GetTextureAlphaMod(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureAlphaMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> alpha
        )
        {
            fixed (byte* __dsl_alpha = alpha)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureAlphaMod(__dsl_texture, __dsl_alpha);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha) =>
            Underlying.Value!.GetTextureAlphaModFloat(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureAlphaModFloat(Ref<SDL_Texture> texture, Ref<float> alpha)
        {
            fixed (float* __dsl_alpha = alpha)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureAlphaModFloat(__dsl_texture, __dsl_alpha);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureBlendMode(SDL_Texture* texture, BlendMode* blendMode) =>
            Underlying.Value!.GetTextureBlendMode(texture, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureBlendMode(Ref<SDL_Texture> texture, Ref<BlendMode> blendMode)
        {
            fixed (BlendMode* __dsl_blendMode = blendMode)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureBlendMode(__dsl_texture, __dsl_blendMode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureColorMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b
        ) => Underlying.Value!.GetTextureColorMod(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureColorMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b
        )
        {
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureColorMod(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureColorModFloat(
            SDL_Texture* texture,
            float* r,
            float* g,
            float* b
        ) => Underlying.Value!.GetTextureColorModFloat(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureColorModFloat(
            Ref<SDL_Texture> texture,
            Ref<float> r,
            Ref<float> g,
            Ref<float> b
        )
        {
            fixed (float* __dsl_b = b)
            fixed (float* __dsl_g = g)
            fixed (float* __dsl_r = r)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureColorModFloat(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetTextureProperties(SDL_Texture* texture) =>
            Underlying.Value!.GetTextureProperties(texture);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetTextureProperties(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (uint)GetTextureProperties(__dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureScaleMode(SDL_Texture* texture, ScaleMode* scaleMode) =>
            Underlying.Value!.GetTextureScaleMode(texture, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetTextureScaleMode(Ref<SDL_Texture> texture, Ref<ScaleMode> scaleMode)
        {
            fixed (ScaleMode* __dsl_scaleMode = scaleMode)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)GetTextureScaleMode(__dsl_texture, __dsl_scaleMode);
            }
        }

        [return: NativeTypeName("SDL_ThreadID")]
        [NativeFunction("SDL3", EntryPoint = "GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetThreadID(SDL_Thread* thread) =>
            Underlying.Value!.GetThreadID(thread);

        [return: NativeTypeName("SDL_ThreadID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetThreadID(Ref<SDL_Thread> thread)
        {
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                return (ulong)GetThreadID(__dsl_thread);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetThreadName(SDL_Thread* thread) =>
            Underlying.Value!.GetThreadName(thread);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetThreadName(Ref<SDL_Thread> thread)
        {
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                return (sbyte*)GetThreadName(__dsl_thread);
            }
        }

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetTicks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetTicks() => Underlying.Value!.GetTicks();

        [return: NativeTypeName("Uint64")]
        [NativeFunction("SDL3", EntryPoint = "GetTicksNS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong GetTicksNS() => Underlying.Value!.GetTicksNS();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetTLS([NativeTypeName("SDL_TLSID")] uint id) =>
            Underlying.Value!.GetTLS(id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetTLSRaw([NativeTypeName("SDL_TLSID")] uint id) =>
            Underlying.Value!.GetTLSRaw(id);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetTouchDeviceName(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        ) => Underlying.Value!.GetTouchDeviceName(touchID);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
            Underlying.Value!.GetTouchDeviceNameRaw(touchID);

        [return: NativeTypeName("SDL_TouchID *")]
        [NativeFunction("SDL3", EntryPoint = "GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static ulong* GetTouchDevices(int* count) =>
            Underlying.Value!.GetTouchDevices(count);

        [return: NativeTypeName("SDL_TouchID *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<ulong> GetTouchDevices(Ref<int> count)
        {
            fixed (int* __dsl_count = count)
            {
                return (ulong*)GetTouchDevices(__dsl_count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetTouchDeviceType")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static TouchDeviceType GetTouchDeviceType(
            [NativeTypeName("SDL_TouchID")] ulong touchID
        ) => Underlying.Value!.GetTouchDeviceType(touchID);

        [NativeFunction("SDL3", EntryPoint = "GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Finger** GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            int* count
        ) => Underlying.Value!.GetTouchFingers(touchID, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<Finger> GetTouchFingers(
            [NativeTypeName("SDL_TouchID")] ulong touchID,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            {
                return (Finger**)GetTouchFingers(touchID, __dsl_count);
            }
        }

        [return: NativeTypeName("char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetUserFolder(Folder folder) =>
            Underlying.Value!.GetUserFolder(folder);

        [return: NativeTypeName("char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetUserFolderRaw(Folder folder) =>
            Underlying.Value!.GetUserFolderRaw(folder);

        [NativeFunction("SDL3", EntryPoint = "GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetVersion(Version* ver) => Underlying.Value!.GetVersion(ver);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetVersion(Ref<Version> ver)
        {
            fixed (Version* __dsl_ver = ver)
            {
                return (int)GetVersion(__dsl_ver);
            }
        }

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetVideoDriver(int index) =>
            Underlying.Value!.GetVideoDriver(index);

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetVideoDriverRaw(int index) =>
            Underlying.Value!.GetVideoDriverRaw(index);

        [NativeFunction("SDL3", EntryPoint = "GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowBordersSize(
            SDL_Window* window,
            int* top,
            int* left,
            int* bottom,
            int* right
        ) => Underlying.Value!.GetWindowBordersSize(window, top, left, bottom, right);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowBordersSize(
            Ref<SDL_Window> window,
            Ref<int> top,
            Ref<int> left,
            Ref<int> bottom,
            Ref<int> right
        )
        {
            fixed (int* __dsl_right = right)
            fixed (int* __dsl_bottom = bottom)
            fixed (int* __dsl_left = left)
            fixed (int* __dsl_top = top)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowBordersSize(
                    __dsl_window,
                    __dsl_top,
                    __dsl_left,
                    __dsl_bottom,
                    __dsl_right
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowDisplayScale(SDL_Window* window) =>
            Underlying.Value!.GetWindowDisplayScale(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowDisplayScale(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (float)GetWindowDisplayScale(__dsl_window);
            }
        }

        [return: NativeTypeName("SDL_WindowFlags")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowFlags(SDL_Window* window) =>
            Underlying.Value!.GetWindowFlags(window);

        [return: NativeTypeName("SDL_WindowFlags")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowFlags(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowFlags(__dsl_window);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
            Underlying.Value!.GetWindowFromID(id);

        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GetWindowFromIDRaw([NativeTypeName("SDL_WindowID")] uint id) =>
            Underlying.Value!.GetWindowFromIDRaw(id);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static DisplayMode* GetWindowFullscreenMode(SDL_Window* window) =>
            Underlying.Value!.GetWindowFullscreenMode(window);

        [return: NativeTypeName("const SDL_DisplayMode *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<DisplayMode> GetWindowFullscreenMode(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (DisplayMode*)GetWindowFullscreenMode(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GetWindowICCProfile(
            SDL_Window* window,
            [NativeTypeName("size_t *")] nuint* size
        ) => Underlying.Value!.GetWindowICCProfile(window, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GetWindowICCProfile(
            Ref<SDL_Window> window,
            [NativeTypeName("size_t *")] Ref<nuint> size
        )
        {
            fixed (nuint* __dsl_size = size)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)GetWindowICCProfile(__dsl_window, __dsl_size);
            }
        }

        [return: NativeTypeName("SDL_WindowID")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowID(SDL_Window* window) => Underlying.Value!.GetWindowID(window);

        [return: NativeTypeName("SDL_WindowID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowID(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowID(__dsl_window);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowKeyboardGrab(SDL_Window* window) =>
            Underlying.Value!.GetWindowKeyboardGrab(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetWindowKeyboardGrab(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)GetWindowKeyboardGrab(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMaximumSize(SDL_Window* window, int* w, int* h) =>
            Underlying.Value!.GetWindowMaximumSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMaximumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowMaximumSize(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMinimumSize(SDL_Window* window, int* w, int* h) =>
            Underlying.Value!.GetWindowMinimumSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMinimumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowMinimumSize(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowMouseGrab(SDL_Window* window) =>
            Underlying.Value!.GetWindowMouseGrab(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GetWindowMouseGrab(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)GetWindowMouseGrab(__dsl_window);
            }
        }

        [return: NativeTypeName("const SDL_Rect *")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Rect* GetWindowMouseRect(SDL_Window* window) =>
            Underlying.Value!.GetWindowMouseRect(window);

        [return: NativeTypeName("const SDL_Rect *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Rect> GetWindowMouseRect(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (Rect*)GetWindowMouseRect(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowOpacity(SDL_Window* window, float* out_opacity) =>
            Underlying.Value!.GetWindowOpacity(window, out_opacity);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowOpacity(Ref<SDL_Window> window, Ref<float> out_opacity)
        {
            fixed (float* __dsl_out_opacity = out_opacity)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowOpacity(__dsl_window, __dsl_out_opacity);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GetWindowParent(SDL_Window* window) =>
            Underlying.Value!.GetWindowParent(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GetWindowParent(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (SDL_Window*)GetWindowParent(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowPixelDensity(SDL_Window* window) =>
            Underlying.Value!.GetWindowPixelDensity(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static float GetWindowPixelDensity(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (float)GetWindowPixelDensity(__dsl_window);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowPixelFormat(SDL_Window* window) =>
            Underlying.Value!.GetWindowPixelFormat(window);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowPixelFormat(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowPixelFormat(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowPosition(SDL_Window* window, int* x, int* y) =>
            Underlying.Value!.GetWindowPosition(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowPosition(Ref<SDL_Window> window, Ref<int> x, Ref<int> y)
        {
            fixed (int* __dsl_y = y)
            fixed (int* __dsl_x = x)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowPosition(__dsl_window, __dsl_x, __dsl_y);
            }
        }

        [return: NativeTypeName("SDL_PropertiesID")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowProperties(SDL_Window* window) =>
            Underlying.Value!.GetWindowProperties(window);

        [return: NativeTypeName("SDL_PropertiesID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint GetWindowProperties(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (uint)GetWindowProperties(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowSize(SDL_Window* window, int* w, int* h) =>
            Underlying.Value!.GetWindowSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowSize(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowSizeInPixels(SDL_Window* window, int* w, int* h) =>
            Underlying.Value!.GetWindowSizeInPixels(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GetWindowSizeInPixels(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GetWindowSizeInPixels(__dsl_window, __dsl_w, __dsl_h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* GetWindowSurface(SDL_Window* window) =>
            Underlying.Value!.GetWindowSurface(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> GetWindowSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (Surface*)GetWindowSurface(__dsl_window);
            }
        }

        [return: NativeTypeName("const char *")]
        [NativeFunction("SDL3", EntryPoint = "GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte* GetWindowTitle(SDL_Window* window) =>
            Underlying.Value!.GetWindowTitle(window);

        [return: NativeTypeName("const char *")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<sbyte> GetWindowTitle(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (sbyte*)GetWindowTitle(__dsl_window);
            }
        }

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "GLCreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GLCreateContext(SDL_Window* window) =>
            Underlying.Value!.GLCreateContext(window);

        [return: NativeTypeName("SDL_GLContext")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GLCreateContext(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)GLCreateContext(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLDeleteContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLDeleteContext([NativeTypeName("SDL_GLContext")] void* context) =>
            Underlying.Value!.GLDeleteContext(context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_DeleteContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLDeleteContext([NativeTypeName("SDL_GLContext")] Ref context)
        {
            fixed (void* __dsl_context = context)
            {
                return (int)GLDeleteContext(__dsl_context);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "GLExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
            Underlying.Value!.GLExtensionSupported(extension);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> GLExtensionSupported(
            [NativeTypeName("const char *")] Ref<sbyte> extension
        )
        {
            fixed (sbyte* __dsl_extension = extension)
            {
                return (MaybeBool<int>)(int)GLExtensionSupported(__dsl_extension);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLGetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLGetAttribute(GLattr attr, int* value) =>
            Underlying.Value!.GLGetAttribute(attr, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLGetAttribute(GLattr attr, Ref<int> value)
        {
            fixed (int* __dsl_value = value)
            {
                return (int)GLGetAttribute(attr, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_GLContext")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr GLGetCurrentContext() => Underlying.Value!.GLGetCurrentContext();

        [return: NativeTypeName("SDL_GLContext")]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* GLGetCurrentContextRaw() => Underlying.Value!.GLGetCurrentContextRaw();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Window> GLGetCurrentWindow() =>
            Underlying.Value!.GLGetCurrentWindow();

        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Window* GLGetCurrentWindowRaw() =>
            Underlying.Value!.GLGetCurrentWindowRaw();

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "GLGetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> GLGetProcAddress(
            [NativeTypeName("const char *")] sbyte* proc
        ) => Underlying.Value!.GLGetProcAddress(proc);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> GLGetProcAddress(
            [NativeTypeName("const char *")] Ref<sbyte> proc
        )
        {
            fixed (sbyte* __dsl_proc = proc)
            {
                return (delegate* unmanaged<void>)GLGetProcAddress(__dsl_proc);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLGetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLGetSwapInterval(int* interval) =>
            Underlying.Value!.GLGetSwapInterval(interval);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLGetSwapInterval(Ref<int> interval)
        {
            fixed (int* __dsl_interval = interval)
            {
                return (int)GLGetSwapInterval(__dsl_interval);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLLoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.GLLoadLibrary(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (int)GLLoadLibrary(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLMakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLMakeCurrent(
            SDL_Window* window,
            [NativeTypeName("SDL_GLContext")] void* context
        ) => Underlying.Value!.GLMakeCurrent(window, context);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLMakeCurrent(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_GLContext")] Ref context
        )
        {
            fixed (void* __dsl_context = context)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GLMakeCurrent(__dsl_window, __dsl_context);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLResetAttributes")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GLResetAttributes() => Underlying.Value!.GLResetAttributes();

        [NativeFunction("SDL3", EntryPoint = "GLSetAttribute")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLSetAttribute(GLattr attr, int value) =>
            Underlying.Value!.GLSetAttribute(attr, value);

        [NativeFunction("SDL3", EntryPoint = "GLSetSwapInterval")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLSetSwapInterval(int interval) =>
            Underlying.Value!.GLSetSwapInterval(interval);

        [NativeFunction("SDL3", EntryPoint = "GLSwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLSwapWindow(SDL_Window* window) =>
            Underlying.Value!.GLSwapWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GLSwapWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)GLSwapWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GLUnloadLibrary")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void GLUnloadLibrary() => Underlying.Value!.GLUnloadLibrary();

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GlobDirectory(
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("Uint32")] uint flags,
            int* count
        ) => Underlying.Value!.GlobDirectory(path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobDirectory(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("Uint32")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            {
                return (sbyte**)GlobDirectory(__dsl_path, __dsl_pattern, flags, __dsl_count);
            }
        }

        [return: NativeTypeName("char **")]
        [NativeFunction("SDL3", EntryPoint = "GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static sbyte** GlobStorageDirectory(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const char *")] sbyte* pattern,
            [NativeTypeName("Uint32")] uint flags,
            int* count
        ) => Underlying.Value!.GlobStorageDirectory(storage, path, pattern, flags, count);

        [return: NativeTypeName("char **")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr2D<sbyte> GlobStorageDirectory(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const char *")] Ref<sbyte> pattern,
            [NativeTypeName("Uint32")] uint flags,
            Ref<int> count
        )
        {
            fixed (int* __dsl_count = count)
            fixed (sbyte* __dsl_pattern = pattern)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (sbyte**)GlobStorageDirectory(
                    __dsl_storage,
                    __dsl_path,
                    __dsl_pattern,
                    flags,
                    __dsl_count
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GuidFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
            Underlying.Value!.GuidFromString(pchGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDFromString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Guid GuidFromString([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
        {
            fixed (sbyte* __dsl_pchGUID = pchGUID)
            {
                return (Guid)GuidFromString(__dsl_pchGUID);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "GuidToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GuidToString(
            Guid guid,
            [NativeTypeName("char *")] sbyte* pszGUID,
            int cbGUID
        ) => Underlying.Value!.GuidToString(guid, pszGUID, cbGUID);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int GuidToString(
            Guid guid,
            [NativeTypeName("char *")] Ref<sbyte> pszGUID,
            int cbGUID
        )
        {
            fixed (sbyte* __dsl_pszGUID = pszGUID)
            {
                return (int)GuidToString(guid, __dsl_pszGUID, cbGUID);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HapticEffectSupported(
            SDL_Haptic* haptic,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
        ) => Underlying.Value!.HapticEffectSupported(haptic, effect);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HapticEffectSupported(
            Ref<SDL_Haptic> haptic,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
        )
        {
            fixed (HapticEffect* __dsl_effect = effect)
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (MaybeBool<int>)(int)HapticEffectSupported(__dsl_haptic, __dsl_effect);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HapticRumbleSupported(SDL_Haptic* haptic) =>
            Underlying.Value!.HapticRumbleSupported(haptic);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HapticRumbleSupported(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (MaybeBool<int>)(int)HapticRumbleSupported(__dsl_haptic);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasAltiVec() => Underlying.Value!.HasAltiVec();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasAltiVecRaw() => Underlying.Value!.HasAltiVecRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasArmsimd() => Underlying.Value!.HasArmsimd();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasArmsimdRaw() => Underlying.Value!.HasArmsimdRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasAVX() => Underlying.Value!.HasAVX();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasAVX2() => Underlying.Value!.HasAVX2();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasAVX2Raw() => Underlying.Value!.HasAVX2Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasAVX512F() => Underlying.Value!.HasAVX512F();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasAVX512FRaw() => Underlying.Value!.HasAVX512FRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasAVXRaw() => Underlying.Value!.HasAVXRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
            Underlying.Value!.HasClipboardData(mime_type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasClipboardData(
            [NativeTypeName("const char *")] Ref<sbyte> mime_type
        )
        {
            fixed (sbyte* __dsl_mime_type = mime_type)
            {
                return (MaybeBool<int>)(int)HasClipboardData(__dsl_mime_type);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasClipboardText() => Underlying.Value!.HasClipboardText();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasClipboardTextRaw() => Underlying.Value!.HasClipboardTextRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasEvent([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.HasEvent(type);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasEventRaw([NativeTypeName("Uint32")] uint type) =>
            Underlying.Value!.HasEventRaw(type);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasEvents(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.HasEvents(minType, maxType);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasEventsRaw(
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.HasEventsRaw(minType, maxType);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasGamepad() => Underlying.Value!.HasGamepad();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasGamepadRaw() => Underlying.Value!.HasGamepadRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasJoystick() => Underlying.Value!.HasJoystick();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasJoystickRaw() => Underlying.Value!.HasJoystickRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasKeyboard() => Underlying.Value!.HasKeyboard();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasKeyboardRaw() => Underlying.Value!.HasKeyboardRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasLasx() => Underlying.Value!.HasLasx();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasLasxRaw() => Underlying.Value!.HasLasxRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasLSX() => Underlying.Value!.HasLSX();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasLSXRaw() => Underlying.Value!.HasLSXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasMMX() => Underlying.Value!.HasMMX();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasMMXRaw() => Underlying.Value!.HasMMXRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasMouse() => Underlying.Value!.HasMouse();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasMouseRaw() => Underlying.Value!.HasMouseRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasNeon() => Underlying.Value!.HasNeon();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasNeonRaw() => Underlying.Value!.HasNeonRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasPrimarySelectionText() =>
            Underlying.Value!.HasPrimarySelectionText();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasPrimarySelectionTextRaw() =>
            Underlying.Value!.HasPrimarySelectionTextRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.HasProperty(props, name);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)HasProperty(props, __dsl_name);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Rect* A,
            [NativeTypeName("const SDL_Rect *")] Rect* B
        ) => Underlying.Value!.HasRectIntersection(A, B);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasRectIntersection(
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
        )
        {
            fixed (Rect* __dsl_B = B)
            fixed (Rect* __dsl_A = A)
            {
                return (MaybeBool<int>)(int)HasRectIntersection(__dsl_A, __dsl_B);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] FRect* A,
            [NativeTypeName("const SDL_FRect *")] FRect* B
        ) => Underlying.Value!.HasRectIntersectionFloat(A, B);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasRectIntersectionFloat(
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
        )
        {
            fixed (FRect* __dsl_B = B)
            fixed (FRect* __dsl_A = A)
            {
                return (MaybeBool<int>)(int)HasRectIntersectionFloat(__dsl_A, __dsl_B);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasScreenKeyboardSupport() =>
            Underlying.Value!.HasScreenKeyboardSupport();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasScreenKeyboardSupportRaw() =>
            Underlying.Value!.HasScreenKeyboardSupportRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasSSE() => Underlying.Value!.HasSSE();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasSSE2() => Underlying.Value!.HasSSE2();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasSSE2Raw() => Underlying.Value!.HasSSE2Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasSSE3() => Underlying.Value!.HasSSE3();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasSSE3Raw() => Underlying.Value!.HasSSE3Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasSSE41() => Underlying.Value!.HasSSE41();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasSSE41Raw() => Underlying.Value!.HasSSE41Raw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> HasSSE42() => Underlying.Value!.HasSSE42();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasSSE42Raw() => Underlying.Value!.HasSSE42Raw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HasSSERaw() => Underlying.Value!.HasSSERaw();

        [NativeFunction("SDL3", EntryPoint = "HidBleScan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidBleScan([NativeTypeName("SDL_bool")] int active) =>
            Underlying.Value!.HidBleScan(active);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidBleScan([NativeTypeName("SDL_bool")] MaybeBool<int> active) =>
            Underlying.Value!.HidBleScan(active);

        [NativeFunction("SDL3", EntryPoint = "HidClose")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidClose(SDL_hid_device* dev) => Underlying.Value!.HidClose(dev);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidClose(Ref<SDL_hid_device> dev)
        {
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidClose(__dsl_dev);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "HidDeviceChangeCount")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint HidDeviceChangeCount() => Underlying.Value!.HidDeviceChangeCount();

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidEnumerate(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => Underlying.Value!.HidEnumerate(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceInfo* HidEnumerateRaw(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id
        ) => Underlying.Value!.HidEnumerateRaw(vendor_id, product_id);

        [NativeFunction("SDL3", EntryPoint = "HidExit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidExit() => Underlying.Value!.HidExit();

        [NativeFunction("SDL3", EntryPoint = "HidFreeEnumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidFreeEnumeration(HidDeviceInfo* devs) =>
            Underlying.Value!.HidFreeEnumeration(devs);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void HidFreeEnumeration(Ref<HidDeviceInfo> devs)
        {
            fixed (HidDeviceInfo* __dsl_devs = devs)
            {
                HidFreeEnumeration(__dsl_devs);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetDeviceInfo")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static HidDeviceInfo* HidGetDeviceInfo(SDL_hid_device* dev) =>
            Underlying.Value!.HidGetDeviceInfo(dev);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<HidDeviceInfo> HidGetDeviceInfo(Ref<SDL_hid_device> dev)
        {
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (HidDeviceInfo*)HidGetDeviceInfo(__dsl_dev);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetFeatureReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetFeatureReport(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidGetFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetFeatureReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetFeatureReport(__dsl_dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetIndexedString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetIndexedString(
            SDL_hid_device* dev,
            int string_index,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetIndexedString(dev, string_index, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetIndexedString(
            Ref<SDL_hid_device> dev,
            int string_index,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetIndexedString(__dsl_dev, string_index, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetInputReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetInputReport(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidGetInputReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetInputReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetInputReport(__dsl_dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetManufacturerString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetManufacturerString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetManufacturerString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetManufacturerString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetManufacturerString(__dsl_dev, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetProductString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetProductString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetProductString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetProductString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetProductString(__dsl_dev, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetReportDescriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetReportDescriptor(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* buf,
            [NativeTypeName("size_t")] nuint buf_size
        ) => Underlying.Value!.HidGetReportDescriptor(dev, buf, buf_size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetReportDescriptor(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> buf,
            [NativeTypeName("size_t")] nuint buf_size
        )
        {
            fixed (byte* __dsl_buf = buf)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetReportDescriptor(__dsl_dev, __dsl_buf, buf_size);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidGetSerialNumberString")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetSerialNumberString(
            SDL_hid_device* dev,
            [NativeTypeName("wchar_t *")] uint* @string,
            [NativeTypeName("size_t")] nuint maxlen
        ) => Underlying.Value!.HidGetSerialNumberString(dev, @string, maxlen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidGetSerialNumberString(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("wchar_t *")] Ref<uint> @string,
            [NativeTypeName("size_t")] nuint maxlen
        )
        {
            fixed (uint* __dsl_string = @string)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidGetSerialNumberString(__dsl_dev, __dsl_string, maxlen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidInit() => Underlying.Value!.HidInit();

        [NativeFunction("SDL3", EntryPoint = "HidOpen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_hid_device* HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] uint* serial_number
        ) => Underlying.Value!.HidOpen(vendor_id, product_id, serial_number);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_hid_device> HidOpen(
            [NativeTypeName("unsigned short")] ushort vendor_id,
            [NativeTypeName("unsigned short")] ushort product_id,
            [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
        )
        {
            fixed (uint* __dsl_serial_number = serial_number)
            {
                return (SDL_hid_device*)HidOpen(vendor_id, product_id, __dsl_serial_number);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidOpenPath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_hid_device* HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.HidOpenPath(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_hid_device> HidOpenPath(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (SDL_hid_device*)HidOpenPath(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidRead")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidRead(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidRead(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidRead(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidRead(__dsl_dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidReadTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidReadTimeout(
            SDL_hid_device* dev,
            [NativeTypeName("unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        ) => Underlying.Value!.HidReadTimeout(dev, data, length, milliseconds);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidReadTimeout(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length,
            int milliseconds
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidReadTimeout(__dsl_dev, __dsl_data, length, milliseconds);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidSendFeatureReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSendFeatureReport(
            SDL_hid_device* dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidSendFeatureReport(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSendFeatureReport(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidSendFeatureReport(__dsl_dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidSetNonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSetNonblocking(SDL_hid_device* dev, int nonblock) =>
            Underlying.Value!.HidSetNonblocking(dev, nonblock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidSetNonblocking(Ref<SDL_hid_device> dev, int nonblock)
        {
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidSetNonblocking(__dsl_dev, nonblock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HidWrite")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidWrite(
            SDL_hid_device* dev,
            [NativeTypeName("const unsigned char *")] byte* data,
            [NativeTypeName("size_t")] nuint length
        ) => Underlying.Value!.HidWrite(dev, data, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HidWrite(
            Ref<SDL_hid_device> dev,
            [NativeTypeName("const unsigned char *")] Ref<byte> data,
            [NativeTypeName("size_t")] nuint length
        )
        {
            fixed (byte* __dsl_data = data)
            fixed (SDL_hid_device* __dsl_dev = dev)
            {
                return (int)HidWrite(__dsl_dev, __dsl_data, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "HideCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HideCursor() => Underlying.Value!.HideCursor();

        [NativeFunction("SDL3", EntryPoint = "HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HideWindow(SDL_Window* window) => Underlying.Value!.HideWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int HideWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)HideWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "Init")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int Init([NativeTypeName("Uint32")] uint flags) =>
            Underlying.Value!.Init(flags);

        [NativeFunction("SDL3", EntryPoint = "InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int InitHapticRumble(SDL_Haptic* haptic) =>
            Underlying.Value!.InitHapticRumble(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int InitHapticRumble(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)InitHapticRumble(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "InitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int InitSubSystem([NativeTypeName("Uint32")] uint flags) =>
            Underlying.Value!.InitSubSystem(flags);

        [NativeFunction("SDL3", EntryPoint = "IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_IOStream* IOFromConstMem(
            [NativeTypeName("const void *")] void* mem,
            [NativeTypeName("size_t")] nuint size
        ) => Underlying.Value!.IOFromConstMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromConstMem(
            [NativeTypeName("const void *")] Ref mem,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_mem = mem)
            {
                return (SDL_IOStream*)IOFromConstMem(__dsl_mem, size);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromDynamicMem() => Underlying.Value!.IOFromDynamicMem();

        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_IOStream* IOFromDynamicMemRaw() =>
            Underlying.Value!.IOFromDynamicMemRaw();

        [NativeFunction("SDL3", EntryPoint = "IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_IOStream* IOFromFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("const char *")] sbyte* mode
        ) => Underlying.Value!.IOFromFile(file, mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("const char *")] Ref<sbyte> mode
        )
        {
            fixed (sbyte* __dsl_mode = mode)
            fixed (sbyte* __dsl_file = file)
            {
                return (SDL_IOStream*)IOFromFile(__dsl_file, __dsl_mode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_IOStream* IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
            Underlying.Value!.IOFromMem(mem, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size)
        {
            fixed (void* __dsl_mem = mem)
            {
                return (SDL_IOStream*)IOFromMem(__dsl_mem, size);
            }
        }

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint IOvprintf(
            SDL_IOStream* context,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => Underlying.Value!.IOvprintf(context, fmt, ap);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint IOvprintf(
            Ref<SDL_IOStream> context,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (nuint)IOvprintf(__dsl_context, __dsl_fmt, __dsl_ap);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> IsGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.IsGamepad(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
            Underlying.Value!.IsGamepadRaw(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int IsJoystickHaptic(SDL_Joystick* joystick) =>
            Underlying.Value!.IsJoystickHaptic(joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> IsJoystickHaptic(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (MaybeBool<int>)(int)IsJoystickHaptic(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> IsJoystickVirtual(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.IsJoystickVirtual(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int IsJoystickVirtualRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.IsJoystickVirtualRaw(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> IsMouseHaptic() => Underlying.Value!.IsMouseHaptic();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int IsMouseHapticRaw() => Underlying.Value!.IsMouseHapticRaw();

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> IsTablet() => Underlying.Value!.IsTablet();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int IsTabletRaw() => Underlying.Value!.IsTabletRaw();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int JoystickConnected(SDL_Joystick* joystick) =>
            Underlying.Value!.JoystickConnected(joystick);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> JoystickConnected(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (MaybeBool<int>)(int)JoystickConnected(__dsl_joystick);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> JoystickEventsEnabled() =>
            Underlying.Value!.JoystickEventsEnabled();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int JoystickEventsEnabledRaw() =>
            Underlying.Value!.JoystickEventsEnabledRaw();

        [NativeFunction("SDL3", EntryPoint = "LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file) =>
            Underlying.Value!.LoadBMP(file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file)
        {
            fixed (sbyte* __dsl_file = file)
            {
                return (Surface*)LoadBMP(__dsl_file);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LoadBMPIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* LoadBMPIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio
        ) => Underlying.Value!.LoadBMPIO(src, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> LoadBMPIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (Surface*)LoadBMPIO(__dsl_src, (int)closeio);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* LoadFile(
            [NativeTypeName("const char *")] sbyte* file,
            [NativeTypeName("size_t *")] nuint* datasize
        ) => Underlying.Value!.LoadFile(file, datasize);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFile(
            [NativeTypeName("const char *")] Ref<sbyte> file,
            [NativeTypeName("size_t *")] Ref<nuint> datasize
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            fixed (sbyte* __dsl_file = file)
            {
                return (void*)LoadFile(__dsl_file, __dsl_datasize);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LoadFileIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* LoadFileIO(
            SDL_IOStream* src,
            [NativeTypeName("size_t *")] nuint* datasize,
            [NativeTypeName("SDL_bool")] int closeio
        ) => Underlying.Value!.LoadFileIO(src, datasize, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadFileIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("size_t *")] Ref<nuint> datasize,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (nuint* __dsl_datasize = datasize)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (void*)LoadFileIO(__dsl_src, __dsl_datasize, (int)closeio);
            }
        }

        [return: NativeTypeName("SDL_FunctionPointer")]
        [NativeFunction("SDL3", EntryPoint = "LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> LoadFunction(
            void* handle,
            [NativeTypeName("const char *")] sbyte* name
        ) => Underlying.Value!.LoadFunction(handle, name);

        [return: NativeTypeName("SDL_FunctionPointer")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static delegate* unmanaged<void> LoadFunction(
            Ref handle,
            [NativeTypeName("const char *")] Ref<sbyte> name
        )
        {
            fixed (sbyte* __dsl_name = name)
            fixed (void* __dsl_handle = handle)
            {
                return (delegate* unmanaged<void>)LoadFunction(__dsl_handle, __dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
            Underlying.Value!.LoadObject(sofile);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile)
        {
            fixed (sbyte* __dsl_sofile = sofile)
            {
                return (void*)LoadObject(__dsl_sofile);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LoadWAV(
            [NativeTypeName("const char *")] sbyte* path,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => Underlying.Value!.LoadWAV(path, spec, audio_buf, audio_len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LoadWAV(
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            fixed (sbyte* __dsl_path = path)
            {
                return (int)LoadWAV(__dsl_path, __dsl_spec, __dsl_audio_buf, __dsl_audio_len);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LoadWAVIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LoadWAVIO(
            SDL_IOStream* src,
            [NativeTypeName("SDL_bool")] int closeio,
            AudioSpec* spec,
            [NativeTypeName("Uint8 **")] byte** audio_buf,
            [NativeTypeName("Uint32 *")] uint* audio_len
        ) => Underlying.Value!.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LoadWAVIO(
            Ref<SDL_IOStream> src,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio,
            Ref<AudioSpec> spec,
            [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
            [NativeTypeName("Uint32 *")] Ref<uint> audio_len
        )
        {
            fixed (uint* __dsl_audio_len = audio_len)
            fixed (byte** __dsl_audio_buf = audio_buf)
            fixed (AudioSpec* __dsl_spec = spec)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (int)LoadWAVIO(
                    __dsl_src,
                    (int)closeio,
                    __dsl_spec,
                    __dsl_audio_buf,
                    __dsl_audio_len
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockAudioStream(SDL_AudioStream* stream) =>
            Underlying.Value!.LockAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)LockAudioStream(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockJoysticks() => Underlying.Value!.LockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockMutex(SDL_Mutex* mutex) => Underlying.Value!.LockMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                LockMutex(__dsl_mutex);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            Underlying.Value!.LockProperties(props);

        [NativeFunction("SDL3", EntryPoint = "LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForReading(SDL_RWLock* rwlock) =>
            Underlying.Value!.LockRWLockForReading(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForReading(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                LockRWLockForReading(__dsl_rwlock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForWriting(SDL_RWLock* rwlock) =>
            Underlying.Value!.LockRWLockForWriting(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockRWLockForWriting(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                LockRWLockForWriting(__dsl_rwlock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            Underlying.Value!.LockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                LockSpinlock(__dsl_lock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockSurface(Surface* surface) => Underlying.Value!.LockSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)LockSurface(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            void** pixels,
            int* pitch
        ) => Underlying.Value!.LockTexture(texture, rect, pixels, pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D pixels,
            Ref<int> pitch
        )
        {
            fixed (int* __dsl_pitch = pitch)
            fixed (void** __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)LockTexture(__dsl_texture, __dsl_rect, __dsl_pixels, __dsl_pitch);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockTextureToSurface(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            Surface** surface
        ) => Underlying.Value!.LockTextureToSurface(texture, rect, surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int LockTextureToSurface(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            Ref2D<Surface> surface
        )
        {
            fixed (Surface** __dsl_surface = surface)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)LockTextureToSurface(__dsl_texture, __dsl_rect, __dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LogGetPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static LogPriority LogGetPriority(int category) =>
            Underlying.Value!.LogGetPriority(category);

        [NativeFunction("SDL3", EntryPoint = "LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] sbyte* fmt,
            [NativeTypeName("va_list")] sbyte* ap
        ) => Underlying.Value!.LogMessageV(category, priority, fmt, ap);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogMessageV(
            int category,
            LogPriority priority,
            [NativeTypeName("const char *")] Ref<sbyte> fmt,
            [NativeTypeName("va_list")] Ref<sbyte> ap
        )
        {
            fixed (sbyte* __dsl_ap = ap)
            fixed (sbyte* __dsl_fmt = fmt)
            {
                LogMessageV(category, priority, __dsl_fmt, __dsl_ap);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "LogResetPriorities")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogResetPriorities() => Underlying.Value!.LogResetPriorities();

        [NativeFunction("SDL3", EntryPoint = "LogSetAllPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogSetAllPriority(LogPriority priority) =>
            Underlying.Value!.LogSetAllPriority(priority);

        [NativeFunction("SDL3", EntryPoint = "LogSetPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void LogSetPriority(int category, LogPriority priority) =>
            Underlying.Value!.LogSetPriority(category, priority);

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRGB(
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.MapRGB(format, r, g, b);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRGB(
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (PixelFormat* __dsl_format = format)
            {
                return (uint)MapRGB(__dsl_format, r, g, b);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "MapRgba")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRgba(
            [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.MapRgba(format, r, g, b, a);

        [return: NativeTypeName("Uint32")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint MapRgba(
            [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (PixelFormat* __dsl_format = format)
            {
                return (uint)MapRgba(__dsl_format, r, g, b, a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MaximizeWindow(SDL_Window* window) =>
            Underlying.Value!.MaximizeWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MaximizeWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)MaximizeWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "MemoryBarrierAcquireFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MemoryBarrierAcquireFunction() =>
            Underlying.Value!.MemoryBarrierAcquireFunction();

        [NativeFunction("SDL3", EntryPoint = "MemoryBarrierReleaseFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MemoryBarrierReleaseFunction() =>
            Underlying.Value!.MemoryBarrierReleaseFunction();

        [return: NativeTypeName("SDL_MetalView")]
        [NativeFunction("SDL3", EntryPoint = "MetalCreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* MetalCreateView(SDL_Window* window) =>
            Underlying.Value!.MetalCreateView(window);

        [return: NativeTypeName("SDL_MetalView")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalCreateView(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (void*)MetalCreateView(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "MetalDestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
            Underlying.Value!.MetalDestroyView(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                MetalDestroyView(__dsl_view);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "MetalGetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
            Underlying.Value!.MetalGetLayer(view);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view)
        {
            fixed (void* __dsl_view = view)
            {
                return (void*)MetalGetLayer(__dsl_view);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MinimizeWindow(SDL_Window* window) =>
            Underlying.Value!.MinimizeWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MinimizeWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)MinimizeWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "MixAudioFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MixAudioFormat(
            [NativeTypeName("Uint8 *")] byte* dst,
            [NativeTypeName("const Uint8 *")] byte* src,
            [NativeTypeName("SDL_AudioFormat")] ushort format,
            [NativeTypeName("Uint32")] uint len,
            int volume
        ) => Underlying.Value!.MixAudioFormat(dst, src, format, len, volume);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_MixAudioFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int MixAudioFormat(
            [NativeTypeName("Uint8 *")] Ref<byte> dst,
            [NativeTypeName("const Uint8 *")] Ref<byte> src,
            [NativeTypeName("SDL_AudioFormat")] ushort format,
            [NativeTypeName("Uint32")] uint len,
            int volume
        )
        {
            fixed (byte* __dsl_src = src)
            fixed (byte* __dsl_dst = dst)
            {
                return (int)MixAudioFormat(__dsl_dst, __dsl_src, format, len, volume);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OnApplicationDidBecomeActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationDidBecomeActive() =>
            Underlying.Value!.OnApplicationDidBecomeActive();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationDidEnterBackground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationDidEnterBackground() =>
            Underlying.Value!.OnApplicationDidEnterBackground();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationDidReceiveMemoryWarning")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationDidReceiveMemoryWarning() =>
            Underlying.Value!.OnApplicationDidReceiveMemoryWarning();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationWillEnterForeground")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationWillEnterForeground() =>
            Underlying.Value!.OnApplicationWillEnterForeground();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationWillResignActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationWillResignActive() =>
            Underlying.Value!.OnApplicationWillResignActive();

        [NativeFunction("SDL3", EntryPoint = "OnApplicationWillTerminate")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void OnApplicationWillTerminate() =>
            Underlying.Value!.OnApplicationWillTerminate();

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [NativeFunction("SDL3", EntryPoint = "OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
        ) => Underlying.Value!.OpenAudioDevice(devid, spec);

        [return: NativeTypeName("SDL_AudioDeviceID")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint OpenAudioDevice(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
        )
        {
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (uint)OpenAudioDevice(devid, __dsl_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_AudioStream* OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        ) => Underlying.Value!.OpenAudioDeviceStream(devid, spec, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_AudioStream> OpenAudioDeviceStream(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (AudioSpec* __dsl_spec = spec)
            {
                return (SDL_AudioStream*)OpenAudioDeviceStream(
                    devid,
                    __dsl_spec,
                    callback,
                    __dsl_userdata
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OpenCameraDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Camera* OpenCameraDevice(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
        ) => Underlying.Value!.OpenCameraDevice(instance_id, spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenCameraDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Camera> OpenCameraDevice(
            [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
            [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
        )
        {
            fixed (CameraSpec* __dsl_spec = spec)
            {
                return (SDL_Camera*)OpenCameraDevice(instance_id, __dsl_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Storage* OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.OpenFileStorage(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenFileStorage(
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (SDL_Storage*)OpenFileStorage(__dsl_path);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Gamepad> OpenGamepad(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.OpenGamepad(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Gamepad* OpenGamepadRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.OpenGamepadRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> OpenHaptic(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.OpenHaptic(instance_id);

        [NativeFunction("SDL3", EntryPoint = "OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Haptic* OpenHapticFromJoystick(SDL_Joystick* joystick) =>
            Underlying.Value!.OpenHapticFromJoystick(joystick);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> OpenHapticFromJoystick(Ref<SDL_Joystick> joystick)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (SDL_Haptic*)OpenHapticFromJoystick(__dsl_joystick);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Haptic> OpenHapticFromMouse() =>
            Underlying.Value!.OpenHapticFromMouse();

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Haptic* OpenHapticFromMouseRaw() =>
            Underlying.Value!.OpenHapticFromMouseRaw();

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Haptic* OpenHapticRaw(
            [NativeTypeName("SDL_HapticID")] uint instance_id
        ) => Underlying.Value!.OpenHapticRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_IOStream* OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
            void* userdata
        ) => Underlying.Value!.OpenIO(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_IOStream> OpenIO(
            [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (IOStreamInterface* __dsl_iface = iface)
            {
                return (SDL_IOStream*)OpenIO(__dsl_iface, __dsl_userdata);
            }
        }

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Joystick> OpenJoystick(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.OpenJoystick(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Joystick* OpenJoystickRaw(
            [NativeTypeName("SDL_JoystickID")] uint instance_id
        ) => Underlying.Value!.OpenJoystickRaw(instance_id);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Sensor> OpenSensor(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.OpenSensor(instance_id);

        [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Sensor* OpenSensorRaw(
            [NativeTypeName("SDL_SensorID")] uint instance_id
        ) => Underlying.Value!.OpenSensorRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Storage* OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
            void* userdata
        ) => Underlying.Value!.OpenStorage(iface, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenStorage(
            [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (StorageInterface* __dsl_iface = iface)
            {
                return (SDL_Storage*)OpenStorage(__dsl_iface, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Storage* OpenTitleStorage(
            [NativeTypeName("const char *")] sbyte* @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.OpenTitleStorage(@override, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenTitleStorage(
            [NativeTypeName("const char *")] Ref<sbyte> @override,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_override = @override)
            {
                return (SDL_Storage*)OpenTitleStorage(__dsl_override, props);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int OpenURL([NativeTypeName("const char *")] sbyte* url) =>
            Underlying.Value!.OpenURL(url);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int OpenURL([NativeTypeName("const char *")] Ref<sbyte> url)
        {
            fixed (sbyte* __dsl_url = url)
            {
                return (int)OpenURL(__dsl_url);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static SDL_Storage* OpenUserStorage(
            [NativeTypeName("const char *")] sbyte* org,
            [NativeTypeName("const char *")] sbyte* app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        ) => Underlying.Value!.OpenUserStorage(org, app, props);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<SDL_Storage> OpenUserStorage(
            [NativeTypeName("const char *")] Ref<sbyte> org,
            [NativeTypeName("const char *")] Ref<sbyte> app,
            [NativeTypeName("SDL_PropertiesID")] uint props
        )
        {
            fixed (sbyte* __dsl_app = app)
            fixed (sbyte* __dsl_org = org)
            {
                return (SDL_Storage*)OpenUserStorage(__dsl_org, __dsl_app, props);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "PauseAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            Underlying.Value!.PauseAudioDevice(dev);

        [NativeFunction("SDL3", EntryPoint = "PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PauseHaptic(SDL_Haptic* haptic) => Underlying.Value!.PauseHaptic(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PauseHaptic(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)PauseHaptic(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PeepEvents(
            Event* events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        ) => Underlying.Value!.PeepEvents(events, numevents, action, minType, maxType);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PeepEvents(
            Ref<Event> events,
            int numevents,
            EventAction action,
            [NativeTypeName("Uint32")] uint minType,
            [NativeTypeName("Uint32")] uint maxType
        )
        {
            fixed (Event* __dsl_events = events)
            {
                return (int)PeepEvents(__dsl_events, numevents, action, minType, maxType);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> PenConnected([NativeTypeName("SDL_PenID")] uint instance_id) =>
            Underlying.Value!.PenConnected(instance_id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PenConnectedRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
            Underlying.Value!.PenConnectedRaw(instance_id);

        [NativeFunction("SDL3", EntryPoint = "PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PlayHapticRumble(
            SDL_Haptic* haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        ) => Underlying.Value!.PlayHapticRumble(haptic, strength, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PlayHapticRumble(
            Ref<SDL_Haptic> haptic,
            float strength,
            [NativeTypeName("Uint32")] uint length
        )
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)PlayHapticRumble(__dsl_haptic, strength, length);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PollEvent(Event* @event) => Underlying.Value!.PollEvent(@event);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> PollEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<int>)(int)PollEvent(__dsl_event);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "PostSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PostSemaphore(SDL_Semaphore* sem) => Underlying.Value!.PostSemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PostSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PostSemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)PostSemaphore(__dsl_sem);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PremultiplyAlpha(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] void* src,
            int src_pitch,
            PixelFormatEnum dst_format,
            void* dst,
            int dst_pitch
        ) =>
            Underlying.Value!.PremultiplyAlpha(
                width,
                height,
                src_format,
                src,
                src_pitch,
                dst_format,
                dst,
                dst_pitch
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PremultiplyAlpha(
            int width,
            int height,
            PixelFormatEnum src_format,
            [NativeTypeName("const void *")] Ref src,
            int src_pitch,
            PixelFormatEnum dst_format,
            Ref dst,
            int dst_pitch
        )
        {
            fixed (void* __dsl_dst = dst)
            fixed (void* __dsl_src = src)
            {
                return (int)PremultiplyAlpha(
                    width,
                    height,
                    src_format,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    __dsl_dst,
                    dst_pitch
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "PumpEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void PumpEvents() => Underlying.Value!.PumpEvents();

        [NativeFunction("SDL3", EntryPoint = "PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PushEvent(Event* @event) => Underlying.Value!.PushEvent(@event);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PushEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (int)PushEvent(__dsl_event);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PutAudioStreamData(
            SDL_AudioStream* stream,
            [NativeTypeName("const void *")] void* buf,
            int len
        ) => Underlying.Value!.PutAudioStreamData(stream, buf, len);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int PutAudioStreamData(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("const void *")] Ref buf,
            int len
        )
        {
            fixed (void* __dsl_buf = buf)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)PutAudioStreamData(__dsl_stream, __dsl_buf, len);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "QueryTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int QueryTexture(
            SDL_Texture* texture,
            PixelFormatEnum* format,
            int* access,
            int* w,
            int* h
        ) => Underlying.Value!.QueryTexture(texture, format, access, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_QueryTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int QueryTexture(
            Ref<SDL_Texture> texture,
            Ref<PixelFormatEnum> format,
            Ref<int> access,
            Ref<int> w,
            Ref<int> h
        )
        {
            fixed (int* __dsl_h = h)
            fixed (int* __dsl_w = w)
            fixed (int* __dsl_access = access)
            fixed (PixelFormatEnum* __dsl_format = format)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)QueryTexture(
                    __dsl_texture,
                    __dsl_format,
                    __dsl_access,
                    __dsl_w,
                    __dsl_h
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "Quit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void Quit() => Underlying.Value!.Quit();

        [NativeFunction("SDL3", EntryPoint = "QuitSubSystem")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void QuitSubSystem([NativeTypeName("Uint32")] uint flags) =>
            Underlying.Value!.QuitSubSystem(flags);

        [NativeFunction("SDL3", EntryPoint = "RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RaiseWindow(SDL_Window* window) => Underlying.Value!.RaiseWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RaiseWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)RaiseWindow(__dsl_window);
            }
        }

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint ReadIO(
            SDL_IOStream* context,
            void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => Underlying.Value!.ReadIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint ReadIO(
            Ref<SDL_IOStream> context,
            Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (nuint)ReadIO(__dsl_context, __dsl_ptr, size);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadS16BE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
            Underlying.Value!.ReadS16BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS16BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS16BE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadS16LE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
            Underlying.Value!.ReadS16LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS16LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint16 *")] Ref<short> value
        )
        {
            fixed (short* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS16LE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadS32BE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
            Underlying.Value!.ReadS32BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS32BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS32BE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadS32LE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
            Underlying.Value!.ReadS32LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS32LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint32 *")] Ref<int> value
        )
        {
            fixed (int* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS32LE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadS64BE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
            Underlying.Value!.ReadS64BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS64BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS64BE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadS64LE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
            Underlying.Value!.ReadS64LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadS64LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Sint64 *")] Ref<long> value
        )
        {
            fixed (long* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadS64LE(__dsl_src, __dsl_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadStorageFile(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            void* destination,
            [NativeTypeName("Uint64")] ulong length
        ) => Underlying.Value!.ReadStorageFile(storage, path, destination, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadStorageFile(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            Ref destination,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_destination = destination)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)ReadStorageFile(__dsl_storage, __dsl_path, __dsl_destination, length);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadSurfacePixel(
            Surface* surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] byte* r,
            [NativeTypeName("Uint8 *")] byte* g,
            [NativeTypeName("Uint8 *")] byte* b,
            [NativeTypeName("Uint8 *")] byte* a
        ) => Underlying.Value!.ReadSurfacePixel(surface, x, y, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadSurfacePixel(
            Ref<Surface> surface,
            int x,
            int y,
            [NativeTypeName("Uint8 *")] Ref<byte> r,
            [NativeTypeName("Uint8 *")] Ref<byte> g,
            [NativeTypeName("Uint8 *")] Ref<byte> b,
            [NativeTypeName("Uint8 *")] Ref<byte> a
        )
        {
            fixed (byte* __dsl_a = a)
            fixed (byte* __dsl_b = b)
            fixed (byte* __dsl_g = g)
            fixed (byte* __dsl_r = r)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)ReadSurfacePixel(
                    __dsl_surface,
                    x,
                    y,
                    __dsl_r,
                    __dsl_g,
                    __dsl_b,
                    __dsl_a
                );
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU16BE(
            SDL_IOStream* src,
            [NativeTypeName("Uint16 *")] ushort* value
        ) => Underlying.Value!.ReadU16BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU16BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU16BE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU16LE(
            SDL_IOStream* src,
            [NativeTypeName("Uint16 *")] ushort* value
        ) => Underlying.Value!.ReadU16LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU16LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint16 *")] Ref<ushort> value
        )
        {
            fixed (ushort* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU16LE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU32BE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
            Underlying.Value!.ReadU32BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU32BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU32BE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU32LE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
            Underlying.Value!.ReadU32LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU32LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint32 *")] Ref<uint> value
        )
        {
            fixed (uint* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU32LE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU64BE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
            Underlying.Value!.ReadU64BE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU64BE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU64BE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU64LE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
            Underlying.Value!.ReadU64LE(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU64LE(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint64 *")] Ref<ulong> value
        )
        {
            fixed (ulong* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU64LE(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReadU8(SDL_IOStream* src, [NativeTypeName("Uint8 *")] byte* value) =>
            Underlying.Value!.ReadU8(src, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ReadU8(
            Ref<SDL_IOStream> src,
            [NativeTypeName("Uint8 *")] Ref<byte> value
        )
        {
            fixed (byte* __dsl_value = value)
            fixed (SDL_IOStream* __dsl_src = src)
            {
                return (MaybeBool<int>)(int)ReadU8(__dsl_src, __dsl_value);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "RegisterEvents")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint RegisterEvents(int numevents) =>
            Underlying.Value!.RegisterEvents(numevents);

        [NativeFunction("SDL3", EntryPoint = "ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReleaseCameraFrame(SDL_Camera* camera, Surface* frame) =>
            Underlying.Value!.ReleaseCameraFrame(camera, frame);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReleaseCameraFrame(Ref<SDL_Camera> camera, Ref<Surface> frame)
        {
            fixed (Surface* __dsl_frame = frame)
            fixed (SDL_Camera* __dsl_camera = camera)
            {
                return (int)ReleaseCameraFrame(__dsl_camera, __dsl_frame);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ReloadGamepadMappings")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ReloadGamepadMappings() => Underlying.Value!.ReloadGamepadMappings();

        [NativeFunction("SDL3", EntryPoint = "RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemovePath([NativeTypeName("const char *")] sbyte* path) =>
            Underlying.Value!.RemovePath(path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemovePath([NativeTypeName("const char *")] Ref<sbyte> path)
        {
            fixed (sbyte* __dsl_path = path)
            {
                return (int)RemovePath(__dsl_path);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemoveStoragePath(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path
        ) => Underlying.Value!.RemoveStoragePath(storage, path);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemoveStoragePath(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path
        )
        {
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)RemoveStoragePath(__dsl_storage, __dsl_path);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
            Underlying.Value!.RemoveTimer(id);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) =>
            Underlying.Value!.RemoveTimerRaw(id);

        [NativeFunction("SDL3", EntryPoint = "RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenamePath(
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => Underlying.Value!.RenamePath(oldpath, newpath);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenamePath(
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            {
                return (int)RenamePath(__dsl_oldpath, __dsl_newpath);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenameStoragePath(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* oldpath,
            [NativeTypeName("const char *")] sbyte* newpath
        ) => Underlying.Value!.RenameStoragePath(storage, oldpath, newpath);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenameStoragePath(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> oldpath,
            [NativeTypeName("const char *")] Ref<sbyte> newpath
        )
        {
            fixed (sbyte* __dsl_newpath = newpath)
            fixed (sbyte* __dsl_oldpath = oldpath)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)RenameStoragePath(__dsl_storage, __dsl_oldpath, __dsl_newpath);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderClear(SDL_Renderer* renderer) =>
            Underlying.Value!.RenderClear(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderClear(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderClear(__dsl_renderer);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderClipEnabled(SDL_Renderer* renderer) =>
            Underlying.Value!.RenderClipEnabled(renderer);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> RenderClipEnabled(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (MaybeBool<int>)(int)RenderClipEnabled(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderCoordinatesFromWindow(
            SDL_Renderer* renderer,
            float window_x,
            float window_y,
            float* x,
            float* y
        ) => Underlying.Value!.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderCoordinatesFromWindow(
            Ref<SDL_Renderer> renderer,
            float window_x,
            float window_y,
            Ref<float> x,
            Ref<float> y
        )
        {
            fixed (float* __dsl_y = y)
            fixed (float* __dsl_x = x)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderCoordinatesFromWindow(
                    __dsl_renderer,
                    window_x,
                    window_y,
                    __dsl_x,
                    __dsl_y
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderCoordinatesToWindow(
            SDL_Renderer* renderer,
            float x,
            float y,
            float* window_x,
            float* window_y
        ) => Underlying.Value!.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderCoordinatesToWindow(
            Ref<SDL_Renderer> renderer,
            float x,
            float y,
            Ref<float> window_x,
            Ref<float> window_y
        )
        {
            fixed (float* __dsl_window_y = window_y)
            fixed (float* __dsl_window_x = window_x)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderCoordinatesToWindow(
                    __dsl_renderer,
                    x,
                    y,
                    __dsl_window_x,
                    __dsl_window_y
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderFillRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => Underlying.Value!.RenderFillRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderFillRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderFillRect(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderFillRects(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => Underlying.Value!.RenderFillRects(renderer, rects, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderFillRects(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderFillRects(__dsl_renderer, __dsl_rects, count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometry(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
            int num_vertices,
            [NativeTypeName("const int *")] int* indices,
            int num_indices
        ) =>
            Underlying.Value!.RenderGeometry(
                renderer,
                texture,
                vertices,
                num_vertices,
                indices,
                num_indices
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometry(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
            int num_vertices,
            [NativeTypeName("const int *")] Ref<int> indices,
            int num_indices
        )
        {
            fixed (int* __dsl_indices = indices)
            fixed (Vertex* __dsl_vertices = vertices)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderGeometry(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_vertices,
                    num_vertices,
                    __dsl_indices,
                    num_indices
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometryRaw(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_Color *")] Color* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        ) =>
            Underlying.Value!.RenderGeometryRaw(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometryRaw(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_Color *")] Ref<Color> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        )
        {
            fixed (void* __dsl_indices = indices)
            fixed (float* __dsl_uv = uv)
            fixed (Color* __dsl_color = color)
            fixed (float* __dsl_xy = xy)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderGeometryRaw(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_xy,
                    xy_stride,
                    __dsl_color,
                    color_stride,
                    __dsl_uv,
                    uv_stride,
                    num_vertices,
                    __dsl_indices,
                    num_indices,
                    size_indices
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderGeometryRawFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometryRawFloat(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const float *")] float* xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] FColor* color,
            int color_stride,
            [NativeTypeName("const float *")] float* uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] void* indices,
            int num_indices,
            int size_indices
        ) =>
            Underlying.Value!.RenderGeometryRawFloat(
                renderer,
                texture,
                xy,
                xy_stride,
                color,
                color_stride,
                uv,
                uv_stride,
                num_vertices,
                indices,
                num_indices,
                size_indices
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRawFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderGeometryRawFloat(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const float *")] Ref<float> xy,
            int xy_stride,
            [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
            int color_stride,
            [NativeTypeName("const float *")] Ref<float> uv,
            int uv_stride,
            int num_vertices,
            [NativeTypeName("const void *")] Ref indices,
            int num_indices,
            int size_indices
        )
        {
            fixed (void* __dsl_indices = indices)
            fixed (float* __dsl_uv = uv)
            fixed (FColor* __dsl_color = color)
            fixed (float* __dsl_xy = xy)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderGeometryRawFloat(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_xy,
                    xy_stride,
                    __dsl_color,
                    color_stride,
                    __dsl_uv,
                    uv_stride,
                    num_vertices,
                    __dsl_indices,
                    num_indices,
                    size_indices
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderLine(
            SDL_Renderer* renderer,
            float x1,
            float y1,
            float x2,
            float y2
        ) => Underlying.Value!.RenderLine(renderer, x1, y1, x2, y2);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderLine(
            Ref<SDL_Renderer> renderer,
            float x1,
            float y1,
            float x2,
            float y2
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderLine(__dsl_renderer, x1, y1, x2, y2);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderLines(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => Underlying.Value!.RenderLines(renderer, points, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderLines(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderLines(__dsl_renderer, __dsl_points, count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPoint(SDL_Renderer* renderer, float x, float y) =>
            Underlying.Value!.RenderPoint(renderer, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPoint(Ref<SDL_Renderer> renderer, float x, float y)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderPoint(__dsl_renderer, x, y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPoints(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FPoint *")] FPoint* points,
            int count
        ) => Underlying.Value!.RenderPoints(renderer, points, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPoints(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
            int count
        )
        {
            fixed (FPoint* __dsl_points = points)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderPoints(__dsl_renderer, __dsl_points, count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPresent(SDL_Renderer* renderer) =>
            Underlying.Value!.RenderPresent(renderer);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderPresent(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderPresent(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Surface* RenderReadPixels(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.RenderReadPixels(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static Ptr<Surface> RenderReadPixels(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (Surface*)RenderReadPixels(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rect
        ) => Underlying.Value!.RenderRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
        )
        {
            fixed (FRect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderRect(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderRects(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_FRect *")] FRect* rects,
            int count
        ) => Underlying.Value!.RenderRects(renderer, rects, count);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderRects(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
            int count
        )
        {
            fixed (FRect* __dsl_rects = rects)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderRects(__dsl_renderer, __dsl_rects, count);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderTexture(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect
        ) => Underlying.Value!.RenderTexture(renderer, texture, srcrect, dstrect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderTexture(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
        )
        {
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderTexture(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_srcrect,
                    __dsl_dstrect
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderTextureRotated(
            SDL_Renderer* renderer,
            SDL_Texture* texture,
            [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
            [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
            [NativeTypeName("const double")] double angle,
            [NativeTypeName("const SDL_FPoint *")] FPoint* center,
            [NativeTypeName("const SDL_FlipMode")] FlipMode flip
        ) =>
            Underlying.Value!.RenderTextureRotated(
                renderer,
                texture,
                srcrect,
                dstrect,
                angle,
                center,
                flip
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderTextureRotated(
            Ref<SDL_Renderer> renderer,
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
            [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
            [NativeTypeName("const double")] double angle,
            [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
            [NativeTypeName("const SDL_FlipMode")] FlipMode flip
        )
        {
            fixed (FPoint* __dsl_center = center)
            fixed (FRect* __dsl_dstrect = dstrect)
            fixed (FRect* __dsl_srcrect = srcrect)
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)RenderTextureRotated(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_srcrect,
                    __dsl_dstrect,
                    angle,
                    __dsl_center,
                    flip
                );
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RenderViewportSet(SDL_Renderer* renderer) =>
            Underlying.Value!.RenderViewportSet(renderer);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> RenderViewportSet(Ref<SDL_Renderer> renderer)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (MaybeBool<int>)(int)RenderViewportSet(__dsl_renderer);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertState ReportAssertion(
            AssertData* data,
            [NativeTypeName("const char *")] sbyte* func,
            [NativeTypeName("const char *")] sbyte* file,
            int line
        ) => Underlying.Value!.ReportAssertion(data, func, file, line);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static AssertState ReportAssertion(
            Ref<AssertData> data,
            [NativeTypeName("const char *")] Ref<sbyte> func,
            [NativeTypeName("const char *")] Ref<sbyte> file,
            int line
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (sbyte* __dsl_func = func)
            fixed (AssertData* __dsl_data = data)
            {
                return (AssertState)ReportAssertion(__dsl_data, __dsl_func, __dsl_file, line);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ResetAssertionReport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetAssertionReport() => Underlying.Value!.ResetAssertionReport();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ResetHint([NativeTypeName("const char *")] sbyte* name) =>
            Underlying.Value!.ResetHint(name);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name)
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)ResetHint(__dsl_name);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ResetHints")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetHints() => Underlying.Value!.ResetHints();

        [NativeFunction("SDL3", EntryPoint = "ResetKeyboard")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ResetKeyboard() => Underlying.Value!.ResetKeyboard();

        [NativeFunction("SDL3", EntryPoint = "RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RestoreWindow(SDL_Window* window) =>
            Underlying.Value!.RestoreWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RestoreWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)RestoreWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ResumeAudioDevice")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
            Underlying.Value!.ResumeAudioDevice(dev);

        [NativeFunction("SDL3", EntryPoint = "ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ResumeHaptic(SDL_Haptic* haptic) =>
            Underlying.Value!.ResumeHaptic(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ResumeHaptic(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)ResumeHaptic(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleGamepad(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleGamepad(
                gamepad,
                low_frequency_rumble,
                high_frequency_rumble,
                duration_ms
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleGamepad(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)RumbleGamepad(
                    __dsl_gamepad,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleGamepadTriggers(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleGamepadTriggers(
                gamepad,
                left_rumble,
                right_rumble,
                duration_ms
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleGamepadTriggers(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)RumbleGamepadTriggers(
                    __dsl_gamepad,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleJoystick(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleJoystick(
                joystick,
                low_frequency_rumble,
                high_frequency_rumble,
                duration_ms
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleJoystick(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint16")] ushort low_frequency_rumble,
            [NativeTypeName("Uint16")] ushort high_frequency_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)RumbleJoystick(
                    __dsl_joystick,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleJoystickTriggers(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        ) =>
            Underlying.Value!.RumbleJoystickTriggers(
                joystick,
                left_rumble,
                right_rumble,
                duration_ms
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RumbleJoystickTriggers(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint16")] ushort left_rumble,
            [NativeTypeName("Uint16")] ushort right_rumble,
            [NativeTypeName("Uint32")] uint duration_ms
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)RumbleJoystickTriggers(
                    __dsl_joystick,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RunHapticEffect(
            SDL_Haptic* haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        ) => Underlying.Value!.RunHapticEffect(haptic, effect, iterations);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int RunHapticEffect(
            Ref<SDL_Haptic> haptic,
            int effect,
            [NativeTypeName("Uint32")] uint iterations
        )
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)RunHapticEffect(__dsl_haptic, effect, iterations);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
            Underlying.Value!.SaveBMP(surface, file);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SaveBMP(
            Ref<Surface> surface,
            [NativeTypeName("const char *")] Ref<sbyte> file
        )
        {
            fixed (sbyte* __dsl_file = file)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SaveBMP(__dsl_surface, __dsl_file);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SaveBMPIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SaveBMPIO(
            Surface* surface,
            SDL_IOStream* dst,
            [NativeTypeName("SDL_bool")] int closeio
        ) => Underlying.Value!.SaveBMPIO(surface, dst, closeio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SaveBMPIO(
            Ref<Surface> surface,
            Ref<SDL_IOStream> dst,
            [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SaveBMPIO(__dsl_surface, __dsl_dst, (int)closeio);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ScreenKeyboardShown(SDL_Window* window) =>
            Underlying.Value!.ScreenKeyboardShown(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ScreenKeyboardShown(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)ScreenKeyboardShown(__dsl_window);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> ScreenSaverEnabled() => Underlying.Value!.ScreenSaverEnabled();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ScreenSaverEnabledRaw() => Underlying.Value!.ScreenSaverEnabledRaw();

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long SeekIO(
            SDL_IOStream* context,
            [NativeTypeName("Sint64")] long offset,
            int whence
        ) => Underlying.Value!.SeekIO(context, offset, whence);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long SeekIO(
            Ref<SDL_IOStream> context,
            [NativeTypeName("Sint64")] long offset,
            int whence
        )
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (long)SeekIO(__dsl_context, offset, whence);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SendGamepadEffect(
            SDL_Gamepad* gamepad,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => Underlying.Value!.SendGamepadEffect(gamepad, data, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SendGamepadEffect(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SendGamepadEffect(__dsl_gamepad, __dsl_data, size);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SendJoystickEffect(
            SDL_Joystick* joystick,
            [NativeTypeName("const void *")] void* data,
            int size
        ) => Underlying.Value!.SendJoystickEffect(joystick, data, size);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SendJoystickEffect(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("const void *")] Ref data,
            int size
        )
        {
            fixed (void* __dsl_data = data)
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SendJoystickEffect(__dsl_joystick, __dsl_data, size);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")]
                delegate* unmanaged<AssertData*, void*, AssertState> handler,
            void* userdata
        ) => Underlying.Value!.SetAssertionHandler(handler, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetAssertionHandler(
            [NativeTypeName("SDL_AssertionHandler")]
                delegate* unmanaged<AssertData*, void*, AssertState> handler,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetAssertionHandler(handler, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")]
                delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
            void* userdata
        ) => Underlying.Value!.SetAudioPostmixCallback(devid, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioPostmixCallback(
            [NativeTypeName("SDL_AudioDeviceID")] uint devid,
            [NativeTypeName("SDL_AudioPostmixCallback")]
                delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)SetAudioPostmixCallback(devid, callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamFormat(
            SDL_AudioStream* stream,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
        ) => Underlying.Value!.SetAudioStreamFormat(stream, src_spec, dst_spec);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamFormat(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
            [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
        )
        {
            fixed (AudioSpec* __dsl_dst_spec = dst_spec)
            fixed (AudioSpec* __dsl_src_spec = src_spec)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamFormat(__dsl_stream, __dsl_src_spec, __dsl_dst_spec);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio) =>
            Underlying.Value!.SetAudioStreamFrequencyRatio(stream, ratio);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream, float ratio)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamFrequencyRatio(__dsl_stream, ratio);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamGetCallback(
            SDL_AudioStream* stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        ) => Underlying.Value!.SetAudioStreamGetCallback(stream, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamGetCallback(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamGetCallback(__dsl_stream, callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamPutCallback(
            SDL_AudioStream* stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            void* userdata
        ) => Underlying.Value!.SetAudioStreamPutCallback(stream, callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetAudioStreamPutCallback(
            Ref<SDL_AudioStream> stream,
            [NativeTypeName("SDL_AudioStreamCallback")]
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)SetAudioStreamPutCallback(__dsl_stream, callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("SDL_bool")] int value
        ) => Underlying.Value!.SetBooleanProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetBooleanProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("SDL_bool")] MaybeBool<int> value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetBooleanProperty(props, __dsl_name, (int)value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")]
                delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")]
                delegate* unmanaged<void*, void> cleanup,
            void* userdata,
            [NativeTypeName("const char **")] sbyte** mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        ) =>
            Underlying.Value!.SetClipboardData(
                callback,
                cleanup,
                userdata,
                mime_types,
                num_mime_types
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetClipboardData(
            [NativeTypeName("SDL_ClipboardDataCallback")]
                delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
            [NativeTypeName("SDL_ClipboardCleanupCallback")]
                delegate* unmanaged<void*, void> cleanup,
            Ref userdata,
            [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
            [NativeTypeName("size_t")] nuint num_mime_types
        )
        {
            fixed (sbyte** __dsl_mime_types = mime_types)
            fixed (void* __dsl_userdata = userdata)
            {
                return (int)SetClipboardData(
                    callback,
                    cleanup,
                    __dsl_userdata,
                    __dsl_mime_types,
                    num_mime_types
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
            Underlying.Value!.SetClipboardText(text);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text)
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (int)SetClipboardText(__dsl_text);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetCursor(SDL_Cursor* cursor) => Underlying.Value!.SetCursor(cursor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetCursor(Ref<SDL_Cursor> cursor)
        {
            fixed (SDL_Cursor* __dsl_cursor = cursor)
            {
                return (int)SetCursor(__dsl_cursor);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("SDL_bool")] int enabled
        ) => Underlying.Value!.SetEventEnabled(type, enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventEnabled(
            [NativeTypeName("Uint32")] uint type,
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => Underlying.Value!.SetEventEnabled(type, enabled);

        [NativeFunction("SDL3", EntryPoint = "SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            void* userdata
        ) => Underlying.Value!.SetEventFilter(filter, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetEventFilter(
            [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetEventFilter(filter, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            float value
        ) => Underlying.Value!.SetFloatProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetFloatProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            float value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetFloatProperty(props, __dsl_name, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
            Underlying.Value!.SetGamepadEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetGamepadEventsEnabled(
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => Underlying.Value!.SetGamepadEventsEnabled(enabled);

        [NativeFunction("SDL3", EntryPoint = "SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadLED(
            SDL_Gamepad* gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => Underlying.Value!.SetGamepadLED(gamepad, red, green, blue);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadLED(
            Ref<SDL_Gamepad> gamepad,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SetGamepadLED(__dsl_gamepad, red, green, blue);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] sbyte* mapping
        ) => Underlying.Value!.SetGamepadMapping(instance_id, mapping);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadMapping(
            [NativeTypeName("SDL_JoystickID")] uint instance_id,
            [NativeTypeName("const char *")] Ref<sbyte> mapping
        )
        {
            fixed (sbyte* __dsl_mapping = mapping)
            {
                return (int)SetGamepadMapping(instance_id, __dsl_mapping);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index) =>
            Underlying.Value!.SetGamepadPlayerIndex(gamepad, player_index);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad, int player_index)
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SetGamepadPlayerIndex(__dsl_gamepad, player_index);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadSensorEnabled(
            SDL_Gamepad* gamepad,
            SensorType type,
            [NativeTypeName("SDL_bool")] int enabled
        ) => Underlying.Value!.SetGamepadSensorEnabled(gamepad, type, enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetGamepadSensorEnabled(
            Ref<SDL_Gamepad> gamepad,
            SensorType type,
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        )
        {
            fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
            {
                return (int)SetGamepadSensorEnabled(__dsl_gamepad, type, (int)enabled);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHapticAutocenter(SDL_Haptic* haptic, int autocenter) =>
            Underlying.Value!.SetHapticAutocenter(haptic, autocenter);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHapticAutocenter(Ref<SDL_Haptic> haptic, int autocenter)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)SetHapticAutocenter(__dsl_haptic, autocenter);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHapticGain(SDL_Haptic* haptic, int gain) =>
            Underlying.Value!.SetHapticGain(haptic, gain);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHapticGain(Ref<SDL_Haptic> haptic, int gain)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)SetHapticGain(__dsl_haptic, gain);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHint(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => Underlying.Value!.SetHint(name, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SetHint(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)SetHint(__dsl_name, __dsl_value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetHintWithPriority(
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value,
            HintPriority priority
        ) => Underlying.Value!.SetHintWithPriority(name, value, priority);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SetHintWithPriority(
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value,
            HintPriority priority
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (MaybeBool<int>)(int)SetHintWithPriority(__dsl_name, __dsl_value, priority);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetJoystickEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
            Underlying.Value!.SetJoystickEventsEnabled(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetJoystickEventsEnabled(
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => Underlying.Value!.SetJoystickEventsEnabled(enabled);

        [NativeFunction("SDL3", EntryPoint = "SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickLED(
            SDL_Joystick* joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        ) => Underlying.Value!.SetJoystickLED(joystick, red, green, blue);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickLED(
            Ref<SDL_Joystick> joystick,
            [NativeTypeName("Uint8")] byte red,
            [NativeTypeName("Uint8")] byte green,
            [NativeTypeName("Uint8")] byte blue
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickLED(__dsl_joystick, red, green, blue);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index) =>
            Underlying.Value!.SetJoystickPlayerIndex(joystick, player_index);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickPlayerIndex(Ref<SDL_Joystick> joystick, int player_index)
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickPlayerIndex(__dsl_joystick, player_index);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualAxis(
            SDL_Joystick* joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        ) => Underlying.Value!.SetJoystickVirtualAxis(joystick, axis, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualAxis(
            Ref<SDL_Joystick> joystick,
            int axis,
            [NativeTypeName("Sint16")] short value
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickVirtualAxis(__dsl_joystick, axis, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualButton(
            SDL_Joystick* joystick,
            int button,
            [NativeTypeName("Uint8")] byte value
        ) => Underlying.Value!.SetJoystickVirtualButton(joystick, button, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualButton(
            Ref<SDL_Joystick> joystick,
            int button,
            [NativeTypeName("Uint8")] byte value
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickVirtualButton(__dsl_joystick, button, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualHat(
            SDL_Joystick* joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        ) => Underlying.Value!.SetJoystickVirtualHat(joystick, hat, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetJoystickVirtualHat(
            Ref<SDL_Joystick> joystick,
            int hat,
            [NativeTypeName("Uint8")] byte value
        )
        {
            fixed (SDL_Joystick* __dsl_joystick = joystick)
            {
                return (int)SetJoystickVirtualHat(__dsl_joystick, hat, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
            void* userdata
        ) => Underlying.Value!.SetLogOutputFunction(callback, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetLogOutputFunction(
            [NativeTypeName("SDL_LogOutputFunction")]
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            {
                SetLogOutputFunction(callback, __dsl_userdata);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetModState")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void SetModState(Keymod modstate) => Underlying.Value!.SetModState(modstate);

        [NativeFunction("SDL3", EntryPoint = "SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("Sint64")] long value
        ) => Underlying.Value!.SetNumberProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetNumberProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetNumberProperty(props, __dsl_name, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPaletteColors(
            Palette* palette,
            [NativeTypeName("const SDL_Color *")] Color* colors,
            int firstcolor,
            int ncolors
        ) => Underlying.Value!.SetPaletteColors(palette, colors, firstcolor, ncolors);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPaletteColors(
            Ref<Palette> palette,
            [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
            int firstcolor,
            int ncolors
        )
        {
            fixed (Color* __dsl_colors = colors)
            fixed (Palette* __dsl_palette = palette)
            {
                return (int)SetPaletteColors(__dsl_palette, __dsl_colors, firstcolor, ncolors);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetPixelFormatPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPixelFormatPalette(PixelFormat* format, Palette* palette) =>
            Underlying.Value!.SetPixelFormatPalette(format, palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPixelFormatPalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPixelFormatPalette(Ref<PixelFormat> format, Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (PixelFormat* __dsl_format = format)
            {
                return (int)SetPixelFormatPalette(__dsl_format, __dsl_palette);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
            Underlying.Value!.SetPrimarySelectionText(text);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPrimarySelectionText([NativeTypeName("const char *")] Ref<sbyte> text)
        {
            fixed (sbyte* __dsl_text = text)
            {
                return (int)SetPrimarySelectionText(__dsl_text);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value
        ) => Underlying.Value!.SetProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value
        )
        {
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetProperty(props, __dsl_name, __dsl_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            void* value,
            [NativeTypeName("void (*)(void *, void *)")]
                delegate* unmanaged<void*, void*, void> cleanup,
            void* userdata
        ) => Underlying.Value!.SetPropertyWithCleanup(props, name, value, cleanup, userdata);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetPropertyWithCleanup")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetPropertyWithCleanup(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            Ref value,
            [NativeTypeName("void (*)(void *, void *)")]
                delegate* unmanaged<void*, void*, void> cleanup,
            Ref userdata
        )
        {
            fixed (void* __dsl_userdata = userdata)
            fixed (void* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetPropertyWithCleanup(
                    props,
                    __dsl_name,
                    __dsl_value,
                    cleanup,
                    __dsl_userdata
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRelativeMouseMode([NativeTypeName("SDL_bool")] int enabled) =>
            Underlying.Value!.SetRelativeMouseMode(enabled);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRelativeMouseMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRelativeMouseMode(
            [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
        ) => Underlying.Value!.SetRelativeMouseMode(enabled);

        [NativeFunction("SDL3", EntryPoint = "SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderClipRect(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetRenderClipRect(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderClipRect(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderClipRect(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderColorScale(SDL_Renderer* renderer, float scale) =>
            Underlying.Value!.SetRenderColorScale(renderer, scale);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderColorScale(Ref<SDL_Renderer> renderer, float scale)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderColorScale(__dsl_renderer, scale);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode blendMode) =>
            Underlying.Value!.SetRenderDrawBlendMode(renderer, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, BlendMode blendMode)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderDrawBlendMode(__dsl_renderer, blendMode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawColor(
            SDL_Renderer* renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        ) => Underlying.Value!.SetRenderDrawColor(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawColor(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b,
            [NativeTypeName("Uint8")] byte a
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderDrawColor(__dsl_renderer, r, g, b, a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawColorFloat(
            SDL_Renderer* renderer,
            float r,
            float g,
            float b,
            float a
        ) => Underlying.Value!.SetRenderDrawColorFloat(renderer, r, g, b, a);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderDrawColorFloat(
            Ref<SDL_Renderer> renderer,
            float r,
            float g,
            float b,
            float a
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderDrawColorFloat(__dsl_renderer, r, g, b, a);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderLogicalPresentation(
            SDL_Renderer* renderer,
            int w,
            int h,
            RendererLogicalPresentation mode,
            ScaleMode scale_mode
        ) => Underlying.Value!.SetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderLogicalPresentation(
            Ref<SDL_Renderer> renderer,
            int w,
            int h,
            RendererLogicalPresentation mode,
            ScaleMode scale_mode
        )
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderLogicalPresentation(__dsl_renderer, w, h, mode, scale_mode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY) =>
            Underlying.Value!.SetRenderScale(renderer, scaleX, scaleY);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderScale(Ref<SDL_Renderer> renderer, float scaleX, float scaleY)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderScale(__dsl_renderer, scaleX, scaleY);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture) =>
            Underlying.Value!.SetRenderTarget(renderer, texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderTarget(Ref<SDL_Renderer> renderer, Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderTarget(__dsl_renderer, __dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderViewport(
            SDL_Renderer* renderer,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetRenderViewport(renderer, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderViewport(
            Ref<SDL_Renderer> renderer,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderViewport(__dsl_renderer, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderVSync(SDL_Renderer* renderer, int vsync) =>
            Underlying.Value!.SetRenderVSync(renderer, vsync);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetRenderVSync(Ref<SDL_Renderer> renderer, int vsync)
        {
            fixed (SDL_Renderer* __dsl_renderer = renderer)
            {
                return (int)SetRenderVSync(__dsl_renderer, vsync);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] sbyte* name,
            [NativeTypeName("const char *")] sbyte* value
        ) => Underlying.Value!.SetStringProperty(props, name, value);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetStringProperty(
            [NativeTypeName("SDL_PropertiesID")] uint props,
            [NativeTypeName("const char *")] Ref<sbyte> name,
            [NativeTypeName("const char *")] Ref<sbyte> value
        )
        {
            fixed (sbyte* __dsl_value = value)
            fixed (sbyte* __dsl_name = name)
            {
                return (int)SetStringProperty(props, __dsl_name, __dsl_value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceAlphaMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte alpha
        ) => Underlying.Value!.SetSurfaceAlphaMod(surface, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceAlphaMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceAlphaMod(__dsl_surface, alpha);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceBlendMode(Surface* surface, BlendMode blendMode) =>
            Underlying.Value!.SetSurfaceBlendMode(surface, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceBlendMode(Ref<Surface> surface, BlendMode blendMode)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceBlendMode(__dsl_surface, blendMode);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceClipRect(
            Surface* surface,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetSurfaceClipRect(surface, rect);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SetSurfaceClipRect(
            Ref<Surface> surface,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<int>)(int)SetSurfaceClipRect(__dsl_surface, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorKey(
            Surface* surface,
            int flag,
            [NativeTypeName("Uint32")] uint key
        ) => Underlying.Value!.SetSurfaceColorKey(surface, flag, key);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorKey(
            Ref<Surface> surface,
            int flag,
            [NativeTypeName("Uint32")] uint key
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceColorKey(__dsl_surface, flag, key);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorMod(
            Surface* surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.SetSurfaceColorMod(surface, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorMod(
            Ref<Surface> surface,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceColorMod(__dsl_surface, r, g, b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
            Underlying.Value!.SetSurfaceColorspace(surface, colorspace);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceColorspace(__dsl_surface, colorspace);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfacePalette(Surface* surface, Palette* palette) =>
            Underlying.Value!.SetSurfacePalette(surface, palette);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette)
        {
            fixed (Palette* __dsl_palette = palette)
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfacePalette(__dsl_surface, __dsl_palette);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceRLE(Surface* surface, int flag) =>
            Underlying.Value!.SetSurfaceRLE(surface, flag);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetSurfaceRLE(Ref<Surface> surface, int flag)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (int)SetSurfaceRLE(__dsl_surface, flag);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextInputRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
            Underlying.Value!.SetTextInputRect(rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
        {
            fixed (Rect* __dsl_rect = rect)
            {
                return (int)SetTextInputRect(__dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureAlphaMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8")] byte alpha
        ) => Underlying.Value!.SetTextureAlphaMod(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureAlphaMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8")] byte alpha
        )
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureAlphaMod(__dsl_texture, alpha);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureAlphaModFloat(SDL_Texture* texture, float alpha) =>
            Underlying.Value!.SetTextureAlphaModFloat(texture, alpha);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureAlphaModFloat(Ref<SDL_Texture> texture, float alpha)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureAlphaModFloat(__dsl_texture, alpha);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureBlendMode(SDL_Texture* texture, BlendMode blendMode) =>
            Underlying.Value!.SetTextureBlendMode(texture, blendMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureBlendMode(Ref<SDL_Texture> texture, BlendMode blendMode)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureBlendMode(__dsl_texture, blendMode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureColorMod(
            SDL_Texture* texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        ) => Underlying.Value!.SetTextureColorMod(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureColorMod(
            Ref<SDL_Texture> texture,
            [NativeTypeName("Uint8")] byte r,
            [NativeTypeName("Uint8")] byte g,
            [NativeTypeName("Uint8")] byte b
        )
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureColorMod(__dsl_texture, r, g, b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureColorModFloat(
            SDL_Texture* texture,
            float r,
            float g,
            float b
        ) => Underlying.Value!.SetTextureColorModFloat(texture, r, g, b);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureColorModFloat(
            Ref<SDL_Texture> texture,
            float r,
            float g,
            float b
        )
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureColorModFloat(__dsl_texture, r, g, b);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureScaleMode(SDL_Texture* texture, ScaleMode scaleMode) =>
            Underlying.Value!.SetTextureScaleMode(texture, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTextureScaleMode(Ref<SDL_Texture> texture, ScaleMode scaleMode)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)SetTextureScaleMode(__dsl_texture, scaleMode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetThreadPriority")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetThreadPriority(ThreadPriority priority) =>
            Underlying.Value!.SetThreadPriority(priority);

        [NativeFunction("SDL3", EntryPoint = "SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTLS(
            [NativeTypeName("SDL_TLSID")] uint id,
            [NativeTypeName("const void *")] void* value,
            [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
        ) => Underlying.Value!.SetTLS(id, value, destructor);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetTLS(
            [NativeTypeName("SDL_TLSID")] uint id,
            [NativeTypeName("const void *")] Ref value,
            [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
        )
        {
            fixed (void* __dsl_value = value)
            {
                return (int)SetTLS(id, __dsl_value, destructor);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowAlwaysOnTop(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int on_top
        ) => Underlying.Value!.SetWindowAlwaysOnTop(window, on_top);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowAlwaysOnTop(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> on_top
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowAlwaysOnTop(__dsl_window, (int)on_top);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowBordered(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int bordered
        ) => Underlying.Value!.SetWindowBordered(window, bordered);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowBordered(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> bordered
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowBordered(__dsl_window, (int)bordered);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFocusable(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int focusable
        ) => Underlying.Value!.SetWindowFocusable(window, focusable);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFocusable(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> focusable
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowFocusable(__dsl_window, (int)focusable);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFullscreen(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int fullscreen
        ) => Underlying.Value!.SetWindowFullscreen(window, fullscreen);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFullscreen(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> fullscreen
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowFullscreen(__dsl_window, (int)fullscreen);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFullscreenMode(
            SDL_Window* window,
            [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
        ) => Underlying.Value!.SetWindowFullscreenMode(window, mode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowFullscreenMode(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
        )
        {
            fixed (DisplayMode* __dsl_mode = mode)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowFullscreenMode(__dsl_window, __dsl_mode);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowHitTest(
            SDL_Window* window,
            [NativeTypeName("SDL_HitTest")]
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
            void* callback_data
        ) => Underlying.Value!.SetWindowHitTest(window, callback, callback_data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowHitTest(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_HitTest")]
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
            Ref callback_data
        )
        {
            fixed (void* __dsl_callback_data = callback_data)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowHitTest(__dsl_window, callback, __dsl_callback_data);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowIcon(SDL_Window* window, Surface* icon) =>
            Underlying.Value!.SetWindowIcon(window, icon);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowIcon(Ref<SDL_Window> window, Ref<Surface> icon)
        {
            fixed (Surface* __dsl_icon = icon)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowIcon(__dsl_window, __dsl_icon);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowInputFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowInputFocus(SDL_Window* window) =>
            Underlying.Value!.SetWindowInputFocus(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowInputFocus")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowInputFocus(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowInputFocus(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowKeyboardGrab(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int grabbed
        ) => Underlying.Value!.SetWindowKeyboardGrab(window, grabbed);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowKeyboardGrab(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowKeyboardGrab(__dsl_window, (int)grabbed);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h) =>
            Underlying.Value!.SetWindowMaximumSize(window, max_w, max_h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMaximumSize(Ref<SDL_Window> window, int max_w, int max_h)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMaximumSize(__dsl_window, max_w, max_h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h) =>
            Underlying.Value!.SetWindowMinimumSize(window, min_w, min_h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMinimumSize(Ref<SDL_Window> window, int min_w, int min_h)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMinimumSize(__dsl_window, min_w, min_h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowModalFor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window) =>
            Underlying.Value!.SetWindowModalFor(modal_window, parent_window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModalFor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowModalFor(
            Ref<SDL_Window> modal_window,
            Ref<SDL_Window> parent_window
        )
        {
            fixed (SDL_Window* __dsl_parent_window = parent_window)
            fixed (SDL_Window* __dsl_modal_window = modal_window)
            {
                return (int)SetWindowModalFor(__dsl_modal_window, __dsl_parent_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMouseGrab(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int grabbed
        ) => Underlying.Value!.SetWindowMouseGrab(window, grabbed);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMouseGrab(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMouseGrab(__dsl_window, (int)grabbed);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMouseRect(
            SDL_Window* window,
            [NativeTypeName("const SDL_Rect *")] Rect* rect
        ) => Underlying.Value!.SetWindowMouseRect(window, rect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowMouseRect(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
        )
        {
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowMouseRect(__dsl_window, __dsl_rect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowOpacity(SDL_Window* window, float opacity) =>
            Underlying.Value!.SetWindowOpacity(window, opacity);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowOpacity(Ref<SDL_Window> window, float opacity)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowOpacity(__dsl_window, opacity);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowPosition(SDL_Window* window, int x, int y) =>
            Underlying.Value!.SetWindowPosition(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowPosition(Ref<SDL_Window> window, int x, int y)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowPosition(__dsl_window, x, y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowResizable(
            SDL_Window* window,
            [NativeTypeName("SDL_bool")] int resizable
        ) => Underlying.Value!.SetWindowResizable(window, resizable);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowResizable(
            Ref<SDL_Window> window,
            [NativeTypeName("SDL_bool")] MaybeBool<int> resizable
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowResizable(__dsl_window, (int)resizable);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowShape(SDL_Window* window, Surface* shape) =>
            Underlying.Value!.SetWindowShape(window, shape);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowShape(Ref<SDL_Window> window, Ref<Surface> shape)
        {
            fixed (Surface* __dsl_shape = shape)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowShape(__dsl_window, __dsl_shape);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowSize(SDL_Window* window, int w, int h) =>
            Underlying.Value!.SetWindowSize(window, w, h);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowSize(Ref<SDL_Window> window, int w, int h)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowSize(__dsl_window, w, h);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowTitle(
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* title
        ) => Underlying.Value!.SetWindowTitle(window, title);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SetWindowTitle(
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> title
        )
        {
            fixed (sbyte* __dsl_title = title)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SetWindowTitle(__dsl_window, __dsl_title);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowCursor")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowCursor() => Underlying.Value!.ShowCursor();

        [NativeFunction("SDL3", EntryPoint = "ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
            int* buttonid
        ) => Underlying.Value!.ShowMessageBox(messageboxdata, buttonid);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowMessageBox(
            [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
            Ref<int> buttonid
        )
        {
            fixed (int* __dsl_buttonid = buttonid)
            fixed (MessageBoxData* __dsl_messageboxdata = messageboxdata)
            {
                return (int)ShowMessageBox(__dsl_messageboxdata, __dsl_buttonid);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("SDL_bool")] int allow_many
        ) =>
            Underlying.Value!.ShowOpenFileDialog(
                callback,
                userdata,
                window,
                filters,
                default_location,
                allow_many
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (SDL_Window* __dsl_window = window)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFileDialog(
                    callback,
                    __dsl_userdata,
                    __dsl_window,
                    __dsl_filters,
                    __dsl_default_location,
                    (int)allow_many
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const char *")] sbyte* default_location,
            [NativeTypeName("SDL_bool")] int allow_many
        ) =>
            Underlying.Value!.ShowOpenFolderDialog(
                callback,
                userdata,
                window,
                default_location,
                allow_many
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowOpenFolderDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const char *")] Ref<sbyte> default_location,
            [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (SDL_Window* __dsl_window = window)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowOpenFolderDialog(
                    callback,
                    __dsl_userdata,
                    __dsl_window,
                    __dsl_default_location,
                    (int)allow_many
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            void* userdata,
            SDL_Window* window,
            [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
            [NativeTypeName("const char *")] sbyte* default_location
        ) =>
            Underlying.Value!.ShowSaveFileDialog(
                callback,
                userdata,
                window,
                filters,
                default_location
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void ShowSaveFileDialog(
            [NativeTypeName("SDL_DialogFileCallback")]
                delegate* unmanaged<void*, sbyte**, int, void> callback,
            Ref userdata,
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
            [NativeTypeName("const char *")] Ref<sbyte> default_location
        )
        {
            fixed (sbyte* __dsl_default_location = default_location)
            fixed (DialogFileFilter* __dsl_filters = filters)
            fixed (SDL_Window* __dsl_window = window)
            fixed (void* __dsl_userdata = userdata)
            {
                ShowSaveFileDialog(
                    callback,
                    __dsl_userdata,
                    __dsl_window,
                    __dsl_filters,
                    __dsl_default_location
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowSimpleMessageBox(
            [NativeTypeName("Uint32")] uint flags,
            [NativeTypeName("const char *")] sbyte* title,
            [NativeTypeName("const char *")] sbyte* message,
            SDL_Window* window
        ) => Underlying.Value!.ShowSimpleMessageBox(flags, title, message, window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowSimpleMessageBox(
            [NativeTypeName("Uint32")] uint flags,
            [NativeTypeName("const char *")] Ref<sbyte> title,
            [NativeTypeName("const char *")] Ref<sbyte> message,
            Ref<SDL_Window> window
        )
        {
            fixed (SDL_Window* __dsl_window = window)
            fixed (sbyte* __dsl_message = message)
            fixed (sbyte* __dsl_title = title)
            {
                return (int)ShowSimpleMessageBox(flags, __dsl_title, __dsl_message, __dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowWindow(SDL_Window* window) => Underlying.Value!.ShowWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)ShowWindow(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowWindowSystemMenu(SDL_Window* window, int x, int y) =>
            Underlying.Value!.ShowWindowSystemMenu(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int ShowWindowSystemMenu(Ref<SDL_Window> window, int x, int y)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)ShowWindowSystemMenu(__dsl_window, x, y);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SignalCondition(SDL_Condition* cond) =>
            Underlying.Value!.SignalCondition(cond);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SignalCondition(Ref<SDL_Condition> cond)
        {
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)SignalCondition(__dsl_cond);
            }
        }

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "SimdGetAlignment")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint SimdGetAlignment() => Underlying.Value!.SimdGetAlignment();

        [NativeFunction("SDL3", EntryPoint = "SoftStretch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SoftStretch(
            Surface* src,
            [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
            Surface* dst,
            [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
            ScaleMode scaleMode
        ) => Underlying.Value!.SoftStretch(src, srcrect, dst, dstrect, scaleMode);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SoftStretch")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SoftStretch(
            Ref<Surface> src,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
            Ref<Surface> dst,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
            ScaleMode scaleMode
        )
        {
            fixed (Rect* __dsl_dstrect = dstrect)
            fixed (Surface* __dsl_dst = dst)
            fixed (Rect* __dsl_srcrect = srcrect)
            fixed (Surface* __dsl_src = src)
            {
                return (int)SoftStretch(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "StartTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void StartTextInput() => Underlying.Value!.StartTextInput();

        [NativeFunction("SDL3", EntryPoint = "StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticEffect(SDL_Haptic* haptic, int effect) =>
            Underlying.Value!.StopHapticEffect(haptic, effect);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticEffect(Ref<SDL_Haptic> haptic, int effect)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)StopHapticEffect(__dsl_haptic, effect);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticEffects(SDL_Haptic* haptic) =>
            Underlying.Value!.StopHapticEffects(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticEffects(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)StopHapticEffects(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticRumble(SDL_Haptic* haptic) =>
            Underlying.Value!.StopHapticRumble(haptic);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StopHapticRumble(Ref<SDL_Haptic> haptic)
        {
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)StopHapticRumble(__dsl_haptic);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "StopTextInput")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void StopTextInput() => Underlying.Value!.StopTextInput();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int StorageReady(SDL_Storage* storage) =>
            Underlying.Value!.StorageReady(storage);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> StorageReady(Ref<SDL_Storage> storage)
        {
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (MaybeBool<int>)(int)StorageReady(__dsl_storage);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SurfaceHasColorKey(Surface* surface) =>
            Underlying.Value!.SurfaceHasColorKey(surface);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SurfaceHasColorKey(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<int>)(int)SurfaceHasColorKey(__dsl_surface);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SurfaceHasRLE(Surface* surface) =>
            Underlying.Value!.SurfaceHasRLE(surface);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> SurfaceHasRLE(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                return (MaybeBool<int>)(int)SurfaceHasRLE(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SyncWindow(SDL_Window* window) => Underlying.Value!.SyncWindow(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int SyncWindow(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)SyncWindow(__dsl_window);
            }
        }

        [return: NativeTypeName("Sint64")]
        [NativeFunction("SDL3", EntryPoint = "TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long TellIO(SDL_IOStream* context) => Underlying.Value!.TellIO(context);

        [return: NativeTypeName("Sint64")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long TellIO(Ref<SDL_IOStream> context)
        {
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (long)TellIO(__dsl_context);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> TextInputActive() => Underlying.Value!.TextInputActive();

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TextInputActiveRaw() => Underlying.Value!.TextInputActiveRaw();

        [return: NativeTypeName("SDL_Time")]
        [NativeFunction("SDL3", EntryPoint = "TimeFromWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static long TimeFromWindows(
            [NativeTypeName("Uint32")] uint dwLowDateTime,
            [NativeTypeName("Uint32")] uint dwHighDateTime
        ) => Underlying.Value!.TimeFromWindows(dwLowDateTime, dwHighDateTime);

        [NativeFunction("SDL3", EntryPoint = "TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            DateTime* dt,
            [NativeTypeName("SDL_bool")] int localTime
        ) => Underlying.Value!.TimeToDateTime(ticks, dt, localTime);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TimeToDateTime(
            [NativeTypeName("SDL_Time")] long ticks,
            Ref<DateTime> dt,
            [NativeTypeName("SDL_bool")] MaybeBool<int> localTime
        )
        {
            fixed (DateTime* __dsl_dt = dt)
            {
                return (int)TimeToDateTime(ticks, __dsl_dt, (int)localTime);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
            [NativeTypeName("Uint32 *")] uint* dwHighDateTime
        ) => Underlying.Value!.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void TimeToWindows(
            [NativeTypeName("SDL_Time")] long ticks,
            [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
            [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
        )
        {
            fixed (uint* __dsl_dwHighDateTime = dwHighDateTime)
            fixed (uint* __dsl_dwLowDateTime = dwLowDateTime)
            {
                TimeToWindows(ticks, __dsl_dwLowDateTime, __dsl_dwHighDateTime);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockMutex(SDL_Mutex* mutex) => Underlying.Value!.TryLockMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                return (int)TryLockMutex(__dsl_mutex);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockRWLockForReading(SDL_RWLock* rwlock) =>
            Underlying.Value!.TryLockRWLockForReading(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockRWLockForReading(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                return (int)TryLockRWLockForReading(__dsl_rwlock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockRWLockForWriting(SDL_RWLock* rwlock) =>
            Underlying.Value!.TryLockRWLockForWriting(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockRWLockForWriting(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                return (int)TryLockRWLockForWriting(__dsl_rwlock);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            Underlying.Value!.TryLockSpinlock(@lock);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> TryLockSpinlock(
            [NativeTypeName("SDL_SpinLock *")] Ref<int> @lock
        )
        {
            fixed (int* __dsl_lock = @lock)
            {
                return (MaybeBool<int>)(int)TryLockSpinlock(__dsl_lock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryWaitSemaphore(SDL_Semaphore* sem) =>
            Underlying.Value!.TryWaitSemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int TryWaitSemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)TryWaitSemaphore(__dsl_sem);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStream(SDL_AudioStream* stream) =>
            Underlying.Value!.UnbindAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                UnbindAudioStream(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStreams(SDL_AudioStream** streams, int num_streams) =>
            Underlying.Value!.UnbindAudioStreams(streams, num_streams);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnbindAudioStreams(Ref2D<SDL_AudioStream> streams, int num_streams)
        {
            fixed (SDL_AudioStream** __dsl_streams = streams)
            {
                UnbindAudioStreams(__dsl_streams, num_streams);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnloadObject(void* handle) => Underlying.Value!.UnloadObject(handle);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnloadObject(Ref handle)
        {
            fixed (void* __dsl_handle = handle)
            {
                UnloadObject(__dsl_handle);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UnlockAudioStream(SDL_AudioStream* stream) =>
            Underlying.Value!.UnlockAudioStream(stream);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UnlockAudioStream(Ref<SDL_AudioStream> stream)
        {
            fixed (SDL_AudioStream* __dsl_stream = stream)
            {
                return (int)UnlockAudioStream(__dsl_stream);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnlockJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockJoysticks() => Underlying.Value!.UnlockJoysticks();

        [NativeFunction("SDL3", EntryPoint = "UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockMutex(SDL_Mutex* mutex) => Underlying.Value!.UnlockMutex(mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockMutex(Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            {
                UnlockMutex(__dsl_mutex);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnlockProperties")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
            Underlying.Value!.UnlockProperties(props);

        [NativeFunction("SDL3", EntryPoint = "UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockRWLock(SDL_RWLock* rwlock) =>
            Underlying.Value!.UnlockRWLock(rwlock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockRWLock(Ref<SDL_RWLock> rwlock)
        {
            fixed (SDL_RWLock* __dsl_rwlock = rwlock)
            {
                UnlockRWLock(__dsl_rwlock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
            Underlying.Value!.UnlockSpinlock(@lock);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
        {
            fixed (int* __dsl_lock = @lock)
            {
                UnlockSpinlock(__dsl_lock);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSurface(Surface* surface) =>
            Underlying.Value!.UnlockSurface(surface);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockSurface(Ref<Surface> surface)
        {
            fixed (Surface* __dsl_surface = surface)
            {
                UnlockSurface(__dsl_surface);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockTexture(SDL_Texture* texture) =>
            Underlying.Value!.UnlockTexture(texture);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UnlockTexture(Ref<SDL_Texture> texture)
        {
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                UnlockTexture(__dsl_texture);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UpdateGamepads")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateGamepads() => Underlying.Value!.UpdateGamepads();

        [NativeFunction("SDL3", EntryPoint = "UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateHapticEffect(
            SDL_Haptic* haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
        ) => Underlying.Value!.UpdateHapticEffect(haptic, effect, data);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateHapticEffect(
            Ref<SDL_Haptic> haptic,
            int effect,
            [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
        )
        {
            fixed (HapticEffect* __dsl_data = data)
            fixed (SDL_Haptic* __dsl_haptic = haptic)
            {
                return (int)UpdateHapticEffect(__dsl_haptic, effect, __dsl_data);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UpdateJoysticks")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateJoysticks() => Underlying.Value!.UpdateJoysticks();

        [NativeFunction("SDL3", EntryPoint = "UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateNVTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* UVplane,
            int UVpitch
        ) => Underlying.Value!.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateNVTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
            int UVpitch
        )
        {
            fixed (byte* __dsl_UVplane = UVplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)UpdateNVTexture(
                    __dsl_texture,
                    __dsl_rect,
                    __dsl_Yplane,
                    Ypitch,
                    __dsl_UVplane,
                    UVpitch
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UpdateSensors")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void UpdateSensors() => Underlying.Value!.UpdateSensors();

        [NativeFunction("SDL3", EntryPoint = "UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const void *")] void* pixels,
            int pitch
        ) => Underlying.Value!.UpdateTexture(texture, rect, pixels, pitch);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const void *")] Ref pixels,
            int pitch
        )
        {
            fixed (void* __dsl_pixels = pixels)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)UpdateTexture(__dsl_texture, __dsl_rect, __dsl_pixels, pitch);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateWindowSurface(SDL_Window* window) =>
            Underlying.Value!.UpdateWindowSurface(window);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateWindowSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)UpdateWindowSurface(__dsl_window);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateWindowSurfaceRects(
            SDL_Window* window,
            [NativeTypeName("const SDL_Rect *")] Rect* rects,
            int numrects
        ) => Underlying.Value!.UpdateWindowSurfaceRects(window, rects, numrects);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateWindowSurfaceRects(
            Ref<SDL_Window> window,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
            int numrects
        )
        {
            fixed (Rect* __dsl_rects = rects)
            fixed (SDL_Window* __dsl_window = window)
            {
                return (int)UpdateWindowSurfaceRects(__dsl_window, __dsl_rects, numrects);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateYUVTexture(
            SDL_Texture* texture,
            [NativeTypeName("const SDL_Rect *")] Rect* rect,
            [NativeTypeName("const Uint8 *")] byte* Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] byte* Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] byte* Vplane,
            int Vpitch
        ) =>
            Underlying.Value!.UpdateYUVTexture(
                texture,
                rect,
                Yplane,
                Ypitch,
                Uplane,
                Upitch,
                Vplane,
                Vpitch
            );

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int UpdateYUVTexture(
            Ref<SDL_Texture> texture,
            [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
            [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
            int Ypitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
            int Upitch,
            [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
            int Vpitch
        )
        {
            fixed (byte* __dsl_Vplane = Vplane)
            fixed (byte* __dsl_Uplane = Uplane)
            fixed (byte* __dsl_Yplane = Yplane)
            fixed (Rect* __dsl_rect = rect)
            fixed (SDL_Texture* __dsl_texture = texture)
            {
                return (int)UpdateYUVTexture(
                    __dsl_texture,
                    __dsl_rect,
                    __dsl_Yplane,
                    Ypitch,
                    __dsl_Uplane,
                    Upitch,
                    __dsl_Vplane,
                    Vpitch
                );
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex) =>
            Underlying.Value!.WaitCondition(cond, mutex);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitCondition(Ref<SDL_Condition> cond, Ref<SDL_Mutex> mutex)
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)WaitCondition(__dsl_cond, __dsl_mutex);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitConditionTimeout(
            SDL_Condition* cond,
            SDL_Mutex* mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitConditionTimeout(cond, mutex, timeoutMS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitConditionTimeout(
            Ref<SDL_Condition> cond,
            Ref<SDL_Mutex> mutex,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (SDL_Mutex* __dsl_mutex = mutex)
            fixed (SDL_Condition* __dsl_cond = cond)
            {
                return (int)WaitConditionTimeout(__dsl_cond, __dsl_mutex, timeoutMS);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitEvent(Event* @event) => Underlying.Value!.WaitEvent(@event);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WaitEvent(Ref<Event> @event)
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<int>)(int)WaitEvent(__dsl_event);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitEventTimeout(
            Event* @event,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitEventTimeout(@event, timeoutMS);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WaitEventTimeout(
            Ref<Event> @event,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (Event* __dsl_event = @event)
            {
                return (MaybeBool<int>)(int)WaitEventTimeout(__dsl_event, timeoutMS);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitSemaphore(SDL_Semaphore* sem) => Underlying.Value!.WaitSemaphore(sem);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitSemaphore(Ref<SDL_Semaphore> sem)
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)WaitSemaphore(__dsl_sem);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitSemaphoreTimeout(
            SDL_Semaphore* sem,
            [NativeTypeName("Sint32")] int timeoutMS
        ) => Underlying.Value!.WaitSemaphoreTimeout(sem, timeoutMS);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WaitSemaphoreTimeout(
            Ref<SDL_Semaphore> sem,
            [NativeTypeName("Sint32")] int timeoutMS
        )
        {
            fixed (SDL_Semaphore* __dsl_sem = sem)
            {
                return (int)WaitSemaphoreTimeout(__dsl_sem, timeoutMS);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitThread(SDL_Thread* thread, int* status) =>
            Underlying.Value!.WaitThread(thread, status);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WaitThread(Ref<SDL_Thread> thread, Ref<int> status)
        {
            fixed (int* __dsl_status = status)
            fixed (SDL_Thread* __dsl_thread = thread)
            {
                WaitThread(__dsl_thread, __dsl_status);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WarpMouseGlobal")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WarpMouseGlobal(float x, float y) =>
            Underlying.Value!.WarpMouseGlobal(x, y);

        [NativeFunction("SDL3", EntryPoint = "WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WarpMouseInWindow(SDL_Window* window, float x, float y) =>
            Underlying.Value!.WarpMouseInWindow(window, x, y);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static void WarpMouseInWindow(Ref<SDL_Window> window, float x, float y)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                WarpMouseInWindow(__dsl_window, x, y);
            }
        }

        [return: NativeTypeName("Uint32")]
        [NativeFunction("SDL3", EntryPoint = "WasInit")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static uint WasInit([NativeTypeName("Uint32")] uint flags) =>
            Underlying.Value!.WasInit(flags);

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WindowHasSurface(SDL_Window* window) =>
            Underlying.Value!.WindowHasSurface(window);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WindowHasSurface(Ref<SDL_Window> window)
        {
            fixed (SDL_Window* __dsl_window = window)
            {
                return (MaybeBool<int>)(int)WindowHasSurface(__dsl_window);
            }
        }

        [return: NativeTypeName("size_t")]
        [NativeFunction("SDL3", EntryPoint = "WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint WriteIO(
            SDL_IOStream* context,
            [NativeTypeName("const void *")] void* ptr,
            [NativeTypeName("size_t")] nuint size
        ) => Underlying.Value!.WriteIO(context, ptr, size);

        [return: NativeTypeName("size_t")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static nuint WriteIO(
            Ref<SDL_IOStream> context,
            [NativeTypeName("const void *")] Ref ptr,
            [NativeTypeName("size_t")] nuint size
        )
        {
            fixed (void* __dsl_ptr = ptr)
            fixed (SDL_IOStream* __dsl_context = context)
            {
                return (nuint)WriteIO(__dsl_context, __dsl_ptr, size);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteS16BE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
            Underlying.Value!.WriteS16BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS16BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint16")] short value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS16BE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteS16LE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
            Underlying.Value!.WriteS16LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS16LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint16")] short value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS16LE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteS32BE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
            Underlying.Value!.WriteS32BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS32BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint32")] int value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS32BE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteS32LE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
            Underlying.Value!.WriteS32LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS32LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint32")] int value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS32LE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteS64BE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
            Underlying.Value!.WriteS64BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS64BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS64BE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteS64LE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
            Underlying.Value!.WriteS64LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteS64LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Sint64")] long value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteS64LE(__dsl_dst, value);
            }
        }

        [NativeFunction("SDL3", EntryPoint = "WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteStorageFile(
            SDL_Storage* storage,
            [NativeTypeName("const char *")] sbyte* path,
            [NativeTypeName("const void *")] void* source,
            [NativeTypeName("Uint64")] ulong length
        ) => Underlying.Value!.WriteStorageFile(storage, path, source, length);

        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteStorageFile(
            Ref<SDL_Storage> storage,
            [NativeTypeName("const char *")] Ref<sbyte> path,
            [NativeTypeName("const void *")] Ref source,
            [NativeTypeName("Uint64")] ulong length
        )
        {
            fixed (void* __dsl_source = source)
            fixed (sbyte* __dsl_path = path)
            fixed (SDL_Storage* __dsl_storage = storage)
            {
                return (int)WriteStorageFile(__dsl_storage, __dsl_path, __dsl_source, length);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU16BE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
            Underlying.Value!.WriteU16BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU16BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint16")] ushort value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU16BE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU16LE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
            Underlying.Value!.WriteU16LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU16LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint16")] ushort value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU16LE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU32BE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
            Underlying.Value!.WriteU32BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU32BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint32")] uint value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU32BE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU32LE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
            Underlying.Value!.WriteU32LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU32LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint32")] uint value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU32LE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU64BE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
            Underlying.Value!.WriteU64BE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU64BE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint64")] ulong value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU64BE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU64LE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
            Underlying.Value!.WriteU64LE(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU64LE(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint64")] ulong value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU64LE(__dsl_dst, value);
            }
        }

        [return: NativeTypeName("SDL_bool")]
        [NativeFunction("SDL3", EntryPoint = "WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static int WriteU8(SDL_IOStream* dst, [NativeTypeName("Uint8")] byte value) =>
            Underlying.Value!.WriteU8(dst, value);

        [return: NativeTypeName("SDL_bool")]
        [Transformed]
        [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
        [MethodImpl(
            MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization
        )]
        public static MaybeBool<int> WriteU8(
            Ref<SDL_IOStream> dst,
            [NativeTypeName("Uint8")] byte value
        )
        {
            fixed (SDL_IOStream* __dsl_dst = dst)
            {
                return (MaybeBool<int>)(int)WriteU8(__dsl_dst, value);
            }
        }
    }

    [NativeTypeName("#define SDL_ASSERT_LEVEL 2")]
    public const int AssertLevel = 2;

    [NativeTypeName("#define SDL_FILE __FILE__")]
    public static ReadOnlySpan<byte> File =>
        "/Users/dylan/Documents/Silk.NET3/eng/silktouch/sdl/SDL3/sdl-SDL.h"u8;

    [NativeTypeName("#define SDL_LINE __LINE__")]
    public const int Line = 7;

    [NativeTypeName("#define SDL_NULL_WHILE_LOOP_CONDITION (0)")]
    public const int NullWhileLoopCondition = (0);

    [NativeTypeName("#define SDL_MUTEX_TIMEDOUT 1")]
    public const int MutexTimedout = 1;

    [NativeTypeName("#define SDL_RWLOCK_TIMEDOUT SDL_MUTEX_TIMEDOUT")]
    public const int RwlockTimedout = 1;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER \"SDL.iostream.windows.handle\""
    )]
    public static ReadOnlySpan<byte> PropIostreamWindowsHandlePointer =>
        "SDL.iostream.windows.handle"u8;

    [NativeTypeName("#define SDL_PROP_IOSTREAM_STDIO_FILE_POINTER \"SDL.iostream.stdio.file\"")]
    public static ReadOnlySpan<byte> PropIostreamStdioFilePointer => "SDL.iostream.stdio.file"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER \"SDL.iostream.android.aasset\""
    )]
    public static ReadOnlySpan<byte> PropIostreamAndroidAassetPointer =>
        "SDL.iostream.android.aasset"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER \"SDL.iostream.dynamic.memory\""
    )]
    public static ReadOnlySpan<byte> PropIostreamDynamicMemoryPointer =>
        "SDL.iostream.dynamic.memory"u8;

    [NativeTypeName(
        "#define SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER \"SDL.iostream.dynamic.chunksize\""
    )]
    public static ReadOnlySpan<byte> PropIostreamDynamicChunksizeNumber =>
        "SDL.iostream.dynamic.chunksize"u8;

    [NativeTypeName("#define SDL_IO_SEEK_SET 0")]
    public const int IoSeekSet = 0;

    [NativeTypeName("#define SDL_IO_SEEK_CUR 1")]
    public const int IoSeekCur = 1;

    [NativeTypeName("#define SDL_IO_SEEK_END 2")]
    public const int IoSeekEnd = 2;

    [NativeTypeName("#define SDL_AUDIO_U8 0x0008")]
    public const int AudioU8 = 0x0008;

    [NativeTypeName("#define SDL_AUDIO_S8 0x8008")]
    public const int AudioS8 = 0x8008;

    [NativeTypeName("#define SDL_AUDIO_S16LE 0x8010")]
    public const int AudioS16Le = 0x8010;

    [NativeTypeName("#define SDL_AUDIO_S16BE 0x9010")]
    public const int AudioS16Be = 0x9010;

    [NativeTypeName("#define SDL_AUDIO_S32LE 0x8020")]
    public const int AudioS32Le = 0x8020;

    [NativeTypeName("#define SDL_AUDIO_S32BE 0x9020")]
    public const int AudioS32Be = 0x9020;

    [NativeTypeName("#define SDL_AUDIO_F32LE 0x8120")]
    public const int AudioF32Le = 0x8120;

    [NativeTypeName("#define SDL_AUDIO_F32BE 0x9120")]
    public const int AudioF32Be = 0x9120;

    [NativeTypeName("#define SDL_AUDIO_S16 SDL_AUDIO_S16LE")]
    public const int AudioS16 = 0x8010;

    [NativeTypeName("#define SDL_AUDIO_S32 SDL_AUDIO_S32LE")]
    public const int AudioS32 = 0x8020;

    [NativeTypeName("#define SDL_AUDIO_F32 SDL_AUDIO_F32LE")]
    public const int AudioF32 = 0x8120;

    [NativeTypeName("#define SDL_AUDIO_MASK_BITSIZE (0xFF)")]
    public const int AudioMaskBitsize = (0xFF);

    [NativeTypeName("#define SDL_AUDIO_MASK_FLOAT (1<<8)")]
    public const int AudioMaskFloat = (1 << 8);

    [NativeTypeName("#define SDL_AUDIO_MASK_BIG_ENDIAN (1<<12)")]
    public const int AudioMaskBigEndian = (1 << 12);

    [NativeTypeName("#define SDL_AUDIO_MASK_SIGNED (1<<15)")]
    public const int AudioMaskSigned = (1 << 15);

    [NativeTypeName("#define SDL_AUDIO_DEVICE_DEFAULT_OUTPUT ((SDL_AudioDeviceID) 0xFFFFFFFF)")]
    public const uint AudioDeviceDefaultOutput = ((uint)(0xFFFFFFFF));

    [NativeTypeName("#define SDL_AUDIO_DEVICE_DEFAULT_CAPTURE ((SDL_AudioDeviceID) 0xFFFFFFFE)")]
    public const uint AudioDeviceDefaultCapture = ((uint)(0xFFFFFFFE));

    [NativeTypeName("#define SDL_MIX_MAXVOLUME 128")]
    public const int MixMaxvolume = 128;

    [NativeTypeName("#define SDL_ALPHA_OPAQUE 255")]
    public const int AlphaOpaque = 255;

    [NativeTypeName("#define SDL_ALPHA_TRANSPARENT 0")]
    public const int AlphaTransparent = 0;

    [NativeTypeName("#define SDL_SWSURFACE 0")]
    public const int Swsurface = 0;

    [NativeTypeName("#define SDL_PREALLOC 0x00000001")]
    public const int Prealloc = 0x00000001;

    [NativeTypeName("#define SDL_RLEACCEL 0x00000002")]
    public const int Rleaccel = 0x00000002;

    [NativeTypeName("#define SDL_DONTFREE 0x00000004")]
    public const int Dontfree = 0x00000004;

    [NativeTypeName("#define SDL_SIMD_ALIGNED 0x00000008")]
    public const int SimdAligned = 0x00000008;

    [NativeTypeName("#define SDL_SURFACE_USES_PROPERTIES 0x00000010")]
    public const int SurfaceUsesProperties = 0x00000010;

    [NativeTypeName("#define SDL_PROP_SURFACE_COLORSPACE_NUMBER \"SDL.surface.colorspace\"")]
    public static ReadOnlySpan<byte> PropSurfaceColorspaceNumber => "SDL.surface.colorspace"u8;

    [NativeTypeName(
        "#define SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT \"SDL.surface.SDR_white_point\""
    )]
    public static ReadOnlySpan<byte> PropSurfaceSdrWhitePointFloat =>
        "SDL.surface.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT \"SDL.surface.HDR_headroom\"")]
    public static ReadOnlySpan<byte> PropSurfaceHdrHeadroomFloat => "SDL.surface.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING \"SDL.surface.tonemap\"")]
    public static ReadOnlySpan<byte> PropSurfaceTonemapOperatorString => "SDL.surface.tonemap"u8;

    [NativeTypeName(
        "#define SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER \"SDL.video.wayland.wl_display\""
    )]
    public static ReadOnlySpan<byte> PropGlobalVideoWaylandWlDisplayPointer =>
        "SDL.video.wayland.wl_display"u8;

    [NativeTypeName("#define SDL_WINDOW_FULLSCREEN 0x00000001U")]
    public const uint WindowFullscreen = 0x00000001U;

    [NativeTypeName("#define SDL_WINDOW_OPENGL 0x00000002U")]
    public const uint WindowOpengl = 0x00000002U;

    [NativeTypeName("#define SDL_WINDOW_OCCLUDED 0x00000004U")]
    public const uint WindowOccluded = 0x00000004U;

    [NativeTypeName("#define SDL_WINDOW_HIDDEN 0x00000008U")]
    public const uint WindowHidden = 0x00000008U;

    [NativeTypeName("#define SDL_WINDOW_BORDERLESS 0x00000010U")]
    public const uint WindowBorderless = 0x00000010U;

    [NativeTypeName("#define SDL_WINDOW_RESIZABLE 0x00000020U")]
    public const uint WindowResizable = 0x00000020U;

    [NativeTypeName("#define SDL_WINDOW_MINIMIZED 0x00000040U")]
    public const uint WindowMinimized = 0x00000040U;

    [NativeTypeName("#define SDL_WINDOW_MAXIMIZED 0x00000080U")]
    public const uint WindowMaximized = 0x00000080U;

    [NativeTypeName("#define SDL_WINDOW_MOUSE_GRABBED 0x00000100U")]
    public const uint WindowMouseGrabbed = 0x00000100U;

    [NativeTypeName("#define SDL_WINDOW_INPUT_FOCUS 0x00000200U")]
    public const uint WindowInputFocus = 0x00000200U;

    [NativeTypeName("#define SDL_WINDOW_MOUSE_FOCUS 0x00000400U")]
    public const uint WindowMouseFocus = 0x00000400U;

    [NativeTypeName("#define SDL_WINDOW_EXTERNAL 0x00000800U")]
    public const uint WindowExternal = 0x00000800U;

    [NativeTypeName("#define SDL_WINDOW_MODAL 0x00001000U")]
    public const uint WindowModal = 0x00001000U;

    [NativeTypeName("#define SDL_WINDOW_HIGH_PIXEL_DENSITY 0x00002000U")]
    public const uint WindowHighPixelDensity = 0x00002000U;

    [NativeTypeName("#define SDL_WINDOW_MOUSE_CAPTURE 0x00004000U")]
    public const uint WindowMouseCapture = 0x00004000U;

    [NativeTypeName("#define SDL_WINDOW_ALWAYS_ON_TOP 0x00008000U")]
    public const uint WindowAlwaysOnTop = 0x00008000U;

    [NativeTypeName("#define SDL_WINDOW_UTILITY 0x00020000U")]
    public const uint WindowUtility = 0x00020000U;

    [NativeTypeName("#define SDL_WINDOW_TOOLTIP 0x00040000U")]
    public const uint WindowTooltip = 0x00040000U;

    [NativeTypeName("#define SDL_WINDOW_POPUP_MENU 0x00080000U")]
    public const uint WindowPopupMenu = 0x00080000U;

    [NativeTypeName("#define SDL_WINDOW_KEYBOARD_GRABBED 0x00100000U")]
    public const uint WindowKeyboardGrabbed = 0x00100000U;

    [NativeTypeName("#define SDL_WINDOW_VULKAN 0x10000000U")]
    public const uint WindowVulkan = 0x10000000U;

    [NativeTypeName("#define SDL_WINDOW_METAL 0x20000000U")]
    public const uint WindowMetal = 0x20000000U;

    [NativeTypeName("#define SDL_WINDOW_TRANSPARENT 0x40000000U")]
    public const uint WindowTransparent = 0x40000000U;

    [NativeTypeName("#define SDL_WINDOW_NOT_FOCUSABLE 0x80000000U")]
    public const uint WindowNotFocusable = 0x80000000U;

    [NativeTypeName("#define SDL_WINDOWPOS_UNDEFINED_MASK 0x1FFF0000u")]
    public const uint WindowposUndefinedMask = 0x1FFF0000U;

    [NativeTypeName("#define SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)")]
    public const uint WindowposUndefined = (0x1FFF0000U | (0));

    [NativeTypeName("#define SDL_WINDOWPOS_CENTERED_MASK 0x2FFF0000u")]
    public const uint WindowposCenteredMask = 0x2FFF0000U;

    [NativeTypeName("#define SDL_WINDOWPOS_CENTERED SDL_WINDOWPOS_CENTERED_DISPLAY(0)")]
    public const uint WindowposCentered = (0x2FFF0000U | (0));

    [NativeTypeName("#define SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN \"SDL.display.HDR_enabled\"")]
    public static ReadOnlySpan<byte> PropDisplayHdrEnabledBoolean => "SDL.display.HDR_enabled"u8;

    [NativeTypeName(
        "#define SDL_PROP_DISPLAY_SDR_WHITE_POINT_FLOAT \"SDL.display.SDR_white_point\""
    )]
    public static ReadOnlySpan<byte> PropDisplaySdrWhitePointFloat =>
        "SDL.display.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_DISPLAY_HDR_HEADROOM_FLOAT \"SDL.display.HDR_headroom\"")]
    public static ReadOnlySpan<byte> PropDisplayHdrHeadroomFloat => "SDL.display.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN \"always_on_top\"")]
    public static ReadOnlySpan<byte> PropWindowCreateAlwaysOnTopBoolean => "always_on_top"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN \"borderless\"")]
    public static ReadOnlySpan<byte> PropWindowCreateBorderlessBoolean => "borderless"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN \"focusable\"")]
    public static ReadOnlySpan<byte> PropWindowCreateFocusableBoolean => "focusable"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN \"external_graphics_context\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateExternalGraphicsContextBoolean =>
        "external_graphics_context"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN \"fullscreen\"")]
    public static ReadOnlySpan<byte> PropWindowCreateFullscreenBoolean => "fullscreen"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER \"height\"")]
    public static ReadOnlySpan<byte> PropWindowCreateHeightNumber => "height"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN \"hidden\"")]
    public static ReadOnlySpan<byte> PropWindowCreateHiddenBoolean => "hidden"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN \"high_pixel_density\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateHighPixelDensityBoolean =>
        "high_pixel_density"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN \"maximized\"")]
    public static ReadOnlySpan<byte> PropWindowCreateMaximizedBoolean => "maximized"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN \"menu\"")]
    public static ReadOnlySpan<byte> PropWindowCreateMenuBoolean => "menu"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN \"metal\"")]
    public static ReadOnlySpan<byte> PropWindowCreateMetalBoolean => "metal"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN \"minimized\"")]
    public static ReadOnlySpan<byte> PropWindowCreateMinimizedBoolean => "minimized"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN \"modal\"")]
    public static ReadOnlySpan<byte> PropWindowCreateModalBoolean => "modal"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN \"mouse_grabbed\"")]
    public static ReadOnlySpan<byte> PropWindowCreateMouseGrabbedBoolean => "mouse_grabbed"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN \"opengl\"")]
    public static ReadOnlySpan<byte> PropWindowCreateOpenglBoolean => "opengl"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_PARENT_POINTER \"parent\"")]
    public static ReadOnlySpan<byte> PropWindowCreateParentPointer => "parent"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN \"resizable\"")]
    public static ReadOnlySpan<byte> PropWindowCreateResizableBoolean => "resizable"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_TITLE_STRING \"title\"")]
    public static ReadOnlySpan<byte> PropWindowCreateTitleString => "title"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN \"transparent\"")]
    public static ReadOnlySpan<byte> PropWindowCreateTransparentBoolean => "transparent"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN \"tooltip\"")]
    public static ReadOnlySpan<byte> PropWindowCreateTooltipBoolean => "tooltip"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN \"utility\"")]
    public static ReadOnlySpan<byte> PropWindowCreateUtilityBoolean => "utility"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN \"vulkan\"")]
    public static ReadOnlySpan<byte> PropWindowCreateVulkanBoolean => "vulkan"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER \"width\"")]
    public static ReadOnlySpan<byte> PropWindowCreateWidthNumber => "width"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_X_NUMBER \"x\"")]
    public static ReadOnlySpan<byte> PropWindowCreateXNumber => "x"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_Y_NUMBER \"y\"")]
    public static ReadOnlySpan<byte> PropWindowCreateYNumber => "y"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER \"cocoa.window\"")]
    public static ReadOnlySpan<byte> PropWindowCreateCocoaWindowPointer => "cocoa.window"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER \"cocoa.view\"")]
    public static ReadOnlySpan<byte> PropWindowCreateCocoaViewPointer => "cocoa.view"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_SCALE_TO_DISPLAY_BOOLEAN \"wayland.scale_to_display\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateWaylandScaleToDisplayBoolean =>
        "wayland.scale_to_display"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN \"wayland.surface_role_custom\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateWaylandSurfaceRoleCustomBoolean =>
        "wayland.surface_role_custom"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN \"wayland.create_egl_window\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateWaylandCreateEglWindowBoolean =>
        "wayland.create_egl_window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER \"wayland.wl_surface\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateWaylandWlSurfacePointer =>
        "wayland.wl_surface"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER \"win32.hwnd\"")]
    public static ReadOnlySpan<byte> PropWindowCreateWin32HwndPointer => "win32.hwnd"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER \"win32.pixel_format_hwnd\""
    )]
    public static ReadOnlySpan<byte> PropWindowCreateWin32PixelFormatHwndPointer =>
        "win32.pixel_format_hwnd"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER \"x11.window\"")]
    public static ReadOnlySpan<byte> PropWindowCreateX11WindowNumber => "x11.window"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_SHAPE_POINTER \"SDL.window.shape\"")]
    public static ReadOnlySpan<byte> PropWindowShapePointer => "SDL.window.shape"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER \"SDL.window.android.window\"")]
    public static ReadOnlySpan<byte> PropWindowAndroidWindowPointer =>
        "SDL.window.android.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER \"SDL.window.android.surface\""
    )]
    public static ReadOnlySpan<byte> PropWindowAndroidSurfacePointer =>
        "SDL.window.android.surface"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER \"SDL.window.uikit.window\"")]
    public static ReadOnlySpan<byte> PropWindowUikitWindowPointer => "SDL.window.uikit.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER \"SDL.window.uikit.metal_view_tag\""
    )]
    public static ReadOnlySpan<byte> PropWindowUikitMetalViewTagNumber =>
        "SDL.window.uikit.metal_view_tag"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER \"SDL.window.kmsdrm.dev_index\""
    )]
    public static ReadOnlySpan<byte> PropWindowKmsdrmDeviceIndexNumber =>
        "SDL.window.kmsdrm.dev_index"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER \"SDL.window.kmsdrm.drm_fd\"")]
    public static ReadOnlySpan<byte> PropWindowKmsdrmDrmFdNumber => "SDL.window.kmsdrm.drm_fd"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER \"SDL.window.kmsdrm.gbm_dev\""
    )]
    public static ReadOnlySpan<byte> PropWindowKmsdrmGbmDevicePointer =>
        "SDL.window.kmsdrm.gbm_dev"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_COCOA_WINDOW_POINTER \"SDL.window.cocoa.window\"")]
    public static ReadOnlySpan<byte> PropWindowCocoaWindowPointer => "SDL.window.cocoa.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER \"SDL.window.cocoa.metal_view_tag\""
    )]
    public static ReadOnlySpan<byte> PropWindowCocoaMetalViewTagNumber =>
        "SDL.window.cocoa.metal_view_tag"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER \"SDL.window.vivante.display\""
    )]
    public static ReadOnlySpan<byte> PropWindowVivanteDisplayPointer =>
        "SDL.window.vivante.display"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER \"SDL.window.vivante.window\"")]
    public static ReadOnlySpan<byte> PropWindowVivanteWindowPointer =>
        "SDL.window.vivante.window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER \"SDL.window.vivante.surface\""
    )]
    public static ReadOnlySpan<byte> PropWindowVivanteSurfacePointer =>
        "SDL.window.vivante.surface"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WINRT_WINDOW_POINTER \"SDL.window.winrt.window\"")]
    public static ReadOnlySpan<byte> PropWindowWinrtWindowPointer => "SDL.window.winrt.window"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WIN32_HWND_POINTER \"SDL.window.win32.hwnd\"")]
    public static ReadOnlySpan<byte> PropWindowWin32HwndPointer => "SDL.window.win32.hwnd"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WIN32_HDC_POINTER \"SDL.window.win32.hdc\"")]
    public static ReadOnlySpan<byte> PropWindowWin32HdcPointer => "SDL.window.win32.hdc"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER \"SDL.window.win32.instance\"")]
    public static ReadOnlySpan<byte> PropWindowWin32InstancePointer =>
        "SDL.window.win32.instance"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER \"SDL.window.wayland.display\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandDisplayPointer =>
        "SDL.window.wayland.display"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER \"SDL.window.wayland.surface\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandSurfacePointer =>
        "SDL.window.wayland.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER \"SDL.window.wayland.egl_window\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandEglWindowPointer =>
        "SDL.window.wayland.egl_window"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER \"SDL.window.wayland.xdg_surface\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandXdgSurfacePointer =>
        "SDL.window.wayland.xdg_surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER \"SDL.window.wayland.xdg_toplevel\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandXdgToplevelPointer =>
        "SDL.window.wayland.xdg_toplevel"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING \"SDL.window.wayland.xdg_toplevel_export_handle\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandXdgToplevelExportHandleString =>
        "SDL.window.wayland.xdg_toplevel_export_handle"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER \"SDL.window.wayland.xdg_popup\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandXdgPopupPointer =>
        "SDL.window.wayland.xdg_popup"u8;

    [NativeTypeName(
        "#define SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER \"SDL.window.wayland.xdg_positioner\""
    )]
    public static ReadOnlySpan<byte> PropWindowWaylandXdgPositionerPointer =>
        "SDL.window.wayland.xdg_positioner"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_X11_DISPLAY_POINTER \"SDL.window.x11.display\"")]
    public static ReadOnlySpan<byte> PropWindowX11DisplayPointer => "SDL.window.x11.display"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_X11_SCREEN_NUMBER \"SDL.window.x11.screen\"")]
    public static ReadOnlySpan<byte> PropWindowX11ScreenNumber => "SDL.window.x11.screen"u8;

    [NativeTypeName("#define SDL_PROP_WINDOW_X11_WINDOW_NUMBER \"SDL.window.x11.window\"")]
    public static ReadOnlySpan<byte> PropWindowX11WindowNumber => "SDL.window.x11.window"u8;

    [NativeTypeName("#define SDL_CACHELINE_SIZE 128")]
    public const int CachelineSize = 128;

    [NativeTypeName("#define SDL_JOYSTICK_AXIS_MAX 32767")]
    public const int JoystickAxisMax = 32767;

    [NativeTypeName("#define SDL_JOYSTICK_AXIS_MIN -32768")]
    public const int JoystickAxisMin = -32768;

    [NativeTypeName("#define SDL_IPHONE_MAX_GFORCE 5.0")]
    public const double IphoneMaxGforce = 5.0;

    [NativeTypeName("#define SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN \"SDL.joystick.cap.mono_led\"")]
    public static ReadOnlySpan<byte> PropJoystickCapMonoLedBoolean => "SDL.joystick.cap.mono_led"u8;

    [NativeTypeName("#define SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN \"SDL.joystick.cap.rgb_led\"")]
    public static ReadOnlySpan<byte> PropJoystickCapRgbLedBoolean => "SDL.joystick.cap.rgb_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN \"SDL.joystick.cap.player_led\""
    )]
    public static ReadOnlySpan<byte> PropJoystickCapPlayerLedBoolean =>
        "SDL.joystick.cap.player_led"u8;

    [NativeTypeName("#define SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN \"SDL.joystick.cap.rumble\"")]
    public static ReadOnlySpan<byte> PropJoystickCapRumbleBoolean => "SDL.joystick.cap.rumble"u8;

    [NativeTypeName(
        "#define SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN \"SDL.joystick.cap.trigger_rumble\""
    )]
    public static ReadOnlySpan<byte> PropJoystickCapTriggerRumbleBoolean =>
        "SDL.joystick.cap.trigger_rumble"u8;

    [NativeTypeName("#define SDL_HAT_CENTERED 0x00")]
    public const int HatCentered = 0x00;

    [NativeTypeName("#define SDL_HAT_UP 0x01")]
    public const int HatUp = 0x01;

    [NativeTypeName("#define SDL_HAT_RIGHT 0x02")]
    public const int HatRight = 0x02;

    [NativeTypeName("#define SDL_HAT_DOWN 0x04")]
    public const int HatDown = 0x04;

    [NativeTypeName("#define SDL_HAT_LEFT 0x08")]
    public const int HatLeft = 0x08;

    [NativeTypeName("#define SDL_HAT_RIGHTUP (SDL_HAT_RIGHT|SDL_HAT_UP)")]
    public const int HatRightup = (0x02 | 0x01);

    [NativeTypeName("#define SDL_HAT_RIGHTDOWN (SDL_HAT_RIGHT|SDL_HAT_DOWN)")]
    public const int HatRightdown = (0x02 | 0x04);

    [NativeTypeName("#define SDL_HAT_LEFTUP (SDL_HAT_LEFT|SDL_HAT_UP)")]
    public const int HatLeftup = (0x08 | 0x01);

    [NativeTypeName("#define SDL_HAT_LEFTDOWN (SDL_HAT_LEFT|SDL_HAT_DOWN)")]
    public const int HatLeftdown = (0x08 | 0x04);

    [NativeTypeName("#define SDL_STANDARD_GRAVITY 9.80665f")]
    public const float StandardGravity = 9.80665f;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN"
    )]
    public static ReadOnlySpan<byte> PropGamepadCapMonoLedBoolean => "SDL.joystick.cap.mono_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN"
    )]
    public static ReadOnlySpan<byte> PropGamepadCapRgbLedBoolean => "SDL.joystick.cap.rgb_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN"
    )]
    public static ReadOnlySpan<byte> PropGamepadCapPlayerLedBoolean =>
        "SDL.joystick.cap.player_led"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN"
    )]
    public static ReadOnlySpan<byte> PropGamepadCapRumbleBoolean => "SDL.joystick.cap.rumble"u8;

    [NativeTypeName(
        "#define SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN"
    )]
    public static ReadOnlySpan<byte> PropGamepadCapTriggerRumbleBoolean =>
        "SDL.joystick.cap.trigger_rumble"u8;

    [NativeTypeName("#define SDLK_SCANCODE_MASK (1<<30)")]
    public const int KScancodeMask = (1 << 30);

    [NativeTypeName("#define SDLK_UNKNOWN 0")]
    public const int KUnknown = 0;

    [NativeTypeName("#define SDLK_RETURN '\r'")]
    public const sbyte KReturn = (sbyte)('\r');

    [NativeTypeName("#define SDLK_ESCAPE '\\x1B'")]
    public const sbyte KEscape = (sbyte)('');

    [NativeTypeName("#define SDLK_BACKSPACE '\\b'")]
    public const sbyte KBackspace = (sbyte)('');

    [NativeTypeName("#define SDLK_TAB '\t'")]
    public const sbyte KTab = (sbyte)('\t');

    [NativeTypeName("#define SDLK_SPACE ' '")]
    public const sbyte KSpace = (sbyte)(' ');

    [NativeTypeName("#define SDLK_EXCLAIM '!'")]
    public const sbyte KExclaim = (sbyte)('!');

    [NativeTypeName("#define SDLK_QUOTEDBL '\"'")]
    public const sbyte KQuotedbl = (sbyte)('"');

    [NativeTypeName("#define SDLK_HASH '#'")]
    public const sbyte KHash = (sbyte)('#');

    [NativeTypeName("#define SDLK_PERCENT '%'")]
    public const sbyte KPercent = (sbyte)('%');

    [NativeTypeName("#define SDLK_DOLLAR '$'")]
    public const sbyte KDollar = (sbyte)('$');

    [NativeTypeName("#define SDLK_AMPERSAND '&'")]
    public const sbyte KAmpersand = (sbyte)('&');

    [NativeTypeName("#define SDLK_QUOTE '\\''")]
    public const sbyte KQuote = (sbyte)('\'');

    [NativeTypeName("#define SDLK_LEFTPAREN '('")]
    public const sbyte KLeftparen = (sbyte)('(');

    [NativeTypeName("#define SDLK_RIGHTPAREN ')'")]
    public const sbyte KRightparen = (sbyte)(')');

    [NativeTypeName("#define SDLK_ASTERISK '*'")]
    public const sbyte KAsterisk = (sbyte)('*');

    [NativeTypeName("#define SDLK_PLUS '+'")]
    public const sbyte KPlus = (sbyte)('+');

    [NativeTypeName("#define SDLK_COMMA ','")]
    public const sbyte KComma = (sbyte)(',');

    [NativeTypeName("#define SDLK_MINUS '-'")]
    public const sbyte KMinus = (sbyte)('-');

    [NativeTypeName("#define SDLK_PERIOD '.'")]
    public const sbyte KPeriod = (sbyte)('.');

    [NativeTypeName("#define SDLK_SLASH '/'")]
    public const sbyte KSlash = (sbyte)('/');

    [NativeTypeName("#define SDLK_0 '0'")]
    public const sbyte K0 = (sbyte)('0');

    [NativeTypeName("#define SDLK_1 '1'")]
    public const sbyte K1 = (sbyte)('1');

    [NativeTypeName("#define SDLK_2 '2'")]
    public const sbyte K2 = (sbyte)('2');

    [NativeTypeName("#define SDLK_3 '3'")]
    public const sbyte K3 = (sbyte)('3');

    [NativeTypeName("#define SDLK_4 '4'")]
    public const sbyte K4 = (sbyte)('4');

    [NativeTypeName("#define SDLK_5 '5'")]
    public const sbyte K5 = (sbyte)('5');

    [NativeTypeName("#define SDLK_6 '6'")]
    public const sbyte K6 = (sbyte)('6');

    [NativeTypeName("#define SDLK_7 '7'")]
    public const sbyte K7 = (sbyte)('7');

    [NativeTypeName("#define SDLK_8 '8'")]
    public const sbyte K8 = (sbyte)('8');

    [NativeTypeName("#define SDLK_9 '9'")]
    public const sbyte K9 = (sbyte)('9');

    [NativeTypeName("#define SDLK_COLON ':'")]
    public const sbyte KColon = (sbyte)(':');

    [NativeTypeName("#define SDLK_SEMICOLON ';'")]
    public const sbyte KSemicolon = (sbyte)(';');

    [NativeTypeName("#define SDLK_LESS '<'")]
    public const sbyte KLess = (sbyte)('<');

    [NativeTypeName("#define SDLK_EQUALS '='")]
    public const sbyte KEquals = (sbyte)('=');

    [NativeTypeName("#define SDLK_GREATER '>'")]
    public const sbyte KGreater = (sbyte)('>');

    [NativeTypeName("#define SDLK_QUESTION '?'")]
    public const sbyte KQuestion = (sbyte)('?');

    [NativeTypeName("#define SDLK_AT '@'")]
    public const sbyte KAt = (sbyte)('@');

    [NativeTypeName("#define SDLK_LEFTBRACKET '['")]
    public const sbyte KLeftbracket = (sbyte)('[');

    [NativeTypeName("#define SDLK_BACKSLASH '\\'")]
    public const sbyte KBackslash = (sbyte)('\\');

    [NativeTypeName("#define SDLK_RIGHTBRACKET ']'")]
    public const sbyte KRightbracket = (sbyte)(']');

    [NativeTypeName("#define SDLK_CARET '^'")]
    public const sbyte KCaret = (sbyte)('^');

    [NativeTypeName("#define SDLK_UNDERSCORE '_'")]
    public const sbyte KUnderscore = (sbyte)('_');

    [NativeTypeName("#define SDLK_BACKQUOTE '`'")]
    public const sbyte KBackquote = (sbyte)('`');

    [NativeTypeName("#define SDLK_a 'a'")]
    public const sbyte Ka = (sbyte)('a');

    [NativeTypeName("#define SDLK_b 'b'")]
    public const sbyte Kb = (sbyte)('b');

    [NativeTypeName("#define SDLK_c 'c'")]
    public const sbyte Kc = (sbyte)('c');

    [NativeTypeName("#define SDLK_d 'd'")]
    public const sbyte Kd = (sbyte)('d');

    [NativeTypeName("#define SDLK_e 'e'")]
    public const sbyte Ke = (sbyte)('e');

    [NativeTypeName("#define SDLK_f 'f'")]
    public const sbyte Kf = (sbyte)('f');

    [NativeTypeName("#define SDLK_g 'g'")]
    public const sbyte Kg = (sbyte)('g');

    [NativeTypeName("#define SDLK_h 'h'")]
    public const sbyte Kh = (sbyte)('h');

    [NativeTypeName("#define SDLK_i 'i'")]
    public const sbyte Ki = (sbyte)('i');

    [NativeTypeName("#define SDLK_j 'j'")]
    public const sbyte Kj = (sbyte)('j');

    [NativeTypeName("#define SDLK_k 'k'")]
    public const sbyte Kk = (sbyte)('k');

    [NativeTypeName("#define SDLK_l 'l'")]
    public const sbyte Kl = (sbyte)('l');

    [NativeTypeName("#define SDLK_m 'm'")]
    public const sbyte Km = (sbyte)('m');

    [NativeTypeName("#define SDLK_n 'n'")]
    public const sbyte Kn = (sbyte)('n');

    [NativeTypeName("#define SDLK_o 'o'")]
    public const sbyte Ko = (sbyte)('o');

    [NativeTypeName("#define SDLK_p 'p'")]
    public const sbyte Kp = (sbyte)('p');

    [NativeTypeName("#define SDLK_q 'q'")]
    public const sbyte Kq = (sbyte)('q');

    [NativeTypeName("#define SDLK_r 'r'")]
    public const sbyte Kr = (sbyte)('r');

    [NativeTypeName("#define SDLK_s 's'")]
    public const sbyte Ks = (sbyte)('s');

    [NativeTypeName("#define SDLK_t 't'")]
    public const sbyte Kt = (sbyte)('t');

    [NativeTypeName("#define SDLK_u 'u'")]
    public const sbyte Ku = (sbyte)('u');

    [NativeTypeName("#define SDLK_v 'v'")]
    public const sbyte Kv = (sbyte)('v');

    [NativeTypeName("#define SDLK_w 'w'")]
    public const sbyte Kw = (sbyte)('w');

    [NativeTypeName("#define SDLK_x 'x'")]
    public const sbyte Kx = (sbyte)('x');

    [NativeTypeName("#define SDLK_y 'y'")]
    public const sbyte Ky = (sbyte)('y');

    [NativeTypeName("#define SDLK_z 'z'")]
    public const sbyte Kz = (sbyte)('z');

    [NativeTypeName("#define SDLK_CAPSLOCK SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK)")]
    public const int KCapslock = ((int)(ScancodeCapslock) | (1 << 30));

    [NativeTypeName("#define SDLK_F1 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1)")]
    public const int KF1 = ((int)(ScancodeF1) | (1 << 30));

    [NativeTypeName("#define SDLK_F2 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2)")]
    public const int KF2 = ((int)(ScancodeF2) | (1 << 30));

    [NativeTypeName("#define SDLK_F3 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3)")]
    public const int KF3 = ((int)(ScancodeF3) | (1 << 30));

    [NativeTypeName("#define SDLK_F4 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4)")]
    public const int KF4 = ((int)(ScancodeF4) | (1 << 30));

    [NativeTypeName("#define SDLK_F5 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5)")]
    public const int KF5 = ((int)(ScancodeF5) | (1 << 30));

    [NativeTypeName("#define SDLK_F6 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6)")]
    public const int KF6 = ((int)(ScancodeF6) | (1 << 30));

    [NativeTypeName("#define SDLK_F7 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7)")]
    public const int KF7 = ((int)(ScancodeF7) | (1 << 30));

    [NativeTypeName("#define SDLK_F8 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8)")]
    public const int KF8 = ((int)(ScancodeF8) | (1 << 30));

    [NativeTypeName("#define SDLK_F9 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9)")]
    public const int KF9 = ((int)(ScancodeF9) | (1 << 30));

    [NativeTypeName("#define SDLK_F10 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10)")]
    public const int KF10 = ((int)(ScancodeF10) | (1 << 30));

    [NativeTypeName("#define SDLK_F11 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11)")]
    public const int KF11 = ((int)(ScancodeF11) | (1 << 30));

    [NativeTypeName("#define SDLK_F12 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12)")]
    public const int KF12 = ((int)(ScancodeF12) | (1 << 30));

    [NativeTypeName("#define SDLK_PRINTSCREEN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN)")]
    public const int KPrintscreen = ((int)(ScancodePrintscreen) | (1 << 30));

    [NativeTypeName("#define SDLK_SCROLLLOCK SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK)")]
    public const int KScrolllock = ((int)(ScancodeScrolllock) | (1 << 30));

    [NativeTypeName("#define SDLK_PAUSE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE)")]
    public const int KPause = ((int)(ScancodePause) | (1 << 30));

    [NativeTypeName("#define SDLK_INSERT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT)")]
    public const int KInsert = ((int)(ScancodeInsert) | (1 << 30));

    [NativeTypeName("#define SDLK_HOME SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME)")]
    public const int KHome = ((int)(ScancodeHome) | (1 << 30));

    [NativeTypeName("#define SDLK_PAGEUP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP)")]
    public const int KPageup = ((int)(ScancodePageup) | (1 << 30));

    [NativeTypeName("#define SDLK_DELETE '\\x7F'")]
    public const sbyte KDelete = (sbyte)('');

    [NativeTypeName("#define SDLK_END SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END)")]
    public const int KEnd = ((int)(ScancodeEnd) | (1 << 30));

    [NativeTypeName("#define SDLK_PAGEDOWN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN)")]
    public const int KPagedown = ((int)(ScancodePagedown) | (1 << 30));

    [NativeTypeName("#define SDLK_RIGHT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT)")]
    public const int KRight = ((int)(ScancodeRight) | (1 << 30));

    [NativeTypeName("#define SDLK_LEFT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT)")]
    public const int KLeft = ((int)(ScancodeLeft) | (1 << 30));

    [NativeTypeName("#define SDLK_DOWN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN)")]
    public const int KDown = ((int)(ScancodeDown) | (1 << 30));

    [NativeTypeName("#define SDLK_UP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP)")]
    public const int KUp = ((int)(ScancodeUp) | (1 << 30));

    [NativeTypeName("#define SDLK_NUMLOCKCLEAR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR)")]
    public const int KNumlockclear = ((int)(ScancodeNumlockclear) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_DIVIDE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE)")]
    public const int KKpDivide = ((int)(ScancodeKpDivide) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MULTIPLY SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY)")]
    public const int KKpMultiply = ((int)(ScancodeKpMultiply) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MINUS SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS)")]
    public const int KKpMinus = ((int)(ScancodeKpMinus) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_PLUS SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS)")]
    public const int KKpPlus = ((int)(ScancodeKpPlus) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_ENTER SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER)")]
    public const int KKpEnter = ((int)(ScancodeKpEnter) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_1 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1)")]
    public const int KKp1 = ((int)(ScancodeKp1) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_2 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2)")]
    public const int KKp2 = ((int)(ScancodeKp2) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_3 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3)")]
    public const int KKp3 = ((int)(ScancodeKp3) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_4 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4)")]
    public const int KKp4 = ((int)(ScancodeKp4) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_5 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5)")]
    public const int KKp5 = ((int)(ScancodeKp5) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_6 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6)")]
    public const int KKp6 = ((int)(ScancodeKp6) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_7 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7)")]
    public const int KKp7 = ((int)(ScancodeKp7) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_8 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8)")]
    public const int KKp8 = ((int)(ScancodeKp8) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_9 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9)")]
    public const int KKp9 = ((int)(ScancodeKp9) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_0 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0)")]
    public const int KKp0 = ((int)(ScancodeKp0) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_PERIOD SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD)")]
    public const int KKpPeriod = ((int)(ScancodeKpPeriod) | (1 << 30));

    [NativeTypeName("#define SDLK_APPLICATION SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION)")]
    public const int KApplication = ((int)(ScancodeApplication) | (1 << 30));

    [NativeTypeName("#define SDLK_POWER SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER)")]
    public const int KPower = ((int)(ScancodePower) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_EQUALS SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS)")]
    public const int KKpEquals = ((int)(ScancodeKpEquals) | (1 << 30));

    [NativeTypeName("#define SDLK_F13 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13)")]
    public const int KF13 = ((int)(ScancodeF13) | (1 << 30));

    [NativeTypeName("#define SDLK_F14 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14)")]
    public const int KF14 = ((int)(ScancodeF14) | (1 << 30));

    [NativeTypeName("#define SDLK_F15 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15)")]
    public const int KF15 = ((int)(ScancodeF15) | (1 << 30));

    [NativeTypeName("#define SDLK_F16 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16)")]
    public const int KF16 = ((int)(ScancodeF16) | (1 << 30));

    [NativeTypeName("#define SDLK_F17 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17)")]
    public const int KF17 = ((int)(ScancodeF17) | (1 << 30));

    [NativeTypeName("#define SDLK_F18 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18)")]
    public const int KF18 = ((int)(ScancodeF18) | (1 << 30));

    [NativeTypeName("#define SDLK_F19 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19)")]
    public const int KF19 = ((int)(ScancodeF19) | (1 << 30));

    [NativeTypeName("#define SDLK_F20 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20)")]
    public const int KF20 = ((int)(ScancodeF20) | (1 << 30));

    [NativeTypeName("#define SDLK_F21 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21)")]
    public const int KF21 = ((int)(ScancodeF21) | (1 << 30));

    [NativeTypeName("#define SDLK_F22 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22)")]
    public const int KF22 = ((int)(ScancodeF22) | (1 << 30));

    [NativeTypeName("#define SDLK_F23 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23)")]
    public const int KF23 = ((int)(ScancodeF23) | (1 << 30));

    [NativeTypeName("#define SDLK_F24 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24)")]
    public const int KF24 = ((int)(ScancodeF24) | (1 << 30));

    [NativeTypeName("#define SDLK_EXECUTE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE)")]
    public const int KExecute = ((int)(ScancodeExecute) | (1 << 30));

    [NativeTypeName("#define SDLK_HELP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP)")]
    public const int KHelp = ((int)(ScancodeHelp) | (1 << 30));

    [NativeTypeName("#define SDLK_MENU SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU)")]
    public const int KMenu = ((int)(ScancodeMenu) | (1 << 30));

    [NativeTypeName("#define SDLK_SELECT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT)")]
    public const int KSelect = ((int)(ScancodeSelect) | (1 << 30));

    [NativeTypeName("#define SDLK_STOP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP)")]
    public const int KStop = ((int)(ScancodeStop) | (1 << 30));

    [NativeTypeName("#define SDLK_AGAIN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN)")]
    public const int KAgain = ((int)(ScancodeAgain) | (1 << 30));

    [NativeTypeName("#define SDLK_UNDO SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO)")]
    public const int KUndo = ((int)(ScancodeUndo) | (1 << 30));

    [NativeTypeName("#define SDLK_CUT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT)")]
    public const int KCut = ((int)(ScancodeCut) | (1 << 30));

    [NativeTypeName("#define SDLK_COPY SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY)")]
    public const int KCopy = ((int)(ScancodeCopy) | (1 << 30));

    [NativeTypeName("#define SDLK_PASTE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE)")]
    public const int KPaste = ((int)(ScancodePaste) | (1 << 30));

    [NativeTypeName("#define SDLK_FIND SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND)")]
    public const int KFind = ((int)(ScancodeFind) | (1 << 30));

    [NativeTypeName("#define SDLK_MUTE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE)")]
    public const int KMute = ((int)(ScancodeMute) | (1 << 30));

    [NativeTypeName("#define SDLK_VOLUMEUP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP)")]
    public const int KVolumeup = ((int)(ScancodeVolumeup) | (1 << 30));

    [NativeTypeName("#define SDLK_VOLUMEDOWN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN)")]
    public const int KVolumedown = ((int)(ScancodeVolumedown) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_COMMA SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA)")]
    public const int KKpComma = ((int)(ScancodeKpComma) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_EQUALSAS400 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400)"
    )]
    public const int KKpEqualsas400 = ((int)(ScancodeKpEqualsas400) | (1 << 30));

    [NativeTypeName("#define SDLK_ALTERASE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE)")]
    public const int KAlterase = ((int)(ScancodeAlterase) | (1 << 30));

    [NativeTypeName("#define SDLK_SYSREQ SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ)")]
    public const int KSysreq = ((int)(ScancodeSysreq) | (1 << 30));

    [NativeTypeName("#define SDLK_CANCEL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL)")]
    public const int KCancel = ((int)(ScancodeCancel) | (1 << 30));

    [NativeTypeName("#define SDLK_CLEAR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR)")]
    public const int KClear = ((int)(ScancodeClear) | (1 << 30));

    [NativeTypeName("#define SDLK_PRIOR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR)")]
    public const int KPrior = ((int)(ScancodePrior) | (1 << 30));

    [NativeTypeName("#define SDLK_RETURN2 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2)")]
    public const int KReturn2 = ((int)(ScancodeReturn2) | (1 << 30));

    [NativeTypeName("#define SDLK_SEPARATOR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR)")]
    public const int KSeparator = ((int)(ScancodeSeparator) | (1 << 30));

    [NativeTypeName("#define SDLK_OUT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT)")]
    public const int KOut = ((int)(ScancodeOut) | (1 << 30));

    [NativeTypeName("#define SDLK_OPER SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER)")]
    public const int KOper = ((int)(ScancodeOper) | (1 << 30));

    [NativeTypeName("#define SDLK_CLEARAGAIN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN)")]
    public const int KClearagain = ((int)(ScancodeClearagain) | (1 << 30));

    [NativeTypeName("#define SDLK_CRSEL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL)")]
    public const int KCrsel = ((int)(ScancodeCrsel) | (1 << 30));

    [NativeTypeName("#define SDLK_EXSEL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL)")]
    public const int KExsel = ((int)(ScancodeExsel) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_00 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00)")]
    public const int KKp00 = ((int)(ScancodeKp00) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_000 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000)")]
    public const int KKp000 = ((int)(ScancodeKp000) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_THOUSANDSSEPARATOR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR)"
    )]
    public const int KThousandsseparator = ((int)(ScancodeThousandsseparator) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_DECIMALSEPARATOR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR)"
    )]
    public const int KDecimalseparator = ((int)(ScancodeDecimalseparator) | (1 << 30));

    [NativeTypeName("#define SDLK_CURRENCYUNIT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT)")]
    public const int KCurrencyunit = ((int)(ScancodeCurrencyunit) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_CURRENCYSUBUNIT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT)"
    )]
    public const int KCurrencysubunit = ((int)(ScancodeCurrencysubunit) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_LEFTPAREN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN)")]
    public const int KKpLeftparen = ((int)(ScancodeKpLeftparen) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_RIGHTPAREN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN)"
    )]
    public const int KKpRightparen = ((int)(ScancodeKpRightparen) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_LEFTBRACE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE)")]
    public const int KKpLeftbrace = ((int)(ScancodeKpLeftbrace) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_RIGHTBRACE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE)"
    )]
    public const int KKpRightbrace = ((int)(ScancodeKpRightbrace) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_TAB SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB)")]
    public const int KKpTab = ((int)(ScancodeKpTab) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_BACKSPACE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE)")]
    public const int KKpBackspace = ((int)(ScancodeKpBackspace) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_A SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A)")]
    public const int KKpA = ((int)(ScancodeKpA) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_B SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B)")]
    public const int KKpB = ((int)(ScancodeKpB) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_C SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C)")]
    public const int KKpC = ((int)(ScancodeKpC) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_D SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D)")]
    public const int KKpD = ((int)(ScancodeKpD) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_E SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E)")]
    public const int KKpE = ((int)(ScancodeKpE) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_F SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F)")]
    public const int KKpF = ((int)(ScancodeKpF) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_XOR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR)")]
    public const int KKpXor = ((int)(ScancodeKpXor) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_POWER SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER)")]
    public const int KKpPower = ((int)(ScancodeKpPower) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_PERCENT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT)")]
    public const int KKpPercent = ((int)(ScancodeKpPercent) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_LESS SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS)")]
    public const int KKpLess = ((int)(ScancodeKpLess) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_GREATER SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER)")]
    public const int KKpGreater = ((int)(ScancodeKpGreater) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_AMPERSAND SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND)")]
    public const int KKpAmpersand = ((int)(ScancodeKpAmpersand) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_DBLAMPERSAND SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND)"
    )]
    public const int KKpDblampersand = ((int)(ScancodeKpDblampersand) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_VERTICALBAR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR)"
    )]
    public const int KKpVerticalbar = ((int)(ScancodeKpVerticalbar) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_DBLVERTICALBAR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR)"
    )]
    public const int KKpDblverticalbar = ((int)(ScancodeKpDblverticalbar) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_COLON SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON)")]
    public const int KKpColon = ((int)(ScancodeKpColon) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_HASH SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH)")]
    public const int KKpHash = ((int)(ScancodeKpHash) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_SPACE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE)")]
    public const int KKpSpace = ((int)(ScancodeKpSpace) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_AT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT)")]
    public const int KKpAt = ((int)(ScancodeKpAt) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_EXCLAM SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM)")]
    public const int KKpExclam = ((int)(ScancodeKpExclam) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MEMSTORE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE)")]
    public const int KKpMemstore = ((int)(ScancodeKpMemstore) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MEMRECALL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL)")]
    public const int KKpMemrecall = ((int)(ScancodeKpMemrecall) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MEMCLEAR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR)")]
    public const int KKpMemclear = ((int)(ScancodeKpMemclear) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MEMADD SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD)")]
    public const int KKpMemadd = ((int)(ScancodeKpMemadd) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_MEMSUBTRACT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT)"
    )]
    public const int KKpMemsubtract = ((int)(ScancodeKpMemsubtract) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_MEMMULTIPLY SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY)"
    )]
    public const int KKpMemmultiply = ((int)(ScancodeKpMemmultiply) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_MEMDIVIDE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE)")]
    public const int KKpMemdivide = ((int)(ScancodeKpMemdivide) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_PLUSMINUS SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS)")]
    public const int KKpPlusminus = ((int)(ScancodeKpPlusminus) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_CLEAR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR)")]
    public const int KKpClear = ((int)(ScancodeKpClear) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_CLEARENTRY SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY)"
    )]
    public const int KKpClearentry = ((int)(ScancodeKpClearentry) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_BINARY SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY)")]
    public const int KKpBinary = ((int)(ScancodeKpBinary) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_OCTAL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL)")]
    public const int KKpOctal = ((int)(ScancodeKpOctal) | (1 << 30));

    [NativeTypeName("#define SDLK_KP_DECIMAL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL)")]
    public const int KKpDecimal = ((int)(ScancodeKpDecimal) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KP_HEXADECIMAL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL)"
    )]
    public const int KKpHexadecimal = ((int)(ScancodeKpHexadecimal) | (1 << 30));

    [NativeTypeName("#define SDLK_LCTRL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL)")]
    public const int KLctrl = ((int)(ScancodeLctrl) | (1 << 30));

    [NativeTypeName("#define SDLK_LSHIFT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT)")]
    public const int KLshift = ((int)(ScancodeLshift) | (1 << 30));

    [NativeTypeName("#define SDLK_LALT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT)")]
    public const int KLalt = ((int)(ScancodeLalt) | (1 << 30));

    [NativeTypeName("#define SDLK_LGUI SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI)")]
    public const int KLgui = ((int)(ScancodeLgui) | (1 << 30));

    [NativeTypeName("#define SDLK_RCTRL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL)")]
    public const int KRctrl = ((int)(ScancodeRctrl) | (1 << 30));

    [NativeTypeName("#define SDLK_RSHIFT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT)")]
    public const int KRshift = ((int)(ScancodeRshift) | (1 << 30));

    [NativeTypeName("#define SDLK_RALT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT)")]
    public const int KRalt = ((int)(ScancodeRalt) | (1 << 30));

    [NativeTypeName("#define SDLK_RGUI SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI)")]
    public const int KRgui = ((int)(ScancodeRgui) | (1 << 30));

    [NativeTypeName("#define SDLK_MODE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE)")]
    public const int KMode = ((int)(ScancodeMode) | (1 << 30));

    [NativeTypeName("#define SDLK_AUDIONEXT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT)")]
    public const int KAudionext = ((int)(ScancodeAudionext) | (1 << 30));

    [NativeTypeName("#define SDLK_AUDIOPREV SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV)")]
    public const int KAudioprev = ((int)(ScancodeAudioprev) | (1 << 30));

    [NativeTypeName("#define SDLK_AUDIOSTOP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP)")]
    public const int KAudiostop = ((int)(ScancodeAudiostop) | (1 << 30));

    [NativeTypeName("#define SDLK_AUDIOPLAY SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY)")]
    public const int KAudioplay = ((int)(ScancodeAudioplay) | (1 << 30));

    [NativeTypeName("#define SDLK_AUDIOMUTE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE)")]
    public const int KAudiomute = ((int)(ScancodeAudiomute) | (1 << 30));

    [NativeTypeName("#define SDLK_MEDIASELECT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT)")]
    public const int KMediaselect = ((int)(ScancodeMediaselect) | (1 << 30));

    [NativeTypeName("#define SDLK_WWW SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW)")]
    public const int KWww = ((int)(ScancodeWww) | (1 << 30));

    [NativeTypeName("#define SDLK_MAIL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL)")]
    public const int KMail = ((int)(ScancodeMail) | (1 << 30));

    [NativeTypeName("#define SDLK_CALCULATOR SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR)")]
    public const int KCalculator = ((int)(ScancodeCalculator) | (1 << 30));

    [NativeTypeName("#define SDLK_COMPUTER SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER)")]
    public const int KComputer = ((int)(ScancodeComputer) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_SEARCH SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH)")]
    public const int KAcSearch = ((int)(ScancodeAcSearch) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_HOME SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME)")]
    public const int KAcHome = ((int)(ScancodeAcHome) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_BACK SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK)")]
    public const int KAcBack = ((int)(ScancodeAcBack) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_FORWARD SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD)")]
    public const int KAcForward = ((int)(ScancodeAcForward) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_STOP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP)")]
    public const int KAcStop = ((int)(ScancodeAcStop) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_REFRESH SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH)")]
    public const int KAcRefresh = ((int)(ScancodeAcRefresh) | (1 << 30));

    [NativeTypeName("#define SDLK_AC_BOOKMARKS SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS)")]
    public const int KAcBookmarks = ((int)(ScancodeAcBookmarks) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_BRIGHTNESSDOWN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN)"
    )]
    public const int KBrightnessdown = ((int)(ScancodeBrightnessdown) | (1 << 30));

    [NativeTypeName("#define SDLK_BRIGHTNESSUP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP)")]
    public const int KBrightnessup = ((int)(ScancodeBrightnessup) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_DISPLAYSWITCH SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH)"
    )]
    public const int KDisplayswitch = ((int)(ScancodeDisplayswitch) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_KBDILLUMTOGGLE SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE)"
    )]
    public const int KKbdillumtoggle = ((int)(ScancodeKbdillumtoggle) | (1 << 30));

    [NativeTypeName("#define SDLK_KBDILLUMDOWN SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN)")]
    public const int KKbdillumdown = ((int)(ScancodeKbdillumdown) | (1 << 30));

    [NativeTypeName("#define SDLK_KBDILLUMUP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP)")]
    public const int KKbdillumup = ((int)(ScancodeKbdillumup) | (1 << 30));

    [NativeTypeName("#define SDLK_EJECT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT)")]
    public const int KEject = ((int)(ScancodeEject) | (1 << 30));

    [NativeTypeName("#define SDLK_SLEEP SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP)")]
    public const int KSleep = ((int)(ScancodeSleep) | (1 << 30));

    [NativeTypeName("#define SDLK_APP1 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APP1)")]
    public const int KApp1 = ((int)(ScancodeApp1) | (1 << 30));

    [NativeTypeName("#define SDLK_APP2 SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APP2)")]
    public const int KApp2 = ((int)(ScancodeApp2) | (1 << 30));

    [NativeTypeName("#define SDLK_AUDIOREWIND SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOREWIND)")]
    public const int KAudiorewind = ((int)(ScancodeAudiorewind) | (1 << 30));

    [NativeTypeName(
        "#define SDLK_AUDIOFASTFORWARD SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOFASTFORWARD)"
    )]
    public const int KAudiofastforward = ((int)(ScancodeAudiofastforward) | (1 << 30));

    [NativeTypeName("#define SDLK_SOFTLEFT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTLEFT)")]
    public const int KSoftleft = ((int)(ScancodeSoftleft) | (1 << 30));

    [NativeTypeName("#define SDLK_SOFTRIGHT SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTRIGHT)")]
    public const int KSoftright = ((int)(ScancodeSoftright) | (1 << 30));

    [NativeTypeName("#define SDLK_CALL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALL)")]
    public const int KCall = ((int)(ScancodeCall) | (1 << 30));

    [NativeTypeName("#define SDLK_ENDCALL SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ENDCALL)")]
    public const int KEndcall = ((int)(ScancodeEndcall) | (1 << 30));

    [NativeTypeName("#define SDL_BUTTON_LEFT 1")]
    public const int ButtonLeft = 1;

    [NativeTypeName("#define SDL_BUTTON_MIDDLE 2")]
    public const int ButtonMiddle = 2;

    [NativeTypeName("#define SDL_BUTTON_RIGHT 3")]
    public const int ButtonRight = 3;

    [NativeTypeName("#define SDL_BUTTON_X1 4")]
    public const int ButtonX1 = 4;

    [NativeTypeName("#define SDL_BUTTON_X2 5")]
    public const int ButtonX2 = 5;

    [NativeTypeName("#define SDL_BUTTON_LMASK SDL_BUTTON(SDL_BUTTON_LEFT)")]
    public const int ButtonLmask = (1 << ((1) - 1));

    [NativeTypeName("#define SDL_BUTTON_MMASK SDL_BUTTON(SDL_BUTTON_MIDDLE)")]
    public const int ButtonMmask = (1 << ((2) - 1));

    [NativeTypeName("#define SDL_BUTTON_RMASK SDL_BUTTON(SDL_BUTTON_RIGHT)")]
    public const int ButtonRmask = (1 << ((3) - 1));

    [NativeTypeName("#define SDL_BUTTON_X1MASK SDL_BUTTON(SDL_BUTTON_X1)")]
    public const int ButtonX1Mask = (1 << ((4) - 1));

    [NativeTypeName("#define SDL_BUTTON_X2MASK SDL_BUTTON(SDL_BUTTON_X2)")]
    public const int ButtonX2Mask = (1 << ((5) - 1));

    [NativeTypeName("#define SDL_PEN_INVALID ((SDL_PenID)0)")]
    public const uint PenInvalid = ((uint)(0));

    [NativeTypeName("#define SDL_PEN_MOUSEID ((SDL_MouseID)-2)")]
    public const uint PenMouseid = unchecked((uint)(-2));

    [NativeTypeName("#define SDL_PEN_INFO_UNKNOWN (-1)")]
    public const int PenInfoUnknown = (-1);

    [NativeTypeName("#define SDL_PEN_FLAG_DOWN_BIT_INDEX 13")]
    public const int PenFlagDownBitIndex = 13;

    [NativeTypeName("#define SDL_PEN_FLAG_INK_BIT_INDEX 14")]
    public const int PenFlagInkBitIndex = 14;

    [NativeTypeName("#define SDL_PEN_FLAG_ERASER_BIT_INDEX 15")]
    public const int PenFlagEraserBitIndex = 15;

    [NativeTypeName("#define SDL_PEN_FLAG_AXIS_BIT_OFFSET 16")]
    public const int PenFlagAxisBitOffset = 16;

    [NativeTypeName("#define SDL_PEN_TIP_INK SDL_PEN_FLAG_INK_BIT_INDEX")]
    public const int PenTipInk = 14;

    [NativeTypeName("#define SDL_PEN_TIP_ERASER SDL_PEN_FLAG_ERASER_BIT_INDEX")]
    public const int PenTipEraser = 15;

    [NativeTypeName("#define SDL_PEN_DOWN_MASK SDL_PEN_CAPABILITY(SDL_PEN_FLAG_DOWN_BIT_INDEX)")]
    public const nuint PenDownMask = (1U << (13));

    [NativeTypeName("#define SDL_PEN_INK_MASK SDL_PEN_CAPABILITY(SDL_PEN_FLAG_INK_BIT_INDEX)")]
    public const nuint PenInkMask = (1U << (14));

    [NativeTypeName(
        "#define SDL_PEN_ERASER_MASK SDL_PEN_CAPABILITY(SDL_PEN_FLAG_ERASER_BIT_INDEX)"
    )]
    public const nuint PenEraserMask = (1U << (15));

    [NativeTypeName(
        "#define SDL_PEN_AXIS_PRESSURE_MASK SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_PRESSURE)"
    )]
    public const nuint PenAxisPressureMask = (1U << ((int)(AxisPressure) + 16));

    [NativeTypeName("#define SDL_PEN_AXIS_XTILT_MASK SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_XTILT)")]
    public const nuint PenAxisXtiltMask = (1U << ((int)(AxisXtilt) + 16));

    [NativeTypeName("#define SDL_PEN_AXIS_YTILT_MASK SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_YTILT)")]
    public const nuint PenAxisYtiltMask = (1U << ((int)(AxisYtilt) + 16));

    [NativeTypeName(
        "#define SDL_PEN_AXIS_DISTANCE_MASK SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_DISTANCE)"
    )]
    public const nuint PenAxisDistanceMask = (1U << ((int)(AxisDistance) + 16));

    [NativeTypeName(
        "#define SDL_PEN_AXIS_ROTATION_MASK SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_ROTATION)"
    )]
    public const nuint PenAxisRotationMask = (1U << ((int)(AxisRotation) + 16));

    [NativeTypeName(
        "#define SDL_PEN_AXIS_SLIDER_MASK SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_SLIDER)"
    )]
    public const nuint PenAxisSliderMask = (1U << ((int)(AxisSlider) + 16));

    [NativeTypeName(
        "#define SDL_PEN_AXIS_BIDIRECTIONAL_MASKS (SDL_PEN_AXIS_XTILT_MASK | SDL_PEN_AXIS_YTILT_MASK)"
    )]
    public const nuint PenAxisBidirectionalMasks = (
        (1U << ((int)(AxisXtilt) + 16)) | (1U << ((int)(AxisYtilt) + 16))
    );

    [NativeTypeName("#define SDL_TOUCH_MOUSEID ((SDL_MouseID)-1)")]
    public const uint TouchMouseid = unchecked((uint)(-1));

    [NativeTypeName("#define SDL_MOUSE_TOUCHID ((SDL_TouchID)-1)")]
    public const ulong MouseTouchid = unchecked((ulong)(-1));

    [NativeTypeName("#define SDL_RELEASED 0")]
    public const int Released = 0;

    [NativeTypeName("#define SDL_PRESSED 1")]
    public const int Pressed = 1;

    [NativeTypeName("#define SDL_TEXTEDITINGEVENT_TEXT_SIZE 64")]
    public const int TexteditingeventTextSize = 64;

    [NativeTypeName("#define SDL_DROPEVENT_DATA_SIZE 64")]
    public const int DropeventDataSize = 64;

    [NativeTypeName("#define SDL_GLOB_CASEINSENSITIVE (1 << 0)")]
    public const int GlobCaseinsensitive = (1 << 0);

    [NativeTypeName("#define SDL_HAPTIC_CONSTANT (1u<<0)")]
    public const uint HapticConstant = (1U << 0);

    [NativeTypeName("#define SDL_HAPTIC_SINE (1u<<1)")]
    public const uint HapticSine = (1U << 1);

    [NativeTypeName("#define SDL_HAPTIC_SQUARE (1<<2)")]
    public const int HapticSquare = (1 << 2);

    [NativeTypeName("#define SDL_HAPTIC_TRIANGLE (1u<<3)")]
    public const uint HapticTriangle = (1U << 3);

    [NativeTypeName("#define SDL_HAPTIC_SAWTOOTHUP (1u<<4)")]
    public const uint HapticSawtoothup = (1U << 4);

    [NativeTypeName("#define SDL_HAPTIC_SAWTOOTHDOWN (1u<<5)")]
    public const uint HapticSawtoothdown = (1U << 5);

    [NativeTypeName("#define SDL_HAPTIC_RAMP (1u<<6)")]
    public const uint HapticRamp = (1U << 6);

    [NativeTypeName("#define SDL_HAPTIC_SPRING (1u<<7)")]
    public const uint HapticSpring = (1U << 7);

    [NativeTypeName("#define SDL_HAPTIC_DAMPER (1u<<8)")]
    public const uint HapticDamper = (1U << 8);

    [NativeTypeName("#define SDL_HAPTIC_INERTIA (1u<<9)")]
    public const uint HapticInertia = (1U << 9);

    [NativeTypeName("#define SDL_HAPTIC_FRICTION (1u<<10)")]
    public const uint HapticFriction = (1U << 10);

    [NativeTypeName("#define SDL_HAPTIC_LEFTRIGHT (1u<<11)")]
    public const uint HapticLeftright = (1U << 11);

    [NativeTypeName("#define SDL_HAPTIC_RESERVED1 (1u<<12)")]
    public const uint HapticReserved1 = (1U << 12);

    [NativeTypeName("#define SDL_HAPTIC_RESERVED2 (1u<<13)")]
    public const uint HapticReserved2 = (1U << 13);

    [NativeTypeName("#define SDL_HAPTIC_RESERVED3 (1u<<14)")]
    public const uint HapticReserved3 = (1U << 14);

    [NativeTypeName("#define SDL_HAPTIC_CUSTOM (1u<<15)")]
    public const uint HapticCustom = (1U << 15);

    [NativeTypeName("#define SDL_HAPTIC_GAIN (1u<<16)")]
    public const uint HapticGain = (1U << 16);

    [NativeTypeName("#define SDL_HAPTIC_AUTOCENTER (1u<<17)")]
    public const uint HapticAutocenter = (1U << 17);

    [NativeTypeName("#define SDL_HAPTIC_STATUS (1u<<18)")]
    public const uint HapticStatus = (1U << 18);

    [NativeTypeName("#define SDL_HAPTIC_PAUSE (1u<<19)")]
    public const uint HapticPause = (1U << 19);

    [NativeTypeName("#define SDL_HAPTIC_POLAR 0")]
    public const int HapticPolar = 0;

    [NativeTypeName("#define SDL_HAPTIC_CARTESIAN 1")]
    public const int HapticCartesian = 1;

    [NativeTypeName("#define SDL_HAPTIC_SPHERICAL 2")]
    public const int HapticSpherical = 2;

    [NativeTypeName("#define SDL_HAPTIC_STEERING_AXIS 3")]
    public const int HapticSteeringAxis = 3;

    [NativeTypeName("#define SDL_HAPTIC_INFINITY 4294967295U")]
    public const uint HapticInfinity = 4294967295U;

    [NativeTypeName(
        "#define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED \"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\""
    )]
    public static ReadOnlySpan<byte> HintAllowAltTabWhileGrabbed =>
        "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"u8;

    [NativeTypeName(
        "#define SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY \"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\""
    )]
    public static ReadOnlySpan<byte> HintAndroidAllowRecreateActivity =>
        "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY"u8;

    [NativeTypeName("#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE \"SDL_ANDROID_BLOCK_ON_PAUSE\"")]
    public static ReadOnlySpan<byte> HintAndroidBlockOnPause => "SDL_ANDROID_BLOCK_ON_PAUSE"u8;

    [NativeTypeName(
        "#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO \"SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO\""
    )]
    public static ReadOnlySpan<byte> HintAndroidBlockOnPausePauseaudio =>
        "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO"u8;

    [NativeTypeName("#define SDL_HINT_ANDROID_TRAP_BACK_BUTTON \"SDL_ANDROID_TRAP_BACK_BUTTON\"")]
    public static ReadOnlySpan<byte> HintAndroidTrapBackButton => "SDL_ANDROID_TRAP_BACK_BUTTON"u8;

    [NativeTypeName("#define SDL_HINT_APP_ID \"SDL_APP_ID\"")]
    public static ReadOnlySpan<byte> HintAppId => "SDL_APP_ID"u8;

    [NativeTypeName("#define SDL_HINT_APP_NAME \"SDL_APP_NAME\"")]
    public static ReadOnlySpan<byte> HintAppName => "SDL_APP_NAME"u8;

    [NativeTypeName(
        "#define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS \"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\""
    )]
    public static ReadOnlySpan<byte> HintAppleTvControllerUiEvents =>
        "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"u8;

    [NativeTypeName(
        "#define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION \"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\""
    )]
    public static ReadOnlySpan<byte> HintAppleTvRemoteAllowRotation =>
        "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_CATEGORY \"SDL_AUDIO_CATEGORY\"")]
    public static ReadOnlySpan<byte> HintAudioCategory => "SDL_AUDIO_CATEGORY"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DEVICE_APP_NAME \"SDL_AUDIO_DEVICE_APP_NAME\"")]
    public static ReadOnlySpan<byte> HintAudioDeviceAppName => "SDL_AUDIO_DEVICE_APP_NAME"u8;

    [NativeTypeName(
        "#define SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES \"SDL_AUDIO_DEVICE_SAMPLE_FRAMES\""
    )]
    public static ReadOnlySpan<byte> HintAudioDeviceSampleFrames =>
        "SDL_AUDIO_DEVICE_SAMPLE_FRAMES"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DEVICE_STREAM_NAME \"SDL_AUDIO_DEVICE_STREAM_NAME\"")]
    public static ReadOnlySpan<byte> HintAudioDeviceStreamName => "SDL_AUDIO_DEVICE_STREAM_NAME"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE \"SDL_AUDIO_DEVICE_STREAM_ROLE\"")]
    public static ReadOnlySpan<byte> HintAudioDeviceStreamRole => "SDL_AUDIO_DEVICE_STREAM_ROLE"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_DRIVER \"SDL_AUDIO_DRIVER\"")]
    public static ReadOnlySpan<byte> HintAudioDriver => "SDL_AUDIO_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_AUDIO_INCLUDE_MONITORS \"SDL_AUDIO_INCLUDE_MONITORS\"")]
    public static ReadOnlySpan<byte> HintAudioIncludeMonitors => "SDL_AUDIO_INCLUDE_MONITORS"u8;

    [NativeTypeName("#define SDL_HINT_AUTO_UPDATE_JOYSTICKS \"SDL_AUTO_UPDATE_JOYSTICKS\"")]
    public static ReadOnlySpan<byte> HintAutoUpdateJoysticks => "SDL_AUTO_UPDATE_JOYSTICKS"u8;

    [NativeTypeName("#define SDL_HINT_AUTO_UPDATE_SENSORS \"SDL_AUTO_UPDATE_SENSORS\"")]
    public static ReadOnlySpan<byte> HintAutoUpdateSensors => "SDL_AUTO_UPDATE_SENSORS"u8;

    [NativeTypeName("#define SDL_HINT_BMP_SAVE_LEGACY_FORMAT \"SDL_BMP_SAVE_LEGACY_FORMAT\"")]
    public static ReadOnlySpan<byte> HintBmpSaveLegacyFormat => "SDL_BMP_SAVE_LEGACY_FORMAT"u8;

    [NativeTypeName("#define SDL_HINT_CAMERA_DRIVER \"SDL_CAMERA_DRIVER\"")]
    public static ReadOnlySpan<byte> HintCameraDriver => "SDL_CAMERA_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_CPU_FEATURE_MASK \"SDL_CPU_FEATURE_MASK\"")]
    public static ReadOnlySpan<byte> HintCpuFeatureMask => "SDL_CPU_FEATURE_MASK"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_DIRECTINPUT \"SDL_JOYSTICK_DIRECTINPUT\"")]
    public static ReadOnlySpan<byte> HintJoystickDirectinput => "SDL_JOYSTICK_DIRECTINPUT"u8;

    [NativeTypeName("#define SDL_HINT_FILE_DIALOG_DRIVER \"SDL_FILE_DIALOG_DRIVER\"")]
    public static ReadOnlySpan<byte> HintFileDialogDriver => "SDL_FILE_DIALOG_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_DISPLAY_USABLE_BOUNDS \"SDL_DISPLAY_USABLE_BOUNDS\"")]
    public static ReadOnlySpan<byte> HintDisplayUsableBounds => "SDL_DISPLAY_USABLE_BOUNDS"u8;

    [NativeTypeName("#define SDL_HINT_EMSCRIPTEN_ASYNCIFY \"SDL_EMSCRIPTEN_ASYNCIFY\"")]
    public static ReadOnlySpan<byte> HintEmscriptenAsyncify => "SDL_EMSCRIPTEN_ASYNCIFY"u8;

    [NativeTypeName(
        "#define SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR \"SDL_EMSCRIPTEN_CANVAS_SELECTOR\""
    )]
    public static ReadOnlySpan<byte> HintEmscriptenCanvasSelector =>
        "SDL_EMSCRIPTEN_CANVAS_SELECTOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT \"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\""
    )]
    public static ReadOnlySpan<byte> HintEmscriptenKeyboardElement =>
        "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"u8;

    [NativeTypeName("#define SDL_HINT_ENABLE_SCREEN_KEYBOARD \"SDL_ENABLE_SCREEN_KEYBOARD\"")]
    public static ReadOnlySpan<byte> HintEnableScreenKeyboard => "SDL_ENABLE_SCREEN_KEYBOARD"u8;

    [NativeTypeName("#define SDL_HINT_EVENT_LOGGING \"SDL_EVENT_LOGGING\"")]
    public static ReadOnlySpan<byte> HintEventLogging => "SDL_EVENT_LOGGING"u8;

    [NativeTypeName("#define SDL_HINT_FORCE_RAISEWINDOW \"SDL_FORCE_RAISEWINDOW\"")]
    public static ReadOnlySpan<byte> HintForceRaisewindow => "SDL_FORCE_RAISEWINDOW"u8;

    [NativeTypeName("#define SDL_HINT_FRAMEBUFFER_ACCELERATION \"SDL_FRAMEBUFFER_ACCELERATION\"")]
    public static ReadOnlySpan<byte> HintFramebufferAcceleration =>
        "SDL_FRAMEBUFFER_ACCELERATION"u8;

    [NativeTypeName("#define SDL_HINT_GAMECONTROLLERCONFIG \"SDL_GAMECONTROLLERCONFIG\"")]
    public static ReadOnlySpan<byte> HintGamecontrollerconfig => "SDL_GAMECONTROLLERCONFIG"u8;

    [NativeTypeName("#define SDL_HINT_GAMECONTROLLERCONFIG_FILE \"SDL_GAMECONTROLLERCONFIG_FILE\"")]
    public static ReadOnlySpan<byte> HintGamecontrollerconfigFile =>
        "SDL_GAMECONTROLLERCONFIG_FILE"u8;

    [NativeTypeName("#define SDL_HINT_GAMECONTROLLERTYPE \"SDL_GAMECONTROLLERTYPE\"")]
    public static ReadOnlySpan<byte> HintGamecontrollertype => "SDL_GAMECONTROLLERTYPE"u8;

    [NativeTypeName(
        "#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES \"SDL_GAMECONTROLLER_IGNORE_DEVICES\""
    )]
    public static ReadOnlySpan<byte> HintGamecontrollerIgnoreDevices =>
        "SDL_GAMECONTROLLER_IGNORE_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT \"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\""
    )]
    public static ReadOnlySpan<byte> HintGamecontrollerIgnoreDevicesExcept =>
        "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"u8;

    [NativeTypeName(
        "#define SDL_HINT_GAMECONTROLLER_SENSOR_FUSION \"SDL_GAMECONTROLLER_SENSOR_FUSION\""
    )]
    public static ReadOnlySpan<byte> HintGamecontrollerSensorFusion =>
        "SDL_GAMECONTROLLER_SENSOR_FUSION"u8;

    [NativeTypeName(
        "#define SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT \"SDL_GDK_TEXTINPUT_DEFAULT_TEXT\""
    )]
    public static ReadOnlySpan<byte> HintGdkTextinputDefaultText =>
        "SDL_GDK_TEXTINPUT_DEFAULT_TEXT"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_DESCRIPTION \"SDL_GDK_TEXTINPUT_DESCRIPTION\"")]
    public static ReadOnlySpan<byte> HintGdkTextinputDescription =>
        "SDL_GDK_TEXTINPUT_DESCRIPTION"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH \"SDL_GDK_TEXTINPUT_MAX_LENGTH\"")]
    public static ReadOnlySpan<byte> HintGdkTextinputMaxLength => "SDL_GDK_TEXTINPUT_MAX_LENGTH"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_SCOPE \"SDL_GDK_TEXTINPUT_SCOPE\"")]
    public static ReadOnlySpan<byte> HintGdkTextinputScope => "SDL_GDK_TEXTINPUT_SCOPE"u8;

    [NativeTypeName("#define SDL_HINT_GDK_TEXTINPUT_TITLE \"SDL_GDK_TEXTINPUT_TITLE\"")]
    public static ReadOnlySpan<byte> HintGdkTextinputTitle => "SDL_GDK_TEXTINPUT_TITLE"u8;

    [NativeTypeName(
        "#define SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS \"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\""
    )]
    public static ReadOnlySpan<byte> HintHidapiEnumerateOnlyControllers =>
        "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS"u8;

    [NativeTypeName("#define SDL_HINT_HIDAPI_IGNORE_DEVICES \"SDL_HIDAPI_IGNORE_DEVICES\"")]
    public static ReadOnlySpan<byte> HintHidapiIgnoreDevices => "SDL_HIDAPI_IGNORE_DEVICES"u8;

    [NativeTypeName("#define SDL_HINT_IME_INTERNAL_EDITING \"SDL_IME_INTERNAL_EDITING\"")]
    public static ReadOnlySpan<byte> HintImeInternalEditing => "SDL_IME_INTERNAL_EDITING"u8;

    [NativeTypeName("#define SDL_HINT_IME_SHOW_UI \"SDL_IME_SHOW_UI\"")]
    public static ReadOnlySpan<byte> HintImeShowUi => "SDL_IME_SHOW_UI"u8;

    [NativeTypeName("#define SDL_HINT_IOS_HIDE_HOME_INDICATOR \"SDL_IOS_HIDE_HOME_INDICATOR\"")]
    public static ReadOnlySpan<byte> HintIosHideHomeIndicator => "SDL_IOS_HIDE_HOME_INDICATOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS \"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\""
    )]
    public static ReadOnlySpan<byte> HintJoystickAllowBackgroundEvents =>
        "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES \"SDL_JOYSTICK_ARCADESTICK_DEVICES\""
    )]
    public static ReadOnlySpan<byte> HintJoystickArcadestickDevices =>
        "SDL_JOYSTICK_ARCADESTICK_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickArcadestickDevicesExcluded =>
        "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES \"SDL_JOYSTICK_BLACKLIST_DEVICES\""
    )]
    public static ReadOnlySpan<byte> HintJoystickBlacklistDevices =>
        "SDL_JOYSTICK_BLACKLIST_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED \"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickBlacklistDevicesExcluded =>
        "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_DEVICE \"SDL_JOYSTICK_DEVICE\"")]
    public static ReadOnlySpan<byte> HintJoystickDevice => "SDL_JOYSTICK_DEVICE"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES\""
    )]
    public static ReadOnlySpan<byte> HintJoystickFlightstickDevices =>
        "SDL_JOYSTICK_FLIGHTSTICK_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickFlightstickDevicesExcluded =>
        "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES \"SDL_JOYSTICK_GAMECUBE_DEVICES\"")]
    public static ReadOnlySpan<byte> HintJoystickGamecubeDevices =>
        "SDL_JOYSTICK_GAMECUBE_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED \"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickGamecubeDevicesExcluded =>
        "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI \"SDL_JOYSTICK_HIDAPI\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapi => "SDL_JOYSTICK_HIDAPI"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS \"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiCombineJoyCons =>
        "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE \"SDL_JOYSTICK_HIDAPI_GAMECUBE\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiGamecube => "SDL_JOYSTICK_HIDAPI_GAMECUBE"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE \"SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiGamecubeRumbleBrake =>
        "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS \"SDL_JOYSTICK_HIDAPI_JOY_CONS\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiJoyCons => "SDL_JOYSTICK_HIDAPI_JOY_CONS"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED \"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiJoyconHomeLed =>
        "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_LUNA \"SDL_JOYSTICK_HIDAPI_LUNA\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiLuna => "SDL_JOYSTICK_HIDAPI_LUNA"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC \"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiNintendoClassic =>
        "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_PS3 \"SDL_JOYSTICK_HIDAPI_PS3\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs3 => "SDL_JOYSTICK_HIDAPI_PS3"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER \"SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs3SixaxisDriver =>
        "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_PS4 \"SDL_JOYSTICK_HIDAPI_PS4\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs4 => "SDL_JOYSTICK_HIDAPI_PS4"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE \"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs4Rumble =>
        "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_PS5 \"SDL_JOYSTICK_HIDAPI_PS5\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs5 => "SDL_JOYSTICK_HIDAPI_PS5"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs5PlayerLed =>
        "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE \"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiPs5Rumble =>
        "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_SHIELD \"SDL_JOYSTICK_HIDAPI_SHIELD\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiShield => "SDL_JOYSTICK_HIDAPI_SHIELD"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_STADIA \"SDL_JOYSTICK_HIDAPI_STADIA\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiStadia => "SDL_JOYSTICK_HIDAPI_STADIA"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_STEAM \"SDL_JOYSTICK_HIDAPI_STEAM\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiSteam => "SDL_JOYSTICK_HIDAPI_STEAM"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK \"SDL_JOYSTICK_HIDAPI_STEAMDECK\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiSteamdeck =>
        "SDL_JOYSTICK_HIDAPI_STEAMDECK"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH \"SDL_JOYSTICK_HIDAPI_SWITCH\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiSwitch => "SDL_JOYSTICK_HIDAPI_SWITCH"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiSwitchHomeLed =>
        "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiSwitchPlayerLed =>
        "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS \"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiVerticalJoyCons =>
        "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_WII \"SDL_JOYSTICK_HIDAPI_WII\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiWii => "SDL_JOYSTICK_HIDAPI_WII"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiWiiPlayerLed =>
        "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_XBOX \"SDL_JOYSTICK_HIDAPI_XBOX\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiXbox => "SDL_JOYSTICK_HIDAPI_XBOX"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 \"SDL_JOYSTICK_HIDAPI_XBOX_360\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiXbox360 => "SDL_JOYSTICK_HIDAPI_XBOX_360"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiXbox360PlayerLed =>
        "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS \"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiXbox360Wireless =>
        "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE \"SDL_JOYSTICK_HIDAPI_XBOX_ONE\"")]
    public static ReadOnlySpan<byte> HintJoystickHidapiXboxOne => "SDL_JOYSTICK_HIDAPI_XBOX_ONE"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED \"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickHidapiXboxOneHomeLed =>
        "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_IOKIT \"SDL_JOYSTICK_IOKIT\"")]
    public static ReadOnlySpan<byte> HintJoystickIokit => "SDL_JOYSTICK_IOKIT"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_LINUX_CLASSIC \"SDL_JOYSTICK_LINUX_CLASSIC\"")]
    public static ReadOnlySpan<byte> HintJoystickLinuxClassic => "SDL_JOYSTICK_LINUX_CLASSIC"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_LINUX_DEADZONES \"SDL_JOYSTICK_LINUX_DEADZONES\"")]
    public static ReadOnlySpan<byte> HintJoystickLinuxDeadzones => "SDL_JOYSTICK_LINUX_DEADZONES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS \"SDL_JOYSTICK_LINUX_DIGITAL_HATS\""
    )]
    public static ReadOnlySpan<byte> HintJoystickLinuxDigitalHats =>
        "SDL_JOYSTICK_LINUX_DIGITAL_HATS"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES \"SDL_JOYSTICK_LINUX_HAT_DEADZONES\""
    )]
    public static ReadOnlySpan<byte> HintJoystickLinuxHatDeadzones =>
        "SDL_JOYSTICK_LINUX_HAT_DEADZONES"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_MFI \"SDL_JOYSTICK_MFI\"")]
    public static ReadOnlySpan<byte> HintJoystickMfi => "SDL_JOYSTICK_MFI"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_RAWINPUT \"SDL_JOYSTICK_RAWINPUT\"")]
    public static ReadOnlySpan<byte> HintJoystickRawinput => "SDL_JOYSTICK_RAWINPUT"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT \"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\""
    )]
    public static ReadOnlySpan<byte> HintJoystickRawinputCorrelateXinput =>
        "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_ROG_CHAKRAM \"SDL_JOYSTICK_ROG_CHAKRAM\"")]
    public static ReadOnlySpan<byte> HintJoystickRogChakram => "SDL_JOYSTICK_ROG_CHAKRAM"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_THREAD \"SDL_JOYSTICK_THREAD\"")]
    public static ReadOnlySpan<byte> HintJoystickThread => "SDL_JOYSTICK_THREAD"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES \"SDL_JOYSTICK_THROTTLE_DEVICES\"")]
    public static ReadOnlySpan<byte> HintJoystickThrottleDevices =>
        "SDL_JOYSTICK_THROTTLE_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED \"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickThrottleDevicesExcluded =>
        "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_WGI \"SDL_JOYSTICK_WGI\"")]
    public static ReadOnlySpan<byte> HintJoystickWgi => "SDL_JOYSTICK_WGI"u8;

    [NativeTypeName("#define SDL_HINT_JOYSTICK_WHEEL_DEVICES \"SDL_JOYSTICK_WHEEL_DEVICES\"")]
    public static ReadOnlySpan<byte> HintJoystickWheelDevices => "SDL_JOYSTICK_WHEEL_DEVICES"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED \"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED\""
    )]
    public static ReadOnlySpan<byte> HintJoystickWheelDevicesExcluded =>
        "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED"u8;

    [NativeTypeName(
        "#define SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES \"SDL_JOYSTICK_ZERO_CENTERED_DEVICES\""
    )]
    public static ReadOnlySpan<byte> HintJoystickZeroCenteredDevices =>
        "SDL_JOYSTICK_ZERO_CENTERED_DEVICES"u8;

    [NativeTypeName("#define SDL_HINT_KMSDRM_DEVICE_INDEX \"SDL_KMSDRM_DEVICE_INDEX\"")]
    public static ReadOnlySpan<byte> HintKmsdrmDeviceIndex => "SDL_KMSDRM_DEVICE_INDEX"u8;

    [NativeTypeName("#define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER \"SDL_KMSDRM_REQUIRE_DRM_MASTER\"")]
    public static ReadOnlySpan<byte> HintKmsdrmRequireDrmMaster =>
        "SDL_KMSDRM_REQUIRE_DRM_MASTER"u8;

    [NativeTypeName("#define SDL_HINT_LOGGING \"SDL_LOGGING\"")]
    public static ReadOnlySpan<byte> HintLogging => "SDL_LOGGING"u8;

    [NativeTypeName("#define SDL_HINT_MAC_BACKGROUND_APP \"SDL_MAC_BACKGROUND_APP\"")]
    public static ReadOnlySpan<byte> HintMacBackgroundApp => "SDL_MAC_BACKGROUND_APP"u8;

    [NativeTypeName(
        "#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK \"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\""
    )]
    public static ReadOnlySpan<byte> HintMacCtrlClickEmulateRightClick =>
        "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"u8;

    [NativeTypeName("#define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH \"SDL_MAC_OPENGL_ASYNC_DISPATCH\"")]
    public static ReadOnlySpan<byte> HintMacOpenglAsyncDispatch =>
        "SDL_MAC_OPENGL_ASYNC_DISPATCH"u8;

    [NativeTypeName("#define SDL_HINT_MAIN_CALLBACK_RATE \"SDL_MAIN_CALLBACK_RATE\"")]
    public static ReadOnlySpan<byte> HintMainCallbackRate => "SDL_MAIN_CALLBACK_RATE"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_AUTO_CAPTURE \"SDL_MOUSE_AUTO_CAPTURE\"")]
    public static ReadOnlySpan<byte> HintMouseAutoCapture => "SDL_MOUSE_AUTO_CAPTURE"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS \"SDL_MOUSE_DOUBLE_CLICK_RADIUS\"")]
    public static ReadOnlySpan<byte> HintMouseDoubleClickRadius =>
        "SDL_MOUSE_DOUBLE_CLICK_RADIUS"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME \"SDL_MOUSE_DOUBLE_CLICK_TIME\"")]
    public static ReadOnlySpan<byte> HintMouseDoubleClickTime => "SDL_MOUSE_DOUBLE_CLICK_TIME"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH \"SDL_MOUSE_FOCUS_CLICKTHROUGH\"")]
    public static ReadOnlySpan<byte> HintMouseFocusClickthrough => "SDL_MOUSE_FOCUS_CLICKTHROUGH"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE \"SDL_MOUSE_NORMAL_SPEED_SCALE\"")]
    public static ReadOnlySpan<byte> HintMouseNormalSpeedScale => "SDL_MOUSE_NORMAL_SPEED_SCALE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER \"SDL_MOUSE_RELATIVE_MODE_CENTER\""
    )]
    public static ReadOnlySpan<byte> HintMouseRelativeModeCenter =>
        "SDL_MOUSE_RELATIVE_MODE_CENTER"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_RELATIVE_MODE_WARP \"SDL_MOUSE_RELATIVE_MODE_WARP\"")]
    public static ReadOnlySpan<byte> HintMouseRelativeModeWarp => "SDL_MOUSE_RELATIVE_MODE_WARP"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE \"SDL_MOUSE_RELATIVE_SPEED_SCALE\""
    )]
    public static ReadOnlySpan<byte> HintMouseRelativeSpeedScale =>
        "SDL_MOUSE_RELATIVE_SPEED_SCALE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE \"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\""
    )]
    public static ReadOnlySpan<byte> HintMouseRelativeSystemScale =>
        "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"u8;

    [NativeTypeName(
        "#define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION \"SDL_MOUSE_RELATIVE_WARP_MOTION\""
    )]
    public static ReadOnlySpan<byte> HintMouseRelativeWarpMotion =>
        "SDL_MOUSE_RELATIVE_WARP_MOTION"u8;

    [NativeTypeName("#define SDL_HINT_MOUSE_TOUCH_EVENTS \"SDL_MOUSE_TOUCH_EVENTS\"")]
    public static ReadOnlySpan<byte> HintMouseTouchEvents => "SDL_MOUSE_TOUCH_EVENTS"u8;

    [NativeTypeName("#define SDL_HINT_NO_SIGNAL_HANDLERS \"SDL_NO_SIGNAL_HANDLERS\"")]
    public static ReadOnlySpan<byte> HintNoSignalHandlers => "SDL_NO_SIGNAL_HANDLERS"u8;

    [NativeTypeName("#define SDL_HINT_OPENGL_ES_DRIVER \"SDL_OPENGL_ES_DRIVER\"")]
    public static ReadOnlySpan<byte> HintOpenglEsDriver => "SDL_OPENGL_ES_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_ORIENTATIONS \"SDL_IOS_ORIENTATIONS\"")]
    public static ReadOnlySpan<byte> HintOrientations => "SDL_IOS_ORIENTATIONS"u8;

    [NativeTypeName("#define SDL_HINT_PEN_DELAY_MOUSE_BUTTON \"SDL_PEN_DELAY_MOUSE_BUTTON\"")]
    public static ReadOnlySpan<byte> HintPenDelayMouseButton => "SDL_PEN_DELAY_MOUSE_BUTTON"u8;

    [NativeTypeName("#define SDL_HINT_PEN_NOT_MOUSE \"SDL_PEN_NOT_MOUSE\"")]
    public static ReadOnlySpan<byte> HintPenNotMouse => "SDL_PEN_NOT_MOUSE"u8;

    [NativeTypeName("#define SDL_HINT_POLL_SENTINEL \"SDL_POLL_SENTINEL\"")]
    public static ReadOnlySpan<byte> HintPollSentinel => "SDL_POLL_SENTINEL"u8;

    [NativeTypeName("#define SDL_HINT_PREFERRED_LOCALES \"SDL_PREFERRED_LOCALES\"")]
    public static ReadOnlySpan<byte> HintPreferredLocales => "SDL_PREFERRED_LOCALES"u8;

    [NativeTypeName("#define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE \"SDL_QUIT_ON_LAST_WINDOW_CLOSE\"")]
    public static ReadOnlySpan<byte> HintQuitOnLastWindowClose => "SDL_QUIT_ON_LAST_WINDOW_CLOSE"u8;

    [NativeTypeName(
        "#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE \"SDL_RENDER_DIRECT3D_THREADSAFE\""
    )]
    public static ReadOnlySpan<byte> HintRenderDirect3DThreadsafe =>
        "SDL_RENDER_DIRECT3D_THREADSAFE"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_DIRECT3D11_DEBUG \"SDL_RENDER_DIRECT3D11_DEBUG\"")]
    public static ReadOnlySpan<byte> HintRenderDirect3D11Debug => "SDL_RENDER_DIRECT3D11_DEBUG"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_VULKAN_DEBUG \"SDL_RENDER_VULKAN_DEBUG\"")]
    public static ReadOnlySpan<byte> HintRenderVulkanDebug => "SDL_RENDER_VULKAN_DEBUG"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_DRIVER \"SDL_RENDER_DRIVER\"")]
    public static ReadOnlySpan<byte> HintRenderDriver => "SDL_RENDER_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_LINE_METHOD \"SDL_RENDER_LINE_METHOD\"")]
    public static ReadOnlySpan<byte> HintRenderLineMethod => "SDL_RENDER_LINE_METHOD"u8;

    [NativeTypeName(
        "#define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE \"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE\""
    )]
    public static ReadOnlySpan<byte> HintRenderMetalPreferLowPowerDevice =>
        "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_PS2_DYNAMIC_VSYNC \"SDL_RENDER_PS2_DYNAMIC_VSYNC\"")]
    public static ReadOnlySpan<byte> HintRenderPs2DynamicVsync => "SDL_RENDER_PS2_DYNAMIC_VSYNC"u8;

    [NativeTypeName("#define SDL_HINT_RENDER_VSYNC \"SDL_RENDER_VSYNC\"")]
    public static ReadOnlySpan<byte> HintRenderVsync => "SDL_RENDER_VSYNC"u8;

    [NativeTypeName("#define SDL_HINT_RETURN_KEY_HIDES_IME \"SDL_RETURN_KEY_HIDES_IME\"")]
    public static ReadOnlySpan<byte> HintReturnKeyHidesIme => "SDL_RETURN_KEY_HIDES_IME"u8;

    [NativeTypeName("#define SDL_HINT_ROG_GAMEPAD_MICE \"SDL_ROG_GAMEPAD_MICE\"")]
    public static ReadOnlySpan<byte> HintRogGamepadMice => "SDL_ROG_GAMEPAD_MICE"u8;

    [NativeTypeName("#define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED \"SDL_ROG_GAMEPAD_MICE_EXCLUDED\"")]
    public static ReadOnlySpan<byte> HintRogGamepadMiceExcluded =>
        "SDL_ROG_GAMEPAD_MICE_EXCLUDED"u8;

    [NativeTypeName("#define SDL_HINT_RPI_VIDEO_LAYER \"SDL_RPI_VIDEO_LAYER\"")]
    public static ReadOnlySpan<byte> HintRpiVideoLayer => "SDL_RPI_VIDEO_LAYER"u8;

    [NativeTypeName(
        "#define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME \"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\""
    )]
    public static ReadOnlySpan<byte> HintScreensaverInhibitActivityName =>
        "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"u8;

    [NativeTypeName("#define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT \"SDL_SHUTDOWN_DBUS_ON_QUIT\"")]
    public static ReadOnlySpan<byte> HintShutdownDbusOnQuit => "SDL_SHUTDOWN_DBUS_ON_QUIT"u8;

    [NativeTypeName("#define SDL_HINT_STORAGE_TITLE_DRIVER \"SDL_STORAGE_TITLE_DRIVER\"")]
    public static ReadOnlySpan<byte> HintStorageTitleDriver => "SDL_STORAGE_TITLE_DRIVER"u8;

    [NativeTypeName("#define SDL_HINT_STORAGE_USER_DRIVER \"SDL_STORAGE_USER_DRIVER\"")]
    public static ReadOnlySpan<byte> HintStorageUserDriver => "SDL_STORAGE_USER_DRIVER"u8;

    [NativeTypeName(
        "#define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL \"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\""
    )]
    public static ReadOnlySpan<byte> HintThreadForceRealtimeTimeCritical =>
        "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"u8;

    [NativeTypeName("#define SDL_HINT_THREAD_PRIORITY_POLICY \"SDL_THREAD_PRIORITY_POLICY\"")]
    public static ReadOnlySpan<byte> HintThreadPriorityPolicy => "SDL_THREAD_PRIORITY_POLICY"u8;

    [NativeTypeName("#define SDL_HINT_TIMER_RESOLUTION \"SDL_TIMER_RESOLUTION\"")]
    public static ReadOnlySpan<byte> HintTimerResolution => "SDL_TIMER_RESOLUTION"u8;

    [NativeTypeName("#define SDL_HINT_TOUCH_MOUSE_EVENTS \"SDL_TOUCH_MOUSE_EVENTS\"")]
    public static ReadOnlySpan<byte> HintTouchMouseEvents => "SDL_TOUCH_MOUSE_EVENTS"u8;

    [NativeTypeName("#define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY \"SDL_TRACKPAD_IS_TOUCH_ONLY\"")]
    public static ReadOnlySpan<byte> HintTrackpadIsTouchOnly => "SDL_TRACKPAD_IS_TOUCH_ONLY"u8;

    [NativeTypeName("#define SDL_HINT_TV_REMOTE_AS_JOYSTICK \"SDL_TV_REMOTE_AS_JOYSTICK\"")]
    public static ReadOnlySpan<byte> HintTvRemoteAsJoystick => "SDL_TV_REMOTE_AS_JOYSTICK"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER \"SDL_VIDEO_ALLOW_SCREENSAVER\"")]
    public static ReadOnlySpan<byte> HintVideoAllowScreensaver => "SDL_VIDEO_ALLOW_SCREENSAVER"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_DOUBLE_BUFFER \"SDL_VIDEO_DOUBLE_BUFFER\"")]
    public static ReadOnlySpan<byte> HintVideoDoubleBuffer => "SDL_VIDEO_DOUBLE_BUFFER"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_DRIVER \"SDL_VIDEO_DRIVER\"")]
    public static ReadOnlySpan<byte> HintVideoDriver => "SDL_VIDEO_DRIVER"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK \"SDL_VIDEO_EGL_GETDISPLAY_FALLBACK\""
    )]
    public static ReadOnlySpan<byte> HintVideoEglAllowGetdisplayFallback =>
        "SDL_VIDEO_EGL_GETDISPLAY_FALLBACK"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_FORCE_EGL \"SDL_VIDEO_FORCE_EGL\"")]
    public static ReadOnlySpan<byte> HintVideoForceEgl => "SDL_VIDEO_FORCE_EGL"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES \"SDL_VIDEO_MAC_FULLSCREEN_SPACES\""
    )]
    public static ReadOnlySpan<byte> HintVideoMacFullscreenSpaces =>
        "SDL_VIDEO_MAC_FULLSCREEN_SPACES"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS \"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\""
    )]
    public static ReadOnlySpan<byte> HintVideoMinimizeOnFocusLoss =>
        "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS \"SDL_VIDEO_SYNC_WINDOW_OPERATIONS\""
    )]
    public static ReadOnlySpan<byte> HintVideoSyncWindowOperations =>
        "SDL_VIDEO_SYNC_WINDOW_OPERATIONS"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR \"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\""
    )]
    public static ReadOnlySpan<byte> HintVideoWaylandAllowLibdecor =>
        "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP \"SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP\""
    )]
    public static ReadOnlySpan<byte> HintVideoWaylandEmulateMouseWarp =>
        "SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION \"SDL_VIDEO_WAYLAND_MODE_EMULATION\""
    )]
    public static ReadOnlySpan<byte> HintVideoWaylandModeEmulation =>
        "SDL_VIDEO_WAYLAND_MODE_EMULATION"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_MODE_SCALING \"SDL_VIDEO_WAYLAND_MODE_SCALING\""
    )]
    public static ReadOnlySpan<byte> HintVideoWaylandModeScaling =>
        "SDL_VIDEO_WAYLAND_MODE_SCALING"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR \"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\""
    )]
    public static ReadOnlySpan<byte> HintVideoWaylandPreferLibdecor =>
        "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY \"SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY\""
    )]
    public static ReadOnlySpan<byte> HintVideoWaylandScaleToDisplay =>
        "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_WIN_D3DCOMPILER \"SDL_VIDEO_WIN_D3DCOMPILER\"")]
    public static ReadOnlySpan<byte> HintVideoWinD3Dcompiler => "SDL_VIDEO_WIN_D3DCOMPILER"u8;

    [NativeTypeName(
        "#define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR \"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\""
    )]
    public static ReadOnlySpan<byte> HintVideoX11NetWmBypassCompositor =>
        "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_NET_WM_PING \"SDL_VIDEO_X11_NET_WM_PING\"")]
    public static ReadOnlySpan<byte> HintVideoX11NetWmPing => "SDL_VIDEO_X11_NET_WM_PING"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_SCALING_FACTOR \"SDL_VIDEO_X11_SCALING_FACTOR\"")]
    public static ReadOnlySpan<byte> HintVideoX11ScalingFactor => "SDL_VIDEO_X11_SCALING_FACTOR"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_WINDOW_VISUALID \"SDL_VIDEO_X11_WINDOW_VISUALID\"")]
    public static ReadOnlySpan<byte> HintVideoX11WindowVisualid =>
        "SDL_VIDEO_X11_WINDOW_VISUALID"u8;

    [NativeTypeName("#define SDL_HINT_VIDEO_X11_XRANDR \"SDL_VIDEO_X11_XRANDR\"")]
    public static ReadOnlySpan<byte> HintVideoX11Xrandr => "SDL_VIDEO_X11_XRANDR"u8;

    [NativeTypeName("#define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE \"SDL_VITA_TOUCH_MOUSE_DEVICE\"")]
    public static ReadOnlySpan<byte> HintVitaTouchMouseDevice => "SDL_VITA_TOUCH_MOUSE_DEVICE"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_FACT_CHUNK \"SDL_WAVE_FACT_CHUNK\"")]
    public static ReadOnlySpan<byte> HintWaveFactChunk => "SDL_WAVE_FACT_CHUNK"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_RIFF_CHUNK_SIZE \"SDL_WAVE_RIFF_CHUNK_SIZE\"")]
    public static ReadOnlySpan<byte> HintWaveRiffChunkSize => "SDL_WAVE_RIFF_CHUNK_SIZE"u8;

    [NativeTypeName("#define SDL_HINT_WAVE_TRUNCATION \"SDL_WAVE_TRUNCATION\"")]
    public static ReadOnlySpan<byte> HintWaveTruncation => "SDL_WAVE_TRUNCATION"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED \"SDL_WINDOW_ACTIVATE_WHEN_RAISED\""
    )]
    public static ReadOnlySpan<byte> HintWindowActivateWhenRaised =>
        "SDL_WINDOW_ACTIVATE_WHEN_RAISED"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN \"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\""
    )]
    public static ReadOnlySpan<byte> HintWindowActivateWhenShown =>
        "SDL_WINDOW_ACTIVATE_WHEN_SHOWN"u8;

    [NativeTypeName("#define SDL_HINT_WINDOW_ALLOW_TOPMOST \"SDL_WINDOW_ALLOW_TOPMOST\"")]
    public static ReadOnlySpan<byte> HintWindowAllowTopmost => "SDL_WINDOW_ALLOW_TOPMOST"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN \"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\""
    )]
    public static ReadOnlySpan<byte> HintWindowFrameUsableWhileCursorHidden =>
        "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 \"SDL_WINDOWS_CLOSE_ON_ALT_F4\"")]
    public static ReadOnlySpan<byte> HintWindowsCloseOnAltF4 => "SDL_WINDOWS_CLOSE_ON_ALT_F4"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS \"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\""
    )]
    public static ReadOnlySpan<byte> HintWindowsEnableMenuMnemonics =>
        "SDL_WINDOWS_ENABLE_MENU_MNEMONICS"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP \"SDL_WINDOWS_ENABLE_MESSAGELOOP\""
    )]
    public static ReadOnlySpan<byte> HintWindowsEnableMessageloop =>
        "SDL_WINDOWS_ENABLE_MESSAGELOOP"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_RAW_KEYBOARD \"SDL_WINDOWS_RAW_KEYBOARD\"")]
    public static ReadOnlySpan<byte> HintWindowsRawKeyboard => "SDL_WINDOWS_RAW_KEYBOARD"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS \"SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS\""
    )]
    public static ReadOnlySpan<byte> HintWindowsForceMutexCriticalSections =>
        "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL \"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\""
    )]
    public static ReadOnlySpan<byte> HintWindowsForceSemaphoreKernel =>
        "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_INTRESOURCE_ICON \"SDL_WINDOWS_INTRESOURCE_ICON\"")]
    public static ReadOnlySpan<byte> HintWindowsIntresourceIcon => "SDL_WINDOWS_INTRESOURCE_ICON"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL \"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\""
    )]
    public static ReadOnlySpan<byte> HintWindowsIntresourceIconSmall =>
        "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"u8;

    [NativeTypeName("#define SDL_HINT_WINDOWS_USE_D3D9EX \"SDL_WINDOWS_USE_D3D9EX\"")]
    public static ReadOnlySpan<byte> HintWindowsUseD3D9Ex => "SDL_WINDOWS_USE_D3D9EX"u8;

    [NativeTypeName("#define SDL_HINT_WINRT_HANDLE_BACK_BUTTON \"SDL_WINRT_HANDLE_BACK_BUTTON\"")]
    public static ReadOnlySpan<byte> HintWinrtHandleBackButton => "SDL_WINRT_HANDLE_BACK_BUTTON"u8;

    [NativeTypeName(
        "#define SDL_HINT_WINRT_PRIVACY_POLICY_LABEL \"SDL_WINRT_PRIVACY_POLICY_LABEL\""
    )]
    public static ReadOnlySpan<byte> HintWinrtPrivacyPolicyLabel =>
        "SDL_WINRT_PRIVACY_POLICY_LABEL"u8;

    [NativeTypeName("#define SDL_HINT_WINRT_PRIVACY_POLICY_URL \"SDL_WINRT_PRIVACY_POLICY_URL\"")]
    public static ReadOnlySpan<byte> HintWinrtPrivacyPolicyUrl => "SDL_WINRT_PRIVACY_POLICY_URL"u8;

    [NativeTypeName(
        "#define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT \"SDL_X11_FORCE_OVERRIDE_REDIRECT\""
    )]
    public static ReadOnlySpan<byte> HintX11ForceOverrideRedirect =>
        "SDL_X11_FORCE_OVERRIDE_REDIRECT"u8;

    [NativeTypeName("#define SDL_HINT_X11_WINDOW_TYPE \"SDL_X11_WINDOW_TYPE\"")]
    public static ReadOnlySpan<byte> HintX11WindowType => "SDL_X11_WINDOW_TYPE"u8;

    [NativeTypeName("#define SDL_HINT_XINPUT_ENABLED \"SDL_XINPUT_ENABLED\"")]
    public static ReadOnlySpan<byte> HintXinputEnabled => "SDL_XINPUT_ENABLED"u8;

    [NativeTypeName("#define SDL_SOFTWARE_RENDERER \"software\"")]
    public static ReadOnlySpan<byte> SoftwareRenderer => "software"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_NAME_STRING \"name\"")]
    public static ReadOnlySpan<byte> PropRendererCreateNameString => "name"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_WINDOW_POINTER \"window\"")]
    public static ReadOnlySpan<byte> PropRendererCreateWindowPointer => "window"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_SURFACE_POINTER \"surface\"")]
    public static ReadOnlySpan<byte> PropRendererCreateSurfacePointer => "surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER \"output_colorspace\""
    )]
    public static ReadOnlySpan<byte> PropRendererCreateOutputColorspaceNumber =>
        "output_colorspace"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_BOOLEAN \"present_vsync\"")]
    public static ReadOnlySpan<byte> PropRendererCreatePresentVsyncBoolean => "present_vsync"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER \"vulkan.instance\"")]
    public static ReadOnlySpan<byte> PropRendererCreateVulkanInstancePointer => "vulkan.instance"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER \"vulkan.surface\"")]
    public static ReadOnlySpan<byte> PropRendererCreateVulkanSurfaceNumber => "vulkan.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER \"vulkan.physical_device\""
    )]
    public static ReadOnlySpan<byte> PropRendererCreateVulkanPhysicalDevicePointer =>
        "vulkan.physical_device"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER \"vulkan.device\"")]
    public static ReadOnlySpan<byte> PropRendererCreateVulkanDevicePointer => "vulkan.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER \"vulkan.graphics_queue_family_index\""
    )]
    public static ReadOnlySpan<byte> PropRendererCreateVulkanGraphicsQueueFamilyIndexNumber =>
        "vulkan.graphics_queue_family_index"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER \"vulkan.present_queue_family_index\""
    )]
    public static ReadOnlySpan<byte> PropRendererCreateVulkanPresentQueueFamilyIndexNumber =>
        "vulkan.present_queue_family_index"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_NAME_STRING \"SDL.renderer.name\"")]
    public static ReadOnlySpan<byte> PropRendererNameString => "SDL.renderer.name"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_WINDOW_POINTER \"SDL.renderer.window\"")]
    public static ReadOnlySpan<byte> PropRendererWindowPointer => "SDL.renderer.window"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_SURFACE_POINTER \"SDL.renderer.surface\"")]
    public static ReadOnlySpan<byte> PropRendererSurfacePointer => "SDL.renderer.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER \"SDL.renderer.output_colorspace\""
    )]
    public static ReadOnlySpan<byte> PropRendererOutputColorspaceNumber =>
        "SDL.renderer.output_colorspace"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN \"SDL.renderer.HDR_enabled\"")]
    public static ReadOnlySpan<byte> PropRendererHdrEnabledBoolean => "SDL.renderer.HDR_enabled"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT \"SDL.renderer.SDR_white_point\""
    )]
    public static ReadOnlySpan<byte> PropRendererSdrWhitePointFloat =>
        "SDL.renderer.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT \"SDL.renderer.HDR_headroom\"")]
    public static ReadOnlySpan<byte> PropRendererHdrHeadroomFloat => "SDL.renderer.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_D3D9_DEVICE_POINTER \"SDL.renderer.d3d9.device\"")]
    public static ReadOnlySpan<byte> PropRendererD3D9DevicePointer => "SDL.renderer.d3d9.device"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_D3D11_DEVICE_POINTER \"SDL.renderer.d3d11.device\"")]
    public static ReadOnlySpan<byte> PropRendererD3D11DevicePointer =>
        "SDL.renderer.d3d11.device"u8;

    [NativeTypeName("#define SDL_PROP_RENDERER_D3D12_DEVICE_POINTER \"SDL.renderer.d3d12.device\"")]
    public static ReadOnlySpan<byte> PropRendererD3D12DevicePointer =>
        "SDL.renderer.d3d12.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER \"SDL.renderer.d3d12.command_queue\""
    )]
    public static ReadOnlySpan<byte> PropRendererD3D12CommandQueuePointer =>
        "SDL.renderer.d3d12.command_queue"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER \"SDL.renderer.vulkan.instance\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanInstancePointer =>
        "SDL.renderer.vulkan.instance"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER \"SDL.renderer.vulkan.surface\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanSurfaceNumber =>
        "SDL.renderer.vulkan.surface"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER \"SDL.renderer.vulkan.physical_device\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanPhysicalDevicePointer =>
        "SDL.renderer.vulkan.physical_device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER \"SDL.renderer.vulkan.device\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanDevicePointer =>
        "SDL.renderer.vulkan.device"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER \"SDL.renderer.vulkan.graphics_queue_family_index\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanGraphicsQueueFamilyIndexNumber =>
        "SDL.renderer.vulkan.graphics_queue_family_index"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER \"SDL.renderer.vulkan.present_queue_family_index\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanPresentQueueFamilyIndexNumber =>
        "SDL.renderer.vulkan.present_queue_family_index"u8;

    [NativeTypeName(
        "#define SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER \"SDL.renderer.vulkan.swapchain_image_count\""
    )]
    public static ReadOnlySpan<byte> PropRendererVulkanSwapchainImageCountNumber =>
        "SDL.renderer.vulkan.swapchain_image_count"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER \"colorspace\"")]
    public static ReadOnlySpan<byte> PropTextureCreateColorspaceNumber => "colorspace"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER \"format\"")]
    public static ReadOnlySpan<byte> PropTextureCreateFormatNumber => "format"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER \"access\"")]
    public static ReadOnlySpan<byte> PropTextureCreateAccessNumber => "access"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER \"width\"")]
    public static ReadOnlySpan<byte> PropTextureCreateWidthNumber => "width"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER \"height\"")]
    public static ReadOnlySpan<byte> PropTextureCreateHeightNumber => "height"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT \"SDR_white_point\"")]
    public static ReadOnlySpan<byte> PropTextureCreateSdrWhitePointFloat => "SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT \"HDR_headroom\"")]
    public static ReadOnlySpan<byte> PropTextureCreateHdrHeadroomFloat => "HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER \"d3d11.texture\"")]
    public static ReadOnlySpan<byte> PropTextureCreateD3D11TexturePointer => "d3d11.texture"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER \"d3d11.texture_u\"")]
    public static ReadOnlySpan<byte> PropTextureCreateD3D11TextureUPointer => "d3d11.texture_u"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER \"d3d11.texture_v\"")]
    public static ReadOnlySpan<byte> PropTextureCreateD3D11TextureVPointer => "d3d11.texture_v"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER \"d3d12.texture\"")]
    public static ReadOnlySpan<byte> PropTextureCreateD3D12TexturePointer => "d3d12.texture"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER \"d3d12.texture_u\"")]
    public static ReadOnlySpan<byte> PropTextureCreateD3D12TextureUPointer => "d3d12.texture_u"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER \"d3d12.texture_v\"")]
    public static ReadOnlySpan<byte> PropTextureCreateD3D12TextureVPointer => "d3d12.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER \"metal.pixelbuffer\""
    )]
    public static ReadOnlySpan<byte> PropTextureCreateMetalPixelbufferPointer =>
        "metal.pixelbuffer"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER \"opengl.texture\"")]
    public static ReadOnlySpan<byte> PropTextureCreateOpenglTextureNumber => "opengl.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER \"opengl.texture_uv\""
    )]
    public static ReadOnlySpan<byte> PropTextureCreateOpenglTextureUvNumber =>
        "opengl.texture_uv"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER \"opengl.texture_u\"")]
    public static ReadOnlySpan<byte> PropTextureCreateOpenglTextureUNumber => "opengl.texture_u"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER \"opengl.texture_v\"")]
    public static ReadOnlySpan<byte> PropTextureCreateOpenglTextureVNumber => "opengl.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER \"opengles2.texture\""
    )]
    public static ReadOnlySpan<byte> PropTextureCreateOpengles2TextureNumber =>
        "opengles2.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER \"opengles2.texture_uv\""
    )]
    public static ReadOnlySpan<byte> PropTextureCreateOpengles2TextureUvNumber =>
        "opengles2.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER \"opengles2.texture_u\""
    )]
    public static ReadOnlySpan<byte> PropTextureCreateOpengles2TextureUNumber =>
        "opengles2.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER \"opengles2.texture_v\""
    )]
    public static ReadOnlySpan<byte> PropTextureCreateOpengles2TextureVNumber =>
        "opengles2.texture_v"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER \"vulkan.texture\"")]
    public static ReadOnlySpan<byte> PropTextureCreateVulkanTextureNumber => "vulkan.texture"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_COLORSPACE_NUMBER \"SDL.texture.colorspace\"")]
    public static ReadOnlySpan<byte> PropTextureColorspaceNumber => "SDL.texture.colorspace"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT \"SDL.texture.SDR_white_point\""
    )]
    public static ReadOnlySpan<byte> PropTextureSdrWhitePointFloat =>
        "SDL.texture.SDR_white_point"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT \"SDL.texture.HDR_headroom\"")]
    public static ReadOnlySpan<byte> PropTextureHdrHeadroomFloat => "SDL.texture.HDR_headroom"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER \"SDL.texture.d3d11.texture\"")]
    public static ReadOnlySpan<byte> PropTextureD3D11TexturePointer =>
        "SDL.texture.d3d11.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER \"SDL.texture.d3d11.texture_u\""
    )]
    public static ReadOnlySpan<byte> PropTextureD3D11TextureUPointer =>
        "SDL.texture.d3d11.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER \"SDL.texture.d3d11.texture_v\""
    )]
    public static ReadOnlySpan<byte> PropTextureD3D11TextureVPointer =>
        "SDL.texture.d3d11.texture_v"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER \"SDL.texture.d3d12.texture\"")]
    public static ReadOnlySpan<byte> PropTextureD3D12TexturePointer =>
        "SDL.texture.d3d12.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER \"SDL.texture.d3d12.texture_u\""
    )]
    public static ReadOnlySpan<byte> PropTextureD3D12TextureUPointer =>
        "SDL.texture.d3d12.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER \"SDL.texture.d3d12.texture_v\""
    )]
    public static ReadOnlySpan<byte> PropTextureD3D12TextureVPointer =>
        "SDL.texture.d3d12.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER \"SDL.texture.opengl.texture\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpenglTextureNumber =>
        "SDL.texture.opengl.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER \"SDL.texture.opengl.texture_uv\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpenglTextureUvNumber =>
        "SDL.texture.opengl.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER \"SDL.texture.opengl.texture_u\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpenglTextureUNumber =>
        "SDL.texture.opengl.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER \"SDL.texture.opengl.texture_v\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpenglTextureVNumber =>
        "SDL.texture.opengl.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER \"SDL.texture.opengl.target\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpenglTextureTargetNumber =>
        "SDL.texture.opengl.target"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT \"SDL.texture.opengl.tex_w\"")]
    public static ReadOnlySpan<byte> PropTextureOpenglTexWFloat => "SDL.texture.opengl.tex_w"u8;

    [NativeTypeName("#define SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT \"SDL.texture.opengl.tex_h\"")]
    public static ReadOnlySpan<byte> PropTextureOpenglTexHFloat => "SDL.texture.opengl.tex_h"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER \"SDL.texture.opengles2.texture\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpengles2TextureNumber =>
        "SDL.texture.opengles2.texture"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER \"SDL.texture.opengles2.texture_uv\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpengles2TextureUvNumber =>
        "SDL.texture.opengles2.texture_uv"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER \"SDL.texture.opengles2.texture_u\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpengles2TextureUNumber =>
        "SDL.texture.opengles2.texture_u"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER \"SDL.texture.opengles2.texture_v\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpengles2TextureVNumber =>
        "SDL.texture.opengles2.texture_v"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER \"SDL.texture.opengles2.target\""
    )]
    public static ReadOnlySpan<byte> PropTextureOpengles2TextureTargetNumber =>
        "SDL.texture.opengles2.target"u8;

    [NativeTypeName(
        "#define SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER \"SDL.texture.vulkan.texture\""
    )]
    public static ReadOnlySpan<byte> PropTextureVulkanTextureNumber =>
        "SDL.texture.vulkan.texture"u8;

    [NativeTypeName("#define SDL_PROP_GLOBAL_SYSTEM_DATE_FORMAT_NUMBER \"SDL.time.date_format\"")]
    public static ReadOnlySpan<byte> PropGlobalSystemDateFormatNumber => "SDL.time.date_format"u8;

    [NativeTypeName("#define SDL_PROP_GLOBAL_SYSTEM_TIME_FORMAT_NUMBER \"SDL.time.time_format\"")]
    public static ReadOnlySpan<byte> PropGlobalSystemTimeFormatNumber => "SDL.time.time_format"u8;

    [NativeTypeName("#define SDL_MS_PER_SECOND 1000")]
    public const int MsPerSecond = 1000;

    [NativeTypeName("#define SDL_US_PER_SECOND 1000000")]
    public const int UsPerSecond = 1000000;

    [NativeTypeName("#define SDL_NS_PER_SECOND 1000000000LL")]
    public const long NsPerSecond = 1000000000L;

    [NativeTypeName("#define SDL_NS_PER_MS 1000000")]
    public const int NsPerMs = 1000000;

    [NativeTypeName("#define SDL_NS_PER_US 1000")]
    public const int NsPerUs = 1000;

    [NativeTypeName("#define SDL_MAJOR_VERSION 3")]
    public const int MajorVersion = 3;

    [NativeTypeName("#define SDL_MINOR_VERSION 1")]
    public const int MinorVersion = 1;

    [NativeTypeName("#define SDL_PATCHLEVEL 2")]
    public const int Patchlevel = 2;

    [NativeTypeName(
        "#define SDL_COMPILEDVERSION SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL)"
    )]
    public const int Compiledversion = ((3) << 24 | (1) << 8 | (2) << 0);

    [return: NativeTypeName("SDL_bool")]
    public static int PointInRect(
        [NativeTypeName("const SDL_Point *")] Point* p,
        [NativeTypeName("const SDL_Rect *")] Rect* r
    )
    {
        return (
            (p) != null
            && (r) != null
            && (p->X >= r->X)
            && (p->X < (r->X + r->W))
            && (p->Y >= r->Y)
            && (p->Y < (r->Y + r->H))
        )
            ? 1
            : 0;
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> PointInRect(
        [NativeTypeName("const SDL_Point *")] Ref<Point> p,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> r
    )
    {
        fixed (Rect* __dsl_r = r)
        fixed (Point* __dsl_p = p)
        {
            return (MaybeBool<int>)(int)PointInRect(__dsl_p, __dsl_r);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    public static int PointInRectFloat(
        [NativeTypeName("const SDL_FPoint *")] FPoint* p,
        [NativeTypeName("const SDL_FRect *")] FRect* r
    )
    {
        return (
            (p) != null
            && (r) != null
            && (p->X >= r->X)
            && (p->X < (r->X + r->W))
            && (p->Y >= r->Y)
            && (p->Y < (r->Y + r->H))
        )
            ? 1
            : 0;
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> PointInRectFloat(
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> p,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> r
    )
    {
        fixed (FRect* __dsl_r = r)
        fixed (FPoint* __dsl_p = p)
        {
            return (MaybeBool<int>)(int)PointInRectFloat(__dsl_p, __dsl_r);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    public static int RectEmpty([NativeTypeName("const SDL_Rect *")] Rect* r)
    {
        return ((r == null) || (r->W <= 0) || (r->H <= 0)) ? 1 : 0;
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RectEmpty([NativeTypeName("const SDL_Rect *")] Ref<Rect> r)
    {
        fixed (Rect* __dsl_r = r)
        {
            return (MaybeBool<int>)(int)RectEmpty(__dsl_r);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    public static int RectEmptyFloat([NativeTypeName("const SDL_FRect *")] FRect* r)
    {
        return ((r == null) || (r->W <= 0.0f) || (r->H <= 0.0f)) ? 1 : 0;
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RectEmptyFloat([NativeTypeName("const SDL_FRect *")] Ref<FRect> r)
    {
        fixed (FRect* __dsl_r = r)
        {
            return (MaybeBool<int>)(int)RectEmptyFloat(__dsl_r);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    public static int RectsEqual(
        [NativeTypeName("const SDL_Rect *")] Rect* a,
        [NativeTypeName("const SDL_Rect *")] Rect* b
    )
    {
        return (
            (a) != null
            && (b) != null
            && (a->X == b->X)
            && (a->Y == b->Y)
            && (a->W == b->W)
            && (a->H == b->H)
        )
            ? 1
            : 0;
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RectsEqual(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> a,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> b
    )
    {
        fixed (Rect* __dsl_b = b)
        fixed (Rect* __dsl_a = a)
        {
            return (MaybeBool<int>)(int)RectsEqual(__dsl_a, __dsl_b);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    public static int RectsEqualEpsilon(
        [NativeTypeName("const SDL_FRect *")] FRect* a,
        [NativeTypeName("const SDL_FRect *")] FRect* b,
        [NativeTypeName("const float")] float epsilon
    )
    {
        return (
            (a) != null
            && (b) != null
            && (
                (a == b)
                || (
                    (float.Abs(a->X - b->X) <= epsilon)
                    && (float.Abs(a->Y - b->Y) <= epsilon)
                    && (float.Abs(a->W - b->W) <= epsilon)
                    && (float.Abs(a->H - b->H) <= epsilon)
                )
            )
        )
            ? 1
            : 0;
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RectsEqualEpsilon(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> a,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> b,
        [NativeTypeName("const float")] float epsilon
    )
    {
        fixed (FRect* __dsl_b = b)
        fixed (FRect* __dsl_a = a)
        {
            return (MaybeBool<int>)(int)RectsEqualEpsilon(__dsl_a, __dsl_b, epsilon);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    public static int RectsEqualFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* a,
        [NativeTypeName("const SDL_FRect *")] FRect* b
    )
    {
        return RectsEqualEpsilon(a, b, 1.1920928955078125e-07F);
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RectsEqualFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> a,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> b
    )
    {
        fixed (FRect* __dsl_b = b)
        fixed (FRect* __dsl_a = a)
        {
            return (MaybeBool<int>)(int)RectsEqualFloat(__dsl_a, __dsl_b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.AcquireCameraFrame(
        SDL_Camera* camera,
        [NativeTypeName("Uint64 *")] ulong* timestampNS
    ) =>
        (
            (delegate* unmanaged<SDL_Camera*, ulong*, Surface*>)
                nativeContext.LoadFunction("AcquireCameraFrame", "SDL3")
        )(camera, timestampNS);

    [NativeFunction("SDL3", EntryPoint = "AcquireCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* AcquireCameraFrame(
        SDL_Camera* camera,
        [NativeTypeName("Uint64 *")] ulong* timestampNS
    ) => DllImport.AcquireCameraFrame(camera, timestampNS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.AcquireCameraFrame(
        Ref<SDL_Camera> camera,
        [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
    )
    {
        fixed (ulong* __dsl_timestampNS = timestampNS)
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            return (Surface*)((ISdl)this).AcquireCameraFrame(__dsl_camera, __dsl_timestampNS);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AcquireCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> AcquireCameraFrame(
        Ref<SDL_Camera> camera,
        [NativeTypeName("Uint64 *")] Ref<ulong> timestampNS
    ) => DllImport.AcquireCameraFrame(camera, timestampNS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<void*, Event*, int>, void*, int>)
                nativeContext.LoadFunction("AddEventWatch", "SDL3")
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "AddEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) => DllImport.AddEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (int)((ISdl)this).AddEventWatch(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    ) => DllImport.AddEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("AddGamepadMapping", "SDL3"))(
            mapping
        );

    [NativeFunction("SDL3", EntryPoint = "AddGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMapping([NativeTypeName("const char *")] sbyte* mapping) =>
        DllImport.AddGamepadMapping(mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping)
    {
        fixed (sbyte* __dsl_mapping = mapping)
        {
            return (int)((ISdl)this).AddGamepadMapping(__dsl_mapping);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMapping([NativeTypeName("const char *")] Ref<sbyte> mapping) =>
        DllImport.AddGamepadMapping(mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromFile([NativeTypeName("const char *")] sbyte* file) =>
        (
            (delegate* unmanaged<sbyte*, int>)
                nativeContext.LoadFunction("AddGamepadMappingsFromFile", "SDL3")
        )(file);

    [NativeFunction("SDL3", EntryPoint = "AddGamepadMappingsFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromFile([NativeTypeName("const char *")] sbyte* file) =>
        DllImport.AddGamepadMappingsFromFile(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromFile([NativeTypeName("const char *")] Ref<sbyte> file)
    {
        fixed (sbyte* __dsl_file = file)
        {
            return (int)((ISdl)this).AddGamepadMappingsFromFile(__dsl_file);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromFile(
        [NativeTypeName("const char *")] Ref<sbyte> file
    ) => DllImport.AddGamepadMappingsFromFile(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromIO(
        SDL_IOStream* src,
        [NativeTypeName("SDL_bool")] int closeio
    ) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int, int>)
                nativeContext.LoadFunction("AddGamepadMappingsFromIO", "SDL3")
        )(src, closeio);

    [NativeFunction("SDL3", EntryPoint = "AddGamepadMappingsFromIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromIO(
        SDL_IOStream* src,
        [NativeTypeName("SDL_bool")] int closeio
    ) => DllImport.AddGamepadMappingsFromIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddGamepadMappingsFromIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    )
    {
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (int)((ISdl)this).AddGamepadMappingsFromIO(__dsl_src, (int)closeio);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddGamepadMappingsFromIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddGamepadMappingsFromIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    ) => DllImport.AddGamepadMappingsFromIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                sbyte*,
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void>,
                void*,
                int>)
                nativeContext.LoadFunction("AddHintCallback", "SDL3")
        )(name, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "AddHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        void* userdata
    ) => DllImport.AddHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).AddHintCallback(__dsl_name, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        Ref userdata
    ) => DllImport.AddHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
        void* param2
    ) =>
        (
            (delegate* unmanaged<uint, delegate* unmanaged<uint, void*, uint>, void*, uint>)
                nativeContext.LoadFunction("AddTimer", "SDL3")
        )(interval, callback, param2);

    [return: NativeTypeName("SDL_TimerID")]
    [NativeFunction("SDL3", EntryPoint = "AddTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
        void* param2
    ) => DllImport.AddTimer(interval, callback, param2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
        Ref param2
    )
    {
        fixed (void* __dsl_param2 = param2)
        {
            return (uint)((ISdl)this).AddTimer(interval, callback, __dsl_param2);
        }
    }

    [return: NativeTypeName("SDL_TimerID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AddTimer(
        [NativeTypeName("Uint32")] uint interval,
        [NativeTypeName("SDL_TimerCallback")] delegate* unmanaged<uint, void*, uint> callback,
        Ref param2
    ) => DllImport.AddTimer(interval, callback, param2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddVulkanRenderSemaphores(
        SDL_Renderer* renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, uint, long, long, int>)
                nativeContext.LoadFunction("AddVulkanRenderSemaphores", "SDL3")
        )(renderer, wait_stage_mask, wait_semaphore, signal_semaphore);

    [NativeFunction("SDL3", EntryPoint = "AddVulkanRenderSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddVulkanRenderSemaphores(
        SDL_Renderer* renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        DllImport.AddVulkanRenderSemaphores(
            renderer,
            wait_stage_mask,
            wait_semaphore,
            signal_semaphore
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AddVulkanRenderSemaphores(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    )
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).AddVulkanRenderSemaphores(
                    __dsl_renderer,
                    wait_stage_mask,
                    wait_semaphore,
                    signal_semaphore
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AddVulkanRenderSemaphores")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AddVulkanRenderSemaphores(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("Uint32")] uint wait_stage_mask,
        [NativeTypeName("Sint64")] long wait_semaphore,
        [NativeTypeName("Sint64")] long signal_semaphore
    ) =>
        DllImport.AddVulkanRenderSemaphores(
            renderer,
            wait_stage_mask,
            wait_semaphore,
            signal_semaphore
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.AllocateEventMemory([NativeTypeName("size_t")] nuint size) =>
        (void*)((ISdl)this).AllocateEventMemoryRaw(size);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr AllocateEventMemory([NativeTypeName("size_t")] nuint size) =>
        DllImport.AllocateEventMemory(size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.AllocateEventMemoryRaw([NativeTypeName("size_t")] nuint size) =>
        (
            (delegate* unmanaged<nuint, void*>)
                nativeContext.LoadFunction("SDL_AllocateEventMemory", "SDL3")
        )(size);

    [NativeFunction("SDL3", EntryPoint = "SDL_AllocateEventMemory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* AllocateEventMemoryRaw([NativeTypeName("size_t")] nuint size) =>
        DllImport.AllocateEventMemoryRaw(size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicAdd(AtomicInt* a, int v) =>
        (
            (delegate* unmanaged<AtomicInt*, int, int>)
                nativeContext.LoadFunction("AtomicAdd", "SDL3")
        )(a, v);

    [NativeFunction("SDL3", EntryPoint = "AtomicAdd")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicAdd(AtomicInt* a, int v) => DllImport.AtomicAdd(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicAdd(Ref<AtomicInt> a, int v)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (int)((ISdl)this).AtomicAdd(__dsl_a, v);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicAdd")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicAdd(Ref<AtomicInt> a, int v) => DllImport.AtomicAdd(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicCompareAndSwap(AtomicInt* a, int oldval, int newval) =>
        (
            (delegate* unmanaged<AtomicInt*, int, int, int>)
                nativeContext.LoadFunction("AtomicCompareAndSwap", "SDL3")
        )(a, oldval, newval);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "AtomicCompareAndSwap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicCompareAndSwap(AtomicInt* a, int oldval, int newval) =>
        DllImport.AtomicCompareAndSwap(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.AtomicCompareAndSwap(Ref<AtomicInt> a, int oldval, int newval)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (MaybeBool<int>)(int)((ISdl)this).AtomicCompareAndSwap(__dsl_a, oldval, newval);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwap")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> AtomicCompareAndSwap(Ref<AtomicInt> a, int oldval, int newval) =>
        DllImport.AtomicCompareAndSwap(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicCompareAndSwapPointer(void** a, void* oldval, void* newval) =>
        (
            (delegate* unmanaged<void**, void*, void*, int>)
                nativeContext.LoadFunction("AtomicCompareAndSwapPointer", "SDL3")
        )(a, oldval, newval);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "AtomicCompareAndSwapPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicCompareAndSwapPointer(void** a, void* oldval, void* newval) =>
        DllImport.AtomicCompareAndSwapPointer(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.AtomicCompareAndSwapPointer(Ref2D a, Ref oldval, Ref newval)
    {
        fixed (void* __dsl_newval = newval)
        fixed (void* __dsl_oldval = oldval)
        fixed (void** __dsl_a = a)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).AtomicCompareAndSwapPointer(__dsl_a, __dsl_oldval, __dsl_newval);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicCompareAndSwapPointer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> AtomicCompareAndSwapPointer(Ref2D a, Ref oldval, Ref newval) =>
        DllImport.AtomicCompareAndSwapPointer(a, oldval, newval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicGet(AtomicInt* a) =>
        ((delegate* unmanaged<AtomicInt*, int>)nativeContext.LoadFunction("AtomicGet", "SDL3"))(a);

    [NativeFunction("SDL3", EntryPoint = "AtomicGet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicGet(AtomicInt* a) => DllImport.AtomicGet(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicGet(Ref<AtomicInt> a)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (int)((ISdl)this).AtomicGet(__dsl_a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicGet(Ref<AtomicInt> a) => DllImport.AtomicGet(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.AtomicGetPtr(void** a) =>
        ((delegate* unmanaged<void**, void*>)nativeContext.LoadFunction("AtomicGetPtr", "SDL3"))(a);

    [NativeFunction("SDL3", EntryPoint = "AtomicGetPtr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* AtomicGetPtr(void** a) => DllImport.AtomicGetPtr(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.AtomicGetPtr(Ref2D a)
    {
        fixed (void** __dsl_a = a)
        {
            return (void*)((ISdl)this).AtomicGetPtr(__dsl_a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicGetPtr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr AtomicGetPtr(Ref2D a) => DllImport.AtomicGetPtr(a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicSet(AtomicInt* a, int v) =>
        (
            (delegate* unmanaged<AtomicInt*, int, int>)
                nativeContext.LoadFunction("AtomicSet", "SDL3")
        )(a, v);

    [NativeFunction("SDL3", EntryPoint = "AtomicSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicSet(AtomicInt* a, int v) => DllImport.AtomicSet(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AtomicSet(Ref<AtomicInt> a, int v)
    {
        fixed (AtomicInt* __dsl_a = a)
        {
            return (int)((ISdl)this).AtomicSet(__dsl_a, v);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AtomicSet(Ref<AtomicInt> a, int v) => DllImport.AtomicSet(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.AtomicSetPtr(void** a, void* v) =>
        (
            (delegate* unmanaged<void**, void*, void*>)
                nativeContext.LoadFunction("AtomicSetPtr", "SDL3")
        )(a, v);

    [NativeFunction("SDL3", EntryPoint = "AtomicSetPtr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* AtomicSetPtr(void** a, void* v) => DllImport.AtomicSetPtr(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.AtomicSetPtr(Ref2D a, Ref v)
    {
        fixed (void* __dsl_v = v)
        fixed (void** __dsl_a = a)
        {
            return (void*)((ISdl)this).AtomicSetPtr(__dsl_a, __dsl_v);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AtomicSetPtr")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr AtomicSetPtr(Ref2D a, Ref v) => DllImport.AtomicSetPtr(a, v);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AttachVirtualJoystick(JoystickType type, int naxes, int nbuttons, int nhats) =>
        (
            (delegate* unmanaged<JoystickType, int, int, int, uint>)
                nativeContext.LoadFunction("AttachVirtualJoystick", "SDL3")
        )(type, naxes, nbuttons, nhats);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "AttachVirtualJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AttachVirtualJoystick(
        JoystickType type,
        int naxes,
        int nbuttons,
        int nhats
    ) => DllImport.AttachVirtualJoystick(type, naxes, nbuttons, nhats);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AttachVirtualJoystickEx(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
    ) =>
        (
            (delegate* unmanaged<VirtualJoystickDesc*, uint>)
                nativeContext.LoadFunction("AttachVirtualJoystickEx", "SDL3")
        )(desc);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "AttachVirtualJoystickEx")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AttachVirtualJoystickEx(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] VirtualJoystickDesc* desc
    ) => DllImport.AttachVirtualJoystickEx(desc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.AttachVirtualJoystickEx(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
    )
    {
        fixed (VirtualJoystickDesc* __dsl_desc = desc)
        {
            return (uint)((ISdl)this).AttachVirtualJoystickEx(__dsl_desc);
        }
    }

    [return: NativeTypeName("SDL_JoystickID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AttachVirtualJoystickEx")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint AttachVirtualJoystickEx(
        [NativeTypeName("const SDL_VirtualJoystickDesc *")] Ref<VirtualJoystickDesc> desc
    ) => DllImport.AttachVirtualJoystickEx(desc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.AudioDevicePaused([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (MaybeBool<int>)(int)((ISdl)this).AudioDevicePausedRaw(dev);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> AudioDevicePaused(
        [NativeTypeName("SDL_AudioDeviceID")] uint dev
    ) => DllImport.AudioDevicePaused(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        (
            (delegate* unmanaged<uint, int>)
                nativeContext.LoadFunction("SDL_AudioDevicePaused", "SDL3")
        )(dev);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_AudioDevicePaused")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int AudioDevicePausedRaw([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        DllImport.AudioDevicePausedRaw(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BindAudioStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        SDL_AudioStream* stream
    ) =>
        (
            (delegate* unmanaged<uint, SDL_AudioStream*, int>)
                nativeContext.LoadFunction("BindAudioStream", "SDL3")
        )(devid, stream);

    [NativeFunction("SDL3", EntryPoint = "BindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BindAudioStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        SDL_AudioStream* stream
    ) => DllImport.BindAudioStream(devid, stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BindAudioStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<SDL_AudioStream> stream
    )
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).BindAudioStream(devid, __dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BindAudioStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<SDL_AudioStream> stream
    ) => DllImport.BindAudioStream(devid, stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        SDL_AudioStream** streams,
        int num_streams
    ) =>
        (
            (delegate* unmanaged<uint, SDL_AudioStream**, int, int>)
                nativeContext.LoadFunction("BindAudioStreams", "SDL3")
        )(devid, streams, num_streams);

    [NativeFunction("SDL3", EntryPoint = "BindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        SDL_AudioStream** streams,
        int num_streams
    ) => DllImport.BindAudioStreams(devid, streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref2D<SDL_AudioStream> streams,
        int num_streams
    )
    {
        fixed (SDL_AudioStream** __dsl_streams = streams)
        {
            return (int)((ISdl)this).BindAudioStreams(devid, __dsl_streams, num_streams);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BindAudioStreams(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref2D<SDL_AudioStream> streams,
        int num_streams
    ) => DllImport.BindAudioStreams(devid, streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurface(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, int>)
                nativeContext.LoadFunction("BlitSurface", "SDL3")
        )(src, srcrect, dst, dstrect);

    [NativeFunction("SDL3", EntryPoint = "BlitSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurface(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        Rect* dstrect
    ) => DllImport.BlitSurface(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurface(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).BlitSurface(__dsl_src, __dsl_srcrect, __dsl_dst, __dsl_dstrect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurface(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        Ref<Rect> dstrect
    ) => DllImport.BlitSurface(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurfaceScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        Rect* dstrect,
        ScaleMode scaleMode
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, ScaleMode, int>)
                nativeContext.LoadFunction("BlitSurfaceScaled", "SDL3")
        )(src, srcrect, dst, dstrect, scaleMode);

    [NativeFunction("SDL3", EntryPoint = "BlitSurfaceScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurfaceScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        Rect* dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurfaceScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        Ref<Rect> dstrect,
        ScaleMode scaleMode
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).BlitSurfaceScaled(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurfaceScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        Ref<Rect> dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurfaceUnchecked(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, int>)
                nativeContext.LoadFunction("BlitSurfaceUnchecked", "SDL3")
        )(src, srcrect, dst, dstrect);

    [NativeFunction("SDL3", EntryPoint = "BlitSurfaceUnchecked")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurfaceUnchecked(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect
    ) => DllImport.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurfaceUnchecked(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).BlitSurfaceUnchecked(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUnchecked")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurfaceUnchecked(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect
    ) => DllImport.BlitSurfaceUnchecked(src, srcrect, dst, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurfaceUncheckedScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, ScaleMode, int>)
                nativeContext.LoadFunction("BlitSurfaceUncheckedScaled", "SDL3")
        )(src, srcrect, dst, dstrect, scaleMode);

    [NativeFunction("SDL3", EntryPoint = "BlitSurfaceUncheckedScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurfaceUncheckedScaled(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BlitSurfaceUncheckedScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).BlitSurfaceUncheckedScaled(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BlitSurfaceUncheckedScaled(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    ) => DllImport.BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BroadcastCondition(SDL_Condition* cond) =>
        (
            (delegate* unmanaged<SDL_Condition*, int>)
                nativeContext.LoadFunction("BroadcastCondition", "SDL3")
        )(cond);

    [NativeFunction("SDL3", EntryPoint = "BroadcastCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BroadcastCondition(SDL_Condition* cond) => DllImport.BroadcastCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.BroadcastCondition(Ref<SDL_Condition> cond)
    {
        fixed (SDL_Condition* __dsl_cond = cond)
        {
            return (int)((ISdl)this).BroadcastCondition(__dsl_cond);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_BroadcastCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int BroadcastCondition(Ref<SDL_Condition> cond) =>
        DllImport.BroadcastCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CaptureMouse([NativeTypeName("SDL_bool")] int enabled) =>
        ((delegate* unmanaged<int, int>)nativeContext.LoadFunction("CaptureMouse", "SDL3"))(
            enabled
        );

    [NativeFunction("SDL3", EntryPoint = "CaptureMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CaptureMouse([NativeTypeName("SDL_bool")] int enabled) =>
        DllImport.CaptureMouse(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CaptureMouse([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
        (int)((ISdl)this).CaptureMouse((int)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CaptureMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CaptureMouse([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
        DllImport.CaptureMouse(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CleanupTLS() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("CleanupTLS", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "CleanupTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CleanupTLS() => DllImport.CleanupTLS();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ClearAudioStream(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, int>)
                nativeContext.LoadFunction("ClearAudioStream", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "ClearAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ClearAudioStream(SDL_AudioStream* stream) =>
        DllImport.ClearAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ClearAudioStream(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).ClearAudioStream(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ClearAudioStream(Ref<SDL_AudioStream> stream) =>
        DllImport.ClearAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ClearClipboardData() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("ClearClipboardData", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ClearClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ClearClipboardData() => DllImport.ClearClipboardData();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ClearComposition() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("ClearComposition", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ClearComposition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ClearComposition() => DllImport.ClearComposition();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ClearError() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("ClearError", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ClearError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ClearError() => DllImport.ClearError();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, int>)
                nativeContext.LoadFunction("ClearProperty", "SDL3")
        )(props, name);

    [NativeFunction("SDL3", EntryPoint = "ClearProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.ClearProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).ClearProperty(props, __dsl_name);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ClearProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ClearProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.ClearProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        ((delegate* unmanaged<uint, void>)nativeContext.LoadFunction("CloseAudioDevice", "SDL3"))(
            devid
        );

    [NativeFunction("SDL3", EntryPoint = "CloseAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.CloseAudioDevice(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseCamera(SDL_Camera* camera) =>
        ((delegate* unmanaged<SDL_Camera*, void>)nativeContext.LoadFunction("CloseCamera", "SDL3"))(
            camera
        );

    [NativeFunction("SDL3", EntryPoint = "CloseCamera")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseCamera(SDL_Camera* camera) => DllImport.CloseCamera(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseCamera(Ref<SDL_Camera> camera)
    {
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            ((ISdl)this).CloseCamera(__dsl_camera);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseCamera")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseCamera(Ref<SDL_Camera> camera) => DllImport.CloseCamera(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseGamepad(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, void>)
                nativeContext.LoadFunction("CloseGamepad", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "CloseGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseGamepad(SDL_Gamepad* gamepad) => DllImport.CloseGamepad(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseGamepad(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            ((ISdl)this).CloseGamepad(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseGamepad(Ref<SDL_Gamepad> gamepad) => DllImport.CloseGamepad(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseHaptic(SDL_Haptic* haptic) =>
        ((delegate* unmanaged<SDL_Haptic*, void>)nativeContext.LoadFunction("CloseHaptic", "SDL3"))(
            haptic
        );

    [NativeFunction("SDL3", EntryPoint = "CloseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseHaptic(SDL_Haptic* haptic) => DllImport.CloseHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseHaptic(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            ((ISdl)this).CloseHaptic(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseHaptic(Ref<SDL_Haptic> haptic) => DllImport.CloseHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CloseIO(SDL_IOStream* context) =>
        ((delegate* unmanaged<SDL_IOStream*, int>)nativeContext.LoadFunction("CloseIO", "SDL3"))(
            context
        );

    [NativeFunction("SDL3", EntryPoint = "CloseIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CloseIO(SDL_IOStream* context) => DllImport.CloseIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CloseIO(Ref<SDL_IOStream> context)
    {
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (int)((ISdl)this).CloseIO(__dsl_context);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CloseIO(Ref<SDL_IOStream> context) => DllImport.CloseIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseJoystick(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, void>)
                nativeContext.LoadFunction("CloseJoystick", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "CloseJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseJoystick(SDL_Joystick* joystick) => DllImport.CloseJoystick(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseJoystick(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            ((ISdl)this).CloseJoystick(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseJoystick(Ref<SDL_Joystick> joystick) =>
        DllImport.CloseJoystick(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseSensor(SDL_Sensor* sensor) =>
        ((delegate* unmanaged<SDL_Sensor*, void>)nativeContext.LoadFunction("CloseSensor", "SDL3"))(
            sensor
        );

    [NativeFunction("SDL3", EntryPoint = "CloseSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseSensor(SDL_Sensor* sensor) => DllImport.CloseSensor(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.CloseSensor(Ref<SDL_Sensor> sensor)
    {
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            ((ISdl)this).CloseSensor(__dsl_sensor);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void CloseSensor(Ref<SDL_Sensor> sensor) => DllImport.CloseSensor(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CloseStorage(SDL_Storage* storage) =>
        (
            (delegate* unmanaged<SDL_Storage*, int>)
                nativeContext.LoadFunction("CloseStorage", "SDL3")
        )(storage);

    [NativeFunction("SDL3", EntryPoint = "CloseStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CloseStorage(SDL_Storage* storage) => DllImport.CloseStorage(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CloseStorage(Ref<SDL_Storage> storage)
    {
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)((ISdl)this).CloseStorage(__dsl_storage);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CloseStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CloseStorage(Ref<SDL_Storage> storage) => DllImport.CloseStorage(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    BlendMode ISdl.ComposeCustomBlendMode(
        BlendFactor srcColorFactor,
        BlendFactor dstColorFactor,
        BlendOperation colorOperation,
        BlendFactor srcAlphaFactor,
        BlendFactor dstAlphaFactor,
        BlendOperation alphaOperation
    ) =>
        (
            (delegate* unmanaged<
                BlendFactor,
                BlendFactor,
                BlendOperation,
                BlendFactor,
                BlendFactor,
                BlendOperation,
                BlendMode>)
                nativeContext.LoadFunction("ComposeCustomBlendMode", "SDL3")
        )(
            srcColorFactor,
            dstColorFactor,
            colorOperation,
            srcAlphaFactor,
            dstAlphaFactor,
            alphaOperation
        );

    [NativeFunction("SDL3", EntryPoint = "ComposeCustomBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static BlendMode ComposeCustomBlendMode(
        BlendFactor srcColorFactor,
        BlendFactor dstColorFactor,
        BlendOperation colorOperation,
        BlendFactor srcAlphaFactor,
        BlendFactor dstAlphaFactor,
        BlendOperation alphaOperation
    ) =>
        DllImport.ComposeCustomBlendMode(
            srcColorFactor,
            dstColorFactor,
            colorOperation,
            srcAlphaFactor,
            dstAlphaFactor,
            alphaOperation
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const Uint8 *")] byte* src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
        [NativeTypeName("Uint8 **")] byte** dst_data,
        int* dst_len
    ) =>
        (
            (delegate* unmanaged<AudioSpec*, byte*, int, AudioSpec*, byte**, int*, int>)
                nativeContext.LoadFunction("ConvertAudioSamples", "SDL3")
        )(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

    [NativeFunction("SDL3", EntryPoint = "ConvertAudioSamples")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const Uint8 *")] byte* src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec,
        [NativeTypeName("Uint8 **")] byte** dst_data,
        int* dst_len
    ) => DllImport.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
        Ref<int> dst_len
    )
    {
        fixed (int* __dsl_dst_len = dst_len)
        fixed (byte** __dsl_dst_data = dst_data)
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (byte* __dsl_src_data = src_data)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        {
            return (int)
                ((ISdl)this).ConvertAudioSamples(
                    __dsl_src_spec,
                    __dsl_src_data,
                    src_len,
                    __dsl_dst_spec,
                    __dsl_dst_data,
                    __dsl_dst_len
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertAudioSamples")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertAudioSamples(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const Uint8 *")] Ref<byte> src_data,
        int src_len,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> dst_data,
        Ref<int> dst_len
    ) => DllImport.ConvertAudioSamples(src_spec, src_data, src_len, dst_spec, dst_data, dst_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertEventToRenderCoordinates(SDL_Renderer* renderer, Event* @event) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Event*, int>)
                nativeContext.LoadFunction("ConvertEventToRenderCoordinates", "SDL3")
        )(renderer, @event);

    [NativeFunction("SDL3", EntryPoint = "ConvertEventToRenderCoordinates")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertEventToRenderCoordinates(SDL_Renderer* renderer, Event* @event) =>
        DllImport.ConvertEventToRenderCoordinates(renderer, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertEventToRenderCoordinates(Ref<SDL_Renderer> renderer, Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).ConvertEventToRenderCoordinates(__dsl_renderer, __dsl_event);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertEventToRenderCoordinates(
        Ref<SDL_Renderer> renderer,
        Ref<Event> @event
    ) => DllImport.ConvertEventToRenderCoordinates(renderer, @event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertPixels(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormatEnum dst_format,
        void* dst,
        int dst_pitch
    ) =>
        (
            (delegate* unmanaged<
                int,
                int,
                PixelFormatEnum,
                void*,
                int,
                PixelFormatEnum,
                void*,
                int,
                int>)
                nativeContext.LoadFunction("ConvertPixels", "SDL3")
        )(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

    [NativeFunction("SDL3", EntryPoint = "ConvertPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertPixels(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormatEnum dst_format,
        void* dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixels(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertPixels(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Ref dst,
        int dst_pitch
    )
    {
        fixed (void* __dsl_dst = dst)
        fixed (void* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).ConvertPixels(
                    width,
                    height,
                    src_format,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    __dsl_dst,
                    dst_pitch
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertPixels(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Ref dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixels(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormatEnum src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        void* dst,
        int dst_pitch
    ) =>
        (
            (delegate* unmanaged<
                int,
                int,
                PixelFormatEnum,
                Colorspace,
                uint,
                void*,
                int,
                PixelFormatEnum,
                Colorspace,
                uint,
                void*,
                int,
                int>)
                nativeContext.LoadFunction("ConvertPixelsAndColorspace", "SDL3")
        )(
            width,
            height,
            src_format,
            src_colorspace,
            src_properties,
            src,
            src_pitch,
            dst_format,
            dst_colorspace,
            dst_properties,
            dst,
            dst_pitch
        );

    [NativeFunction("SDL3", EntryPoint = "ConvertPixelsAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormatEnum src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        void* dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixelsAndColorspace(
            width,
            height,
            src_format,
            src_colorspace,
            src_properties,
            src,
            src_pitch,
            dst_format,
            dst_colorspace,
            dst_properties,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormatEnum src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        Ref dst,
        int dst_pitch
    )
    {
        fixed (void* __dsl_dst = dst)
        fixed (void* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).ConvertPixelsAndColorspace(
                    width,
                    height,
                    src_format,
                    src_colorspace,
                    src_properties,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    dst_colorspace,
                    dst_properties,
                    __dsl_dst,
                    dst_pitch
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertPixelsAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ConvertPixelsAndColorspace(
        int width,
        int height,
        PixelFormatEnum src_format,
        Colorspace src_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint src_properties,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Colorspace dst_colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint dst_properties,
        Ref dst,
        int dst_pitch
    ) =>
        DllImport.ConvertPixelsAndColorspace(
            width,
            height,
            src_format,
            src_colorspace,
            src_properties,
            src,
            src_pitch,
            dst_format,
            dst_colorspace,
            dst_properties,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.ConvertSurface(
        Surface* surface,
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format
    ) =>
        (
            (delegate* unmanaged<Surface*, PixelFormat*, Surface*>)
                nativeContext.LoadFunction("ConvertSurface", "SDL3")
        )(surface, format);

    [NativeFunction("SDL3", EntryPoint = "ConvertSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* ConvertSurface(
        Surface* surface,
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format
    ) => DllImport.ConvertSurface(surface, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.ConvertSurface(
        Ref<Surface> surface,
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format
    )
    {
        fixed (PixelFormat* __dsl_format = format)
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)((ISdl)this).ConvertSurface(__dsl_surface, __dsl_format);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> ConvertSurface(
        Ref<Surface> surface,
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format
    ) => DllImport.ConvertSurface(surface, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.ConvertSurfaceFormat(Surface* surface, PixelFormatEnum pixel_format) =>
        (
            (delegate* unmanaged<Surface*, PixelFormatEnum, Surface*>)
                nativeContext.LoadFunction("ConvertSurfaceFormat", "SDL3")
        )(surface, pixel_format);

    [NativeFunction("SDL3", EntryPoint = "ConvertSurfaceFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* ConvertSurfaceFormat(Surface* surface, PixelFormatEnum pixel_format) =>
        DllImport.ConvertSurfaceFormat(surface, pixel_format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.ConvertSurfaceFormat(Ref<Surface> surface, PixelFormatEnum pixel_format)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)((ISdl)this).ConvertSurfaceFormat(__dsl_surface, pixel_format);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> ConvertSurfaceFormat(
        Ref<Surface> surface,
        PixelFormatEnum pixel_format
    ) => DllImport.ConvertSurfaceFormat(surface, pixel_format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.ConvertSurfaceFormatAndColorspace(
        Surface* surface,
        PixelFormatEnum pixel_format,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<Surface*, PixelFormatEnum, Colorspace, uint, Surface*>)
                nativeContext.LoadFunction("ConvertSurfaceFormatAndColorspace", "SDL3")
        )(surface, pixel_format, colorspace, props);

    [NativeFunction("SDL3", EntryPoint = "ConvertSurfaceFormatAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* ConvertSurfaceFormatAndColorspace(
        Surface* surface,
        PixelFormatEnum pixel_format,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.ConvertSurfaceFormatAndColorspace(surface, pixel_format, colorspace, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.ConvertSurfaceFormatAndColorspace(
        Ref<Surface> surface,
        PixelFormatEnum pixel_format,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)
                ((ISdl)this).ConvertSurfaceFormatAndColorspace(
                    __dsl_surface,
                    pixel_format,
                    colorspace,
                    props
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ConvertSurfaceFormatAndColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> ConvertSurfaceFormatAndColorspace(
        Ref<Surface> surface,
        PixelFormatEnum pixel_format,
        Colorspace colorspace,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.ConvertSurfaceFormatAndColorspace(surface, pixel_format, colorspace, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CopyProperties(
        [NativeTypeName("SDL_PropertiesID")] uint src,
        [NativeTypeName("SDL_PropertiesID")] uint dst
    ) =>
        (
            (delegate* unmanaged<uint, uint, int>)
                nativeContext.LoadFunction("CopyProperties", "SDL3")
        )(src, dst);

    [NativeFunction("SDL3", EntryPoint = "CopyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CopyProperties(
        [NativeTypeName("SDL_PropertiesID")] uint src,
        [NativeTypeName("SDL_PropertiesID")] uint dst
    ) => DllImport.CopyProperties(src, dst);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_AudioStream* ISdl.CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) =>
        (
            (delegate* unmanaged<AudioSpec*, AudioSpec*, SDL_AudioStream*>)
                nativeContext.LoadFunction("CreateAudioStream", "SDL3")
        )(src_spec, dst_spec);

    [NativeFunction("SDL3", EntryPoint = "CreateAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_AudioStream* CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) => DllImport.CreateAudioStream(src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_AudioStream> ISdl.CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    )
    {
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        {
            return (SDL_AudioStream*)((ISdl)this).CreateAudioStream(__dsl_src_spec, __dsl_dst_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_AudioStream> CreateAudioStream(
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    ) => DllImport.CreateAudioStream(src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Cursor* ISdl.CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
        (
            (delegate* unmanaged<Surface*, int, int, SDL_Cursor*>)
                nativeContext.LoadFunction("CreateColorCursor", "SDL3")
        )(surface, hot_x, hot_y);

    [NativeFunction("SDL3", EntryPoint = "CreateColorCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Cursor* CreateColorCursor(Surface* surface, int hot_x, int hot_y) =>
        DllImport.CreateColorCursor(surface, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Cursor> ISdl.CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (SDL_Cursor*)((ISdl)this).CreateColorCursor(__dsl_surface, hot_x, hot_y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateColorCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Cursor> CreateColorCursor(Ref<Surface> surface, int hot_x, int hot_y) =>
        DllImport.CreateColorCursor(surface, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Condition> ISdl.CreateCondition() => (SDL_Condition*)((ISdl)this).CreateConditionRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Condition> CreateCondition() => DllImport.CreateCondition();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Condition* ISdl.CreateConditionRaw() =>
        (
            (delegate* unmanaged<SDL_Condition*>)
                nativeContext.LoadFunction("SDL_CreateCondition", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Condition* CreateConditionRaw() => DllImport.CreateConditionRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Cursor* ISdl.CreateCursor(
        [NativeTypeName("const Uint8 *")] byte* data,
        [NativeTypeName("const Uint8 *")] byte* mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    ) =>
        (
            (delegate* unmanaged<byte*, byte*, int, int, int, int, SDL_Cursor*>)
                nativeContext.LoadFunction("CreateCursor", "SDL3")
        )(data, mask, w, h, hot_x, hot_y);

    [NativeFunction("SDL3", EntryPoint = "CreateCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Cursor* CreateCursor(
        [NativeTypeName("const Uint8 *")] byte* data,
        [NativeTypeName("const Uint8 *")] byte* mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    ) => DllImport.CreateCursor(data, mask, w, h, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Cursor> ISdl.CreateCursor(
        [NativeTypeName("const Uint8 *")] Ref<byte> data,
        [NativeTypeName("const Uint8 *")] Ref<byte> mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    )
    {
        fixed (byte* __dsl_mask = mask)
        fixed (byte* __dsl_data = data)
        {
            return (SDL_Cursor*)
                ((ISdl)this).CreateCursor(__dsl_data, __dsl_mask, w, h, hot_x, hot_y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Cursor> CreateCursor(
        [NativeTypeName("const Uint8 *")] Ref<byte> data,
        [NativeTypeName("const Uint8 *")] Ref<byte> mask,
        int w,
        int h,
        int hot_x,
        int hot_y
    ) => DllImport.CreateCursor(data, mask, w, h, hot_x, hot_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("CreateDirectory", "SDL3"))(
            path
        );

    [NativeFunction("SDL3", EntryPoint = "CreateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateDirectory([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.CreateDirectory(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (int)((ISdl)this).CreateDirectory(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateDirectory([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.CreateDirectory(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateHapticEffect(
        SDL_Haptic* haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) =>
        (
            (delegate* unmanaged<SDL_Haptic*, HapticEffect*, int>)
                nativeContext.LoadFunction("CreateHapticEffect", "SDL3")
        )(haptic, effect);

    [NativeFunction("SDL3", EntryPoint = "CreateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateHapticEffect(
        SDL_Haptic* haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) => DllImport.CreateHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateHapticEffect(
        Ref<SDL_Haptic> haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    )
    {
        fixed (HapticEffect* __dsl_effect = effect)
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).CreateHapticEffect(__dsl_haptic, __dsl_effect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateHapticEffect(
        Ref<SDL_Haptic> haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    ) => DllImport.CreateHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Mutex> ISdl.CreateMutex() => (SDL_Mutex*)((ISdl)this).CreateMutexRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Mutex> CreateMutex() => DllImport.CreateMutex();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Mutex* ISdl.CreateMutexRaw() =>
        ((delegate* unmanaged<SDL_Mutex*>)nativeContext.LoadFunction("SDL_CreateMutex", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Mutex* CreateMutexRaw() => DllImport.CreateMutexRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Palette> ISdl.CreatePalette(int ncolors) =>
        (Palette*)((ISdl)this).CreatePaletteRaw(ncolors);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Palette> CreatePalette(int ncolors) => DllImport.CreatePalette(ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Palette* ISdl.CreatePaletteRaw(int ncolors) =>
        (
            (delegate* unmanaged<int, Palette*>)
                nativeContext.LoadFunction("SDL_CreatePalette", "SDL3")
        )(ncolors);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Palette* CreatePaletteRaw(int ncolors) => DllImport.CreatePaletteRaw(ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<PixelFormat> ISdl.CreatePixelFormat(PixelFormatEnum pixel_format) =>
        (PixelFormat*)((ISdl)this).CreatePixelFormatRaw(pixel_format);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<PixelFormat> CreatePixelFormat(PixelFormatEnum pixel_format) =>
        DllImport.CreatePixelFormat(pixel_format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PixelFormat* ISdl.CreatePixelFormatRaw(PixelFormatEnum pixel_format) =>
        (
            (delegate* unmanaged<PixelFormatEnum, PixelFormat*>)
                nativeContext.LoadFunction("SDL_CreatePixelFormat", "SDL3")
        )(pixel_format);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PixelFormat* CreatePixelFormatRaw(PixelFormatEnum pixel_format) =>
        DllImport.CreatePixelFormatRaw(pixel_format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.CreatePopupWindow(
        SDL_Window* parent,
        int offset_x,
        int offset_y,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int, int, int, uint, SDL_Window*>)
                nativeContext.LoadFunction("CreatePopupWindow", "SDL3")
        )(parent, offset_x, offset_y, w, h, flags);

    [NativeFunction("SDL3", EntryPoint = "CreatePopupWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* CreatePopupWindow(
        SDL_Window* parent,
        int offset_x,
        int offset_y,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    ) => DllImport.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.CreatePopupWindow(
        Ref<SDL_Window> parent,
        int offset_x,
        int offset_y,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    )
    {
        fixed (SDL_Window* __dsl_parent = parent)
        {
            return (SDL_Window*)
                ((ISdl)this).CreatePopupWindow(__dsl_parent, offset_x, offset_y, w, h, flags);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreatePopupWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> CreatePopupWindow(
        Ref<SDL_Window> parent,
        int offset_x,
        int offset_y,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    ) => DllImport.CreatePopupWindow(parent, offset_x, offset_y, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.CreateProperties() =>
        ((delegate* unmanaged<uint>)nativeContext.LoadFunction("CreateProperties", "SDL3"))();

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "CreateProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint CreateProperties() => DllImport.CreateProperties();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Renderer* ISdl.CreateRenderer(
        SDL_Window* window,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Uint32")] uint flags
    ) =>
        (
            (delegate* unmanaged<SDL_Window*, sbyte*, uint, SDL_Renderer*>)
                nativeContext.LoadFunction("CreateRenderer", "SDL3")
        )(window, name, flags);

    [NativeFunction("SDL3", EntryPoint = "CreateRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Renderer* CreateRenderer(
        SDL_Window* window,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Uint32")] uint flags
    ) => DllImport.CreateRenderer(window, name, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Renderer> ISdl.CreateRenderer(
        Ref<SDL_Window> window,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Uint32")] uint flags
    )
    {
        fixed (sbyte* __dsl_name = name)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (SDL_Renderer*)((ISdl)this).CreateRenderer(__dsl_window, __dsl_name, flags);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Renderer> CreateRenderer(
        Ref<SDL_Window> window,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Uint32")] uint flags
    ) => DllImport.CreateRenderer(window, name, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Renderer> ISdl.CreateRendererWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => (SDL_Renderer*)((ISdl)this).CreateRendererWithPropertiesRaw(props);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Renderer> CreateRendererWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateRendererWithProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Renderer* ISdl.CreateRendererWithPropertiesRaw(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<uint, SDL_Renderer*>)
                nativeContext.LoadFunction("SDL_CreateRendererWithProperties", "SDL3")
        )(props);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRendererWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Renderer* CreateRendererWithPropertiesRaw(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateRendererWithPropertiesRaw(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_RWLock> ISdl.CreateRWLock() => (SDL_RWLock*)((ISdl)this).CreateRWLockRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_RWLock> CreateRWLock() => DllImport.CreateRWLock();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_RWLock* ISdl.CreateRWLockRaw() =>
        (
            (delegate* unmanaged<SDL_RWLock*>)nativeContext.LoadFunction("SDL_CreateRWLock", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_RWLock* CreateRWLockRaw() => DllImport.CreateRWLockRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Semaphore> ISdl.CreateSemaphore([NativeTypeName("Uint32")] uint initial_value) =>
        (SDL_Semaphore*)((ISdl)this).CreateSemaphoreRaw(initial_value);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Semaphore> CreateSemaphore(
        [NativeTypeName("Uint32")] uint initial_value
    ) => DllImport.CreateSemaphore(initial_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Semaphore* ISdl.CreateSemaphoreRaw([NativeTypeName("Uint32")] uint initial_value) =>
        (
            (delegate* unmanaged<uint, SDL_Semaphore*>)
                nativeContext.LoadFunction("SDL_CreateSemaphore", "SDL3")
        )(initial_value);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Semaphore* CreateSemaphoreRaw(
        [NativeTypeName("Uint32")] uint initial_value
    ) => DllImport.CreateSemaphoreRaw(initial_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Renderer* ISdl.CreateSoftwareRenderer(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, SDL_Renderer*>)
                nativeContext.LoadFunction("CreateSoftwareRenderer", "SDL3")
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "CreateSoftwareRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Renderer* CreateSoftwareRenderer(Surface* surface) =>
        DllImport.CreateSoftwareRenderer(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Renderer> ISdl.CreateSoftwareRenderer(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (SDL_Renderer*)((ISdl)this).CreateSoftwareRenderer(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSoftwareRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Renderer> CreateSoftwareRenderer(Ref<Surface> surface) =>
        DllImport.CreateSoftwareRenderer(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateStorageDirectory(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, int>)
                nativeContext.LoadFunction("CreateStorageDirectory", "SDL3")
        )(storage, path);

    [NativeFunction("SDL3", EntryPoint = "CreateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateStorageDirectory(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path
    ) => DllImport.CreateStorageDirectory(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateStorageDirectory(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    )
    {
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)((ISdl)this).CreateStorageDirectory(__dsl_storage, __dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateStorageDirectory(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.CreateStorageDirectory(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.CreateSurface(int width, int height, PixelFormatEnum format) =>
        (Surface*)((ISdl)this).CreateSurfaceRaw(width, height, format);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> CreateSurface(int width, int height, PixelFormatEnum format) =>
        DllImport.CreateSurface(width, height, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.CreateSurfaceFrom(
        void* pixels,
        int width,
        int height,
        int pitch,
        PixelFormatEnum format
    ) =>
        (
            (delegate* unmanaged<void*, int, int, int, PixelFormatEnum, Surface*>)
                nativeContext.LoadFunction("CreateSurfaceFrom", "SDL3")
        )(pixels, width, height, pitch, format);

    [NativeFunction("SDL3", EntryPoint = "CreateSurfaceFrom")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* CreateSurfaceFrom(
        void* pixels,
        int width,
        int height,
        int pitch,
        PixelFormatEnum format
    ) => DllImport.CreateSurfaceFrom(pixels, width, height, pitch, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.CreateSurfaceFrom(
        Ref pixels,
        int width,
        int height,
        int pitch,
        PixelFormatEnum format
    )
    {
        fixed (void* __dsl_pixels = pixels)
        {
            return (Surface*)
                ((ISdl)this).CreateSurfaceFrom(__dsl_pixels, width, height, pitch, format);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurfaceFrom")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> CreateSurfaceFrom(
        Ref pixels,
        int width,
        int height,
        int pitch,
        PixelFormatEnum format
    ) => DllImport.CreateSurfaceFrom(pixels, width, height, pitch, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.CreateSurfaceRaw(int width, int height, PixelFormatEnum format) =>
        (
            (delegate* unmanaged<int, int, PixelFormatEnum, Surface*>)
                nativeContext.LoadFunction("SDL_CreateSurface", "SDL3")
        )(width, height, format);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* CreateSurfaceRaw(int width, int height, PixelFormatEnum format) =>
        DllImport.CreateSurfaceRaw(width, height, format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Cursor> ISdl.CreateSystemCursor(SystemCursor id) =>
        (SDL_Cursor*)((ISdl)this).CreateSystemCursorRaw(id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Cursor> CreateSystemCursor(SystemCursor id) =>
        DllImport.CreateSystemCursor(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Cursor* ISdl.CreateSystemCursorRaw(SystemCursor id) =>
        (
            (delegate* unmanaged<SystemCursor, SDL_Cursor*>)
                nativeContext.LoadFunction("SDL_CreateSystemCursor", "SDL3")
        )(id);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateSystemCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Cursor* CreateSystemCursorRaw(SystemCursor id) =>
        DllImport.CreateSystemCursorRaw(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Texture* ISdl.CreateTexture(
        SDL_Renderer* renderer,
        PixelFormatEnum format,
        int access,
        int w,
        int h
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, PixelFormatEnum, int, int, int, SDL_Texture*>)
                nativeContext.LoadFunction("CreateTexture", "SDL3")
        )(renderer, format, access, w, h);

    [NativeFunction("SDL3", EntryPoint = "CreateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Texture* CreateTexture(
        SDL_Renderer* renderer,
        PixelFormatEnum format,
        int access,
        int w,
        int h
    ) => DllImport.CreateTexture(renderer, format, access, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Texture> ISdl.CreateTexture(
        Ref<SDL_Renderer> renderer,
        PixelFormatEnum format,
        int access,
        int w,
        int h
    )
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (SDL_Texture*)((ISdl)this).CreateTexture(__dsl_renderer, format, access, w, h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Texture> CreateTexture(
        Ref<SDL_Renderer> renderer,
        PixelFormatEnum format,
        int access,
        int w,
        int h
    ) => DllImport.CreateTexture(renderer, format, access, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Texture* ISdl.CreateTextureFromSurface(SDL_Renderer* renderer, Surface* surface) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Surface*, SDL_Texture*>)
                nativeContext.LoadFunction("CreateTextureFromSurface", "SDL3")
        )(renderer, surface);

    [NativeFunction("SDL3", EntryPoint = "CreateTextureFromSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Texture* CreateTextureFromSurface(SDL_Renderer* renderer, Surface* surface) =>
        DllImport.CreateTextureFromSurface(renderer, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Texture> ISdl.CreateTextureFromSurface(Ref<SDL_Renderer> renderer, Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (SDL_Texture*)
                ((ISdl)this).CreateTextureFromSurface(__dsl_renderer, __dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureFromSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Texture> CreateTextureFromSurface(
        Ref<SDL_Renderer> renderer,
        Ref<Surface> surface
    ) => DllImport.CreateTextureFromSurface(renderer, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Texture* ISdl.CreateTextureWithProperties(
        SDL_Renderer* renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, uint, SDL_Texture*>)
                nativeContext.LoadFunction("CreateTextureWithProperties", "SDL3")
        )(renderer, props);

    [NativeFunction("SDL3", EntryPoint = "CreateTextureWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Texture* CreateTextureWithProperties(
        SDL_Renderer* renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateTextureWithProperties(renderer, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Texture> ISdl.CreateTextureWithProperties(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (SDL_Texture*)((ISdl)this).CreateTextureWithProperties(__dsl_renderer, props);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateTextureWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Texture> CreateTextureWithProperties(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateTextureWithProperties(renderer, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Thread* ISdl.CreateThread(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] sbyte* name,
        void* data
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<void*, int>, sbyte*, void*, SDL_Thread*>)
                nativeContext.LoadFunction("CreateThread", "SDL3")
        )(fn, name, data);

    [NativeFunction("SDL3", EntryPoint = "CreateThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Thread* CreateThread(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] sbyte* name,
        void* data
    ) => DllImport.CreateThread(fn, name, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Thread> ISdl.CreateThread(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref data
    )
    {
        fixed (void* __dsl_data = data)
        fixed (sbyte* __dsl_name = name)
        {
            return (SDL_Thread*)((ISdl)this).CreateThread(fn, __dsl_name, __dsl_data);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Thread> CreateThread(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref data
    ) => DllImport.CreateThread(fn, name, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Thread* ISdl.CreateThreadWithStackSize(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const size_t")] nuint stacksize,
        void* data
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, int>,
                sbyte*,
                nuint,
                void*,
                SDL_Thread*>)
                nativeContext.LoadFunction("CreateThreadWithStackSize", "SDL3")
        )(fn, name, stacksize, data);

    [NativeFunction("SDL3", EntryPoint = "CreateThreadWithStackSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Thread* CreateThreadWithStackSize(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const size_t")] nuint stacksize,
        void* data
    ) => DllImport.CreateThreadWithStackSize(fn, name, stacksize, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Thread> ISdl.CreateThreadWithStackSize(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const size_t")] nuint stacksize,
        Ref data
    )
    {
        fixed (void* __dsl_data = data)
        fixed (sbyte* __dsl_name = name)
        {
            return (SDL_Thread*)
                ((ISdl)this).CreateThreadWithStackSize(fn, __dsl_name, stacksize, __dsl_data);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateThreadWithStackSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Thread> CreateThreadWithStackSize(
        [NativeTypeName("SDL_ThreadFunction")] delegate* unmanaged<void*, int> fn,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const size_t")] nuint stacksize,
        Ref data
    ) => DllImport.CreateThreadWithStackSize(fn, name, stacksize, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.CreateTLS() =>
        ((delegate* unmanaged<uint>)nativeContext.LoadFunction("CreateTLS", "SDL3"))();

    [return: NativeTypeName("SDL_TLSID")]
    [NativeFunction("SDL3", EntryPoint = "CreateTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint CreateTLS() => DllImport.CreateTLS();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.CreateWindow(
        [NativeTypeName("const char *")] sbyte* title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    ) =>
        (
            (delegate* unmanaged<sbyte*, int, int, uint, SDL_Window*>)
                nativeContext.LoadFunction("CreateWindow", "SDL3")
        )(title, w, h, flags);

    [NativeFunction("SDL3", EntryPoint = "CreateWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* CreateWindow(
        [NativeTypeName("const char *")] sbyte* title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    ) => DllImport.CreateWindow(title, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.CreateWindow(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    )
    {
        fixed (sbyte* __dsl_title = title)
        {
            return (SDL_Window*)((ISdl)this).CreateWindow(__dsl_title, w, h, flags);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> CreateWindow(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int w,
        int h,
        [NativeTypeName("SDL_WindowFlags")] uint flags
    ) => DllImport.CreateWindow(title, w, h, flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateWindowAndRenderer(
        [NativeTypeName("const char *")] sbyte* title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] uint window_flags,
        SDL_Window** window,
        SDL_Renderer** renderer
    ) =>
        (
            (delegate* unmanaged<sbyte*, int, int, uint, SDL_Window**, SDL_Renderer**, int>)
                nativeContext.LoadFunction("CreateWindowAndRenderer", "SDL3")
        )(title, width, height, window_flags, window, renderer);

    [NativeFunction("SDL3", EntryPoint = "CreateWindowAndRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateWindowAndRenderer(
        [NativeTypeName("const char *")] sbyte* title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] uint window_flags,
        SDL_Window** window,
        SDL_Renderer** renderer
    ) => DllImport.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CreateWindowAndRenderer(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] uint window_flags,
        Ref2D<SDL_Window> window,
        Ref2D<SDL_Renderer> renderer
    )
    {
        fixed (SDL_Renderer** __dsl_renderer = renderer)
        fixed (SDL_Window** __dsl_window = window)
        fixed (sbyte* __dsl_title = title)
        {
            return (int)
                ((ISdl)this).CreateWindowAndRenderer(
                    __dsl_title,
                    width,
                    height,
                    window_flags,
                    __dsl_window,
                    __dsl_renderer
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowAndRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CreateWindowAndRenderer(
        [NativeTypeName("const char *")] Ref<sbyte> title,
        int width,
        int height,
        [NativeTypeName("SDL_WindowFlags")] uint window_flags,
        Ref2D<SDL_Window> window,
        Ref2D<SDL_Renderer> renderer
    ) => DllImport.CreateWindowAndRenderer(title, width, height, window_flags, window, renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.CreateWindowWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => (SDL_Window*)((ISdl)this).CreateWindowWithPropertiesRaw(props);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> CreateWindowWithProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateWindowWithProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.CreateWindowWithPropertiesRaw(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<uint, SDL_Window*>)
                nativeContext.LoadFunction("SDL_CreateWindowWithProperties", "SDL3")
        )(props);

    [NativeFunction("SDL3", EntryPoint = "SDL_CreateWindowWithProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* CreateWindowWithPropertiesRaw(
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.CreateWindowWithPropertiesRaw(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.CursorVisible() => (MaybeBool<int>)(int)((ISdl)this).CursorVisibleRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> CursorVisible() => DllImport.CursorVisible();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.CursorVisibleRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_CursorVisible", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_CursorVisible")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int CursorVisibleRaw() => DllImport.CursorVisibleRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
        [NativeTypeName("SDL_Time *")] long* ticks
    ) =>
        (
            (delegate* unmanaged<DateTime*, long*, int>)
                nativeContext.LoadFunction("DateTimeToTime", "SDL3")
        )(dt, ticks);

    [NativeFunction("SDL3", EntryPoint = "DateTimeToTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] DateTime* dt,
        [NativeTypeName("SDL_Time *")] long* ticks
    ) => DllImport.DateTimeToTime(dt, ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
        [NativeTypeName("SDL_Time *")] Ref<long> ticks
    )
    {
        fixed (long* __dsl_ticks = ticks)
        fixed (DateTime* __dsl_dt = dt)
        {
            return (int)((ISdl)this).DateTimeToTime(__dsl_dt, __dsl_ticks);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DateTimeToTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int DateTimeToTime(
        [NativeTypeName("const SDL_DateTime *")] Ref<DateTime> dt,
        [NativeTypeName("SDL_Time *")] Ref<long> ticks
    ) => DllImport.DateTimeToTime(dt, ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.Delay([NativeTypeName("Uint32")] uint ms) =>
        ((delegate* unmanaged<uint, void>)nativeContext.LoadFunction("Delay", "SDL3"))(ms);

    [NativeFunction("SDL3", EntryPoint = "Delay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void Delay([NativeTypeName("Uint32")] uint ms) => DllImport.Delay(ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelayNS([NativeTypeName("Uint64")] ulong ns) =>
        ((delegate* unmanaged<ulong, void>)nativeContext.LoadFunction("DelayNS", "SDL3"))(ns);

    [NativeFunction("SDL3", EntryPoint = "DelayNS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelayNS([NativeTypeName("Uint64")] ulong ns) => DllImport.DelayNS(ns);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<void*, Event*, int>, void*, void>)
                nativeContext.LoadFunction("DelEventWatch", "SDL3")
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "DelEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) => DllImport.DelEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).DelEventWatch(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DelEventWatch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelEventWatch(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    ) => DllImport.DelEventWatch(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                sbyte*,
                delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void>,
                void*,
                void>)
                nativeContext.LoadFunction("DelHintCallback", "SDL3")
        )(name, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "DelHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelHintCallback(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        void* userdata
    ) => DllImport.DelHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DelHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_name = name)
        {
            ((ISdl)this).DelHintCallback(__dsl_name, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DelHintCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DelHintCallback(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_HintCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, sbyte*, void> callback,
        Ref userdata
    ) => DllImport.DelHintCallback(name, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyAudioStream(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, void>)
                nativeContext.LoadFunction("DestroyAudioStream", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "DestroyAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAudioStream(SDL_AudioStream* stream) =>
        DllImport.DestroyAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyAudioStream(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            ((ISdl)this).DestroyAudioStream(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyAudioStream(Ref<SDL_AudioStream> stream) =>
        DllImport.DestroyAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyCondition(SDL_Condition* cond) =>
        (
            (delegate* unmanaged<SDL_Condition*, void>)
                nativeContext.LoadFunction("DestroyCondition", "SDL3")
        )(cond);

    [NativeFunction("SDL3", EntryPoint = "DestroyCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCondition(SDL_Condition* cond) => DllImport.DestroyCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyCondition(Ref<SDL_Condition> cond)
    {
        fixed (SDL_Condition* __dsl_cond = cond)
        {
            ((ISdl)this).DestroyCondition(__dsl_cond);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCondition(Ref<SDL_Condition> cond) =>
        DllImport.DestroyCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyCursor(SDL_Cursor* cursor) =>
        (
            (delegate* unmanaged<SDL_Cursor*, void>)
                nativeContext.LoadFunction("DestroyCursor", "SDL3")
        )(cursor);

    [NativeFunction("SDL3", EntryPoint = "DestroyCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCursor(SDL_Cursor* cursor) => DllImport.DestroyCursor(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyCursor(Ref<SDL_Cursor> cursor)
    {
        fixed (SDL_Cursor* __dsl_cursor = cursor)
        {
            ((ISdl)this).DestroyCursor(__dsl_cursor);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyCursor(Ref<SDL_Cursor> cursor) => DllImport.DestroyCursor(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyHapticEffect(SDL_Haptic* haptic, int effect) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, void>)
                nativeContext.LoadFunction("DestroyHapticEffect", "SDL3")
        )(haptic, effect);

    [NativeFunction("SDL3", EntryPoint = "DestroyHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyHapticEffect(SDL_Haptic* haptic, int effect) =>
        DllImport.DestroyHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyHapticEffect(Ref<SDL_Haptic> haptic, int effect)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            ((ISdl)this).DestroyHapticEffect(__dsl_haptic, effect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyHapticEffect(Ref<SDL_Haptic> haptic, int effect) =>
        DllImport.DestroyHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyMutex(SDL_Mutex* mutex) =>
        ((delegate* unmanaged<SDL_Mutex*, void>)nativeContext.LoadFunction("DestroyMutex", "SDL3"))(
            mutex
        );

    [NativeFunction("SDL3", EntryPoint = "DestroyMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMutex(SDL_Mutex* mutex) => DllImport.DestroyMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyMutex(Ref<SDL_Mutex> mutex)
    {
        fixed (SDL_Mutex* __dsl_mutex = mutex)
        {
            ((ISdl)this).DestroyMutex(__dsl_mutex);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyMutex(Ref<SDL_Mutex> mutex) => DllImport.DestroyMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyPalette(Palette* palette) =>
        ((delegate* unmanaged<Palette*, void>)nativeContext.LoadFunction("DestroyPalette", "SDL3"))(
            palette
        );

    [NativeFunction("SDL3", EntryPoint = "DestroyPalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPalette(Palette* palette) => DllImport.DestroyPalette(palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyPalette(Ref<Palette> palette)
    {
        fixed (Palette* __dsl_palette = palette)
        {
            ((ISdl)this).DestroyPalette(__dsl_palette);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPalette(Ref<Palette> palette) => DllImport.DestroyPalette(palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyPixelFormat(PixelFormat* format) =>
        (
            (delegate* unmanaged<PixelFormat*, void>)
                nativeContext.LoadFunction("DestroyPixelFormat", "SDL3")
        )(format);

    [NativeFunction("SDL3", EntryPoint = "DestroyPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPixelFormat(PixelFormat* format) =>
        DllImport.DestroyPixelFormat(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyPixelFormat(Ref<PixelFormat> format)
    {
        fixed (PixelFormat* __dsl_format = format)
        {
            ((ISdl)this).DestroyPixelFormat(__dsl_format);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyPixelFormat(Ref<PixelFormat> format) =>
        DllImport.DestroyPixelFormat(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        ((delegate* unmanaged<uint, void>)nativeContext.LoadFunction("DestroyProperties", "SDL3"))(
            props
        );

    [NativeFunction("SDL3", EntryPoint = "DestroyProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.DestroyProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyRenderer(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, void>)
                nativeContext.LoadFunction("DestroyRenderer", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "DestroyRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderer(SDL_Renderer* renderer) =>
        DllImport.DestroyRenderer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyRenderer(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            ((ISdl)this).DestroyRenderer(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRenderer(Ref<SDL_Renderer> renderer) =>
        DllImport.DestroyRenderer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyRWLock(SDL_RWLock* rwlock) =>
        (
            (delegate* unmanaged<SDL_RWLock*, void>)
                nativeContext.LoadFunction("DestroyRWLock", "SDL3")
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "DestroyRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRWLock(SDL_RWLock* rwlock) => DllImport.DestroyRWLock(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyRWLock(Ref<SDL_RWLock> rwlock)
    {
        fixed (SDL_RWLock* __dsl_rwlock = rwlock)
        {
            ((ISdl)this).DestroyRWLock(__dsl_rwlock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyRWLock(Ref<SDL_RWLock> rwlock) => DllImport.DestroyRWLock(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySemaphore(SDL_Semaphore* sem) =>
        (
            (delegate* unmanaged<SDL_Semaphore*, void>)
                nativeContext.LoadFunction("DestroySemaphore", "SDL3")
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "DestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(SDL_Semaphore* sem) => DllImport.DestroySemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySemaphore(Ref<SDL_Semaphore> sem)
    {
        fixed (SDL_Semaphore* __dsl_sem = sem)
        {
            ((ISdl)this).DestroySemaphore(__dsl_sem);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroySemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySemaphore(Ref<SDL_Semaphore> sem) => DllImport.DestroySemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySurface(Surface* surface) =>
        ((delegate* unmanaged<Surface*, void>)nativeContext.LoadFunction("DestroySurface", "SDL3"))(
            surface
        );

    [NativeFunction("SDL3", EntryPoint = "DestroySurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurface(Surface* surface) => DllImport.DestroySurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroySurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            ((ISdl)this).DestroySurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroySurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroySurface(Ref<Surface> surface) => DllImport.DestroySurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyTexture(SDL_Texture* texture) =>
        (
            (delegate* unmanaged<SDL_Texture*, void>)
                nativeContext.LoadFunction("DestroyTexture", "SDL3")
        )(texture);

    [NativeFunction("SDL3", EntryPoint = "DestroyTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTexture(SDL_Texture* texture) => DllImport.DestroyTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyTexture(Ref<SDL_Texture> texture)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            ((ISdl)this).DestroyTexture(__dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyTexture(Ref<SDL_Texture> texture) =>
        DllImport.DestroyTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyWindow(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, void>)
                nativeContext.LoadFunction("DestroyWindow", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "DestroyWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyWindow(SDL_Window* window) => DllImport.DestroyWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DestroyWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            ((ISdl)this).DestroyWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DestroyWindow(Ref<SDL_Window> window) => DllImport.DestroyWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.DestroyWindowSurface(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("DestroyWindowSurface", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "DestroyWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int DestroyWindowSurface(SDL_Window* window) =>
        DllImport.DestroyWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.DestroyWindowSurface(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).DestroyWindowSurface(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DestroyWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int DestroyWindowSurface(Ref<SDL_Window> window) =>
        DllImport.DestroyWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DetachThread(SDL_Thread* thread) =>
        (
            (delegate* unmanaged<SDL_Thread*, void>)
                nativeContext.LoadFunction("DetachThread", "SDL3")
        )(thread);

    [NativeFunction("SDL3", EntryPoint = "DetachThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DetachThread(SDL_Thread* thread) => DllImport.DetachThread(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.DetachThread(Ref<SDL_Thread> thread)
    {
        fixed (SDL_Thread* __dsl_thread = thread)
        {
            ((ISdl)this).DetachThread(__dsl_thread);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DetachThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void DetachThread(Ref<SDL_Thread> thread) => DllImport.DetachThread(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.DetachVirtualJoystick([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)
                nativeContext.LoadFunction("DetachVirtualJoystick", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "DetachVirtualJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int DetachVirtualJoystick([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.DetachVirtualJoystick(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.DisableScreenSaver() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("DisableScreenSaver", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "DisableScreenSaver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int DisableScreenSaver() => DllImport.DisableScreenSaver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.DuplicateSurface(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, Surface*>)
                nativeContext.LoadFunction("DuplicateSurface", "SDL3")
        )(surface);

    [NativeFunction("SDL3", EntryPoint = "DuplicateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* DuplicateSurface(Surface* surface) =>
        DllImport.DuplicateSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.DuplicateSurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (Surface*)((ISdl)this).DuplicateSurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_DuplicateSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> DuplicateSurface(Ref<Surface> surface) =>
        DllImport.DuplicateSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.EGLGetCurrentEGLConfig() => (void*)((ISdl)this).EGLGetCurrentEGLConfigRaw();

    [return: NativeTypeName("SDL_EGLConfig")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr EGLGetCurrentEGLConfig() => DllImport.EGLGetCurrentEGLConfig();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.EGLGetCurrentEGLConfigRaw() =>
        (
            (delegate* unmanaged<void*>)
                nativeContext.LoadFunction("SDL_EGL_GetCurrentEGLConfig", "SDL3")
        )();

    [return: NativeTypeName("SDL_EGLConfig")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* EGLGetCurrentEGLConfigRaw() => DllImport.EGLGetCurrentEGLConfigRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.EGLGetCurrentEGLDisplay() => (void*)((ISdl)this).EGLGetCurrentEGLDisplayRaw();

    [return: NativeTypeName("SDL_EGLDisplay")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr EGLGetCurrentEGLDisplay() => DllImport.EGLGetCurrentEGLDisplay();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.EGLGetCurrentEGLDisplayRaw() =>
        (
            (delegate* unmanaged<void*>)
                nativeContext.LoadFunction("SDL_EGL_GetCurrentEGLDisplay", "SDL3")
        )();

    [return: NativeTypeName("SDL_EGLDisplay")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* EGLGetCurrentEGLDisplayRaw() => DllImport.EGLGetCurrentEGLDisplayRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<void> ISdl.EGLGetProcAddress(
        [NativeTypeName("const char *")] sbyte* proc
    ) =>
        (
            (delegate* unmanaged<sbyte*, delegate* unmanaged<void>>)
                nativeContext.LoadFunction("EGLGetProcAddress", "SDL3")
        )(proc);

    [return: NativeTypeName("SDL_FunctionPointer")]
    [NativeFunction("SDL3", EntryPoint = "EGLGetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<void> EGLGetProcAddress(
        [NativeTypeName("const char *")] sbyte* proc
    ) => DllImport.EGLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<void> ISdl.EGLGetProcAddress(
        [NativeTypeName("const char *")] Ref<sbyte> proc
    )
    {
        fixed (sbyte* __dsl_proc = proc)
        {
            return (delegate* unmanaged<void>)((ISdl)this).EGLGetProcAddress(__dsl_proc);
        }
    }

    [return: NativeTypeName("SDL_FunctionPointer")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<void> EGLGetProcAddress(
        [NativeTypeName("const char *")] Ref<sbyte> proc
    ) => DllImport.EGLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.EGLGetWindowEGLSurface(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, void*>)
                nativeContext.LoadFunction("EGLGetWindowEGLSurface", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_EGLSurface")]
    [NativeFunction("SDL3", EntryPoint = "EGLGetWindowEGLSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* EGLGetWindowEGLSurface(SDL_Window* window) =>
        DllImport.EGLGetWindowEGLSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.EGLGetWindowEGLSurface(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (void*)((ISdl)this).EGLGetWindowEGLSurface(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_EGLSurface")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EGL_GetWindowEGLSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr EGLGetWindowEGLSurface(Ref<SDL_Window> window) =>
        DllImport.EGLGetWindowEGLSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.EGLSetEGLAttributeCallbacks(
        [NativeTypeName("SDL_EGLAttribArrayCallback")]
            delegate* unmanaged<nint*> platformAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] delegate* unmanaged<int*> surfaceAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] delegate* unmanaged<int*> contextAttribCallback
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<nint*>,
                delegate* unmanaged<int*>,
                delegate* unmanaged<int*>,
                void>)
                nativeContext.LoadFunction("EGLSetEGLAttributeCallbacks", "SDL3")
        )(platformAttribCallback, surfaceAttribCallback, contextAttribCallback);

    [NativeFunction("SDL3", EntryPoint = "EGLSetEGLAttributeCallbacks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void EGLSetEGLAttributeCallbacks(
        [NativeTypeName("SDL_EGLAttribArrayCallback")]
            delegate* unmanaged<nint*> platformAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] delegate* unmanaged<int*> surfaceAttribCallback,
        [NativeTypeName("SDL_EGLIntArrayCallback")] delegate* unmanaged<int*> contextAttribCallback
    ) =>
        DllImport.EGLSetEGLAttributeCallbacks(
            platformAttribCallback,
            surfaceAttribCallback,
            contextAttribCallback
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnableScreenSaver() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("EnableScreenSaver", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "EnableScreenSaver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnableScreenSaver() => DllImport.EnableScreenSaver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnumerateDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                sbyte*,
                delegate* unmanaged<void*, sbyte*, sbyte*, int>,
                void*,
                int>)
                nativeContext.LoadFunction("EnumerateDirectory", "SDL3")
        )(path, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "EnumerateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnumerateDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        void* userdata
    ) => DllImport.EnumerateDirectory(path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnumerateDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_path = path)
        {
            return (int)((ISdl)this).EnumerateDirectory(__dsl_path, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnumerateDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        Ref userdata
    ) => DllImport.EnumerateDirectory(path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")]
            delegate* unmanaged<void*, uint, sbyte*, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<uint, delegate* unmanaged<void*, uint, sbyte*, void>, void*, int>)
                nativeContext.LoadFunction("EnumerateProperties", "SDL3")
        )(props, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "EnumerateProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")]
            delegate* unmanaged<void*, uint, sbyte*, void> callback,
        void* userdata
    ) => DllImport.EnumerateProperties(props, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")]
            delegate* unmanaged<void*, uint, sbyte*, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (int)((ISdl)this).EnumerateProperties(props, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnumerateProperties(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("SDL_EnumeratePropertiesCallback")]
            delegate* unmanaged<void*, uint, sbyte*, void> callback,
        Ref userdata
    ) => DllImport.EnumerateProperties(props, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnumerateStorageDirectory(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                SDL_Storage*,
                sbyte*,
                delegate* unmanaged<void*, sbyte*, sbyte*, int>,
                void*,
                int>)
                nativeContext.LoadFunction("EnumerateStorageDirectory", "SDL3")
        )(storage, path, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "EnumerateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnumerateStorageDirectory(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        void* userdata
    ) => DllImport.EnumerateStorageDirectory(storage, path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EnumerateStorageDirectory(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)
                ((ISdl)this).EnumerateStorageDirectory(
                    __dsl_storage,
                    __dsl_path,
                    callback,
                    __dsl_userdata
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EnumerateStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EnumerateStorageDirectory(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("SDL_EnumerateDirectoryCallback")]
            delegate* unmanaged<void*, sbyte*, sbyte*, int> callback,
        Ref userdata
    ) => DllImport.EnumerateStorageDirectory(storage, path, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.Error(Errorcode code) =>
        ((delegate* unmanaged<Errorcode, int>)nativeContext.LoadFunction("Error", "SDL3"))(code);

    [NativeFunction("SDL3", EntryPoint = "Error")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int Error(Errorcode code) => DllImport.Error(code);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.EventEnabled([NativeTypeName("Uint32")] uint type) =>
        (MaybeBool<int>)(int)((ISdl)this).EventEnabledRaw(type);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> EventEnabled([NativeTypeName("Uint32")] uint type) =>
        DllImport.EventEnabled(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("SDL_EventEnabled", "SDL3"))(
            type
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_EventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int EventEnabledRaw([NativeTypeName("Uint32")] uint type) =>
        DllImport.EventEnabledRaw(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FillSurfaceRect(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("Uint32")] uint color
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, uint, int>)
                nativeContext.LoadFunction("FillSurfaceRect", "SDL3")
        )(dst, rect, color);

    [NativeFunction("SDL3", EntryPoint = "FillSurfaceRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FillSurfaceRect(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRect(dst, rect, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FillSurfaceRect(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("Uint32")] uint color
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (Surface* __dsl_dst = dst)
        {
            return (int)((ISdl)this).FillSurfaceRect(__dsl_dst, __dsl_rect, color);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FillSurfaceRect(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRect(dst, rect, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FillSurfaceRects(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, int, uint, int>)
                nativeContext.LoadFunction("FillSurfaceRects", "SDL3")
        )(dst, rects, count, color);

    [NativeFunction("SDL3", EntryPoint = "FillSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FillSurfaceRects(
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRects(dst, rects, count, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FillSurfaceRects(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    )
    {
        fixed (Rect* __dsl_rects = rects)
        fixed (Surface* __dsl_dst = dst)
        {
            return (int)((ISdl)this).FillSurfaceRects(__dsl_dst, __dsl_rects, count, color);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FillSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FillSurfaceRects(
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int count,
        [NativeTypeName("Uint32")] uint color
    ) => DllImport.FillSurfaceRects(dst, rects, count, color);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FilterEvents(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<void*, Event*, int>, void*, void>)
                nativeContext.LoadFunction("FilterEvents", "SDL3")
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "FilterEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FilterEvents(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) => DllImport.FilterEvents(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FilterEvents(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).FilterEvents(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FilterEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FilterEvents(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    ) => DllImport.FilterEvents(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlashWindow(SDL_Window* window, FlashOperation operation) =>
        (
            (delegate* unmanaged<SDL_Window*, FlashOperation, int>)
                nativeContext.LoadFunction("FlashWindow", "SDL3")
        )(window, operation);

    [NativeFunction("SDL3", EntryPoint = "FlashWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlashWindow(SDL_Window* window, FlashOperation operation) =>
        DllImport.FlashWindow(window, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlashWindow(Ref<SDL_Window> window, FlashOperation operation)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).FlashWindow(__dsl_window, operation);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlashWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlashWindow(Ref<SDL_Window> window, FlashOperation operation) =>
        DllImport.FlashWindow(window, operation);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlipSurface(Surface* surface, FlipMode flip) =>
        (
            (delegate* unmanaged<Surface*, FlipMode, int>)
                nativeContext.LoadFunction("FlipSurface", "SDL3")
        )(surface, flip);

    [NativeFunction("SDL3", EntryPoint = "FlipSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlipSurface(Surface* surface, FlipMode flip) =>
        DllImport.FlipSurface(surface, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlipSurface(Ref<Surface> surface, FlipMode flip)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).FlipSurface(__dsl_surface, flip);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlipSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlipSurface(Ref<Surface> surface, FlipMode flip) =>
        DllImport.FlipSurface(surface, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlushAudioStream(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, int>)
                nativeContext.LoadFunction("FlushAudioStream", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "FlushAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlushAudioStream(SDL_AudioStream* stream) =>
        DllImport.FlushAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlushAudioStream(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).FlushAudioStream(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlushAudioStream(Ref<SDL_AudioStream> stream) =>
        DllImport.FlushAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FlushEvent([NativeTypeName("Uint32")] uint type) =>
        ((delegate* unmanaged<uint, void>)nativeContext.LoadFunction("FlushEvent", "SDL3"))(type);

    [NativeFunction("SDL3", EntryPoint = "FlushEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FlushEvent([NativeTypeName("Uint32")] uint type) =>
        DllImport.FlushEvent(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.FlushEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) =>
        ((delegate* unmanaged<uint, uint, void>)nativeContext.LoadFunction("FlushEvents", "SDL3"))(
            minType,
            maxType
        );

    [NativeFunction("SDL3", EntryPoint = "FlushEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void FlushEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.FlushEvents(minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlushRenderer(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int>)
                nativeContext.LoadFunction("FlushRenderer", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "FlushRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlushRenderer(SDL_Renderer* renderer) => DllImport.FlushRenderer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.FlushRenderer(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).FlushRenderer(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_FlushRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int FlushRenderer(Ref<SDL_Renderer> renderer) =>
        DllImport.FlushRenderer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GamepadConnected(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int>)
                nativeContext.LoadFunction("GamepadConnected", "SDL3")
        )(gamepad);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GamepadConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GamepadConnected(SDL_Gamepad* gamepad) => DllImport.GamepadConnected(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GamepadConnected(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GamepadConnected(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GamepadConnected(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GamepadConnected(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GamepadEventsEnabled() =>
        (MaybeBool<int>)(int)((ISdl)this).GamepadEventsEnabledRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GamepadEventsEnabled() => DllImport.GamepadEventsEnabled();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GamepadEventsEnabledRaw() =>
        (
            (delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_GamepadEventsEnabled", "SDL3")
        )();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GamepadEventsEnabledRaw() => DllImport.GamepadEventsEnabledRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GamepadHasAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadAxis, int>)
                nativeContext.LoadFunction("GamepadHasAxis", "SDL3")
        )(gamepad, axis);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GamepadHasAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GamepadHasAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
        DllImport.GamepadHasAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GamepadHasAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GamepadHasAxis(__dsl_gamepad, axis);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GamepadHasAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis) =>
        DllImport.GamepadHasAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GamepadHasButton(SDL_Gamepad* gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadButton, int>)
                nativeContext.LoadFunction("GamepadHasButton", "SDL3")
        )(gamepad, button);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GamepadHasButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GamepadHasButton(SDL_Gamepad* gamepad, GamepadButton button) =>
        DllImport.GamepadHasButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GamepadHasButton(Ref<SDL_Gamepad> gamepad, GamepadButton button)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GamepadHasButton(__dsl_gamepad, button);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GamepadHasButton(Ref<SDL_Gamepad> gamepad, GamepadButton button) =>
        DllImport.GamepadHasButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GamepadHasSensor(SDL_Gamepad* gamepad, SensorType type) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, SensorType, int>)
                nativeContext.LoadFunction("GamepadHasSensor", "SDL3")
        )(gamepad, type);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GamepadHasSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GamepadHasSensor(SDL_Gamepad* gamepad, SensorType type) =>
        DllImport.GamepadHasSensor(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GamepadHasSensor(Ref<SDL_Gamepad> gamepad, SensorType type)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GamepadHasSensor(__dsl_gamepad, type);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadHasSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GamepadHasSensor(Ref<SDL_Gamepad> gamepad, SensorType type) =>
        DllImport.GamepadHasSensor(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GamepadSensorEnabled(SDL_Gamepad* gamepad, SensorType type) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, SensorType, int>)
                nativeContext.LoadFunction("GamepadSensorEnabled", "SDL3")
        )(gamepad, type);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GamepadSensorEnabled(SDL_Gamepad* gamepad, SensorType type) =>
        DllImport.GamepadSensorEnabled(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GamepadSensorEnabled(Ref<SDL_Gamepad> gamepad, SensorType type)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GamepadSensorEnabled(__dsl_gamepad, type);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GamepadSensorEnabled(Ref<SDL_Gamepad> gamepad, SensorType type) =>
        DllImport.GamepadSensorEnabled(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<AssertData*, void*, AssertState> ISdl.GetAssertionHandler(
        void** puserdata
    ) =>
        (
            (delegate* unmanaged<void**, delegate* unmanaged<AssertData*, void*, AssertState>>)
                nativeContext.LoadFunction("GetAssertionHandler", "SDL3")
        )(puserdata);

    [return: NativeTypeName("SDL_AssertionHandler")]
    [NativeFunction("SDL3", EntryPoint = "GetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
        void** puserdata
    ) => DllImport.GetAssertionHandler(puserdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<AssertData*, void*, AssertState> ISdl.GetAssertionHandler(Ref2D puserdata)
    {
        fixed (void** __dsl_puserdata = puserdata)
        {
            return (delegate* unmanaged<AssertData*, void*, AssertState>)
                ((ISdl)this).GetAssertionHandler(__dsl_puserdata);
        }
    }

    [return: NativeTypeName("SDL_AssertionHandler")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<AssertData*, void*, AssertState> GetAssertionHandler(
        Ref2D puserdata
    ) => DllImport.GetAssertionHandler(puserdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<AssertData> ISdl.GetAssertionReport() => (AssertData*)((ISdl)this).GetAssertionReportRaw();

    [return: NativeTypeName("const SDL_AssertData *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<AssertData> GetAssertionReport() => DllImport.GetAssertionReport();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertData* ISdl.GetAssertionReportRaw() =>
        (
            (delegate* unmanaged<AssertData*>)
                nativeContext.LoadFunction("SDL_GetAssertionReport", "SDL3")
        )();

    [return: NativeTypeName("const SDL_AssertData *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAssertionReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertData* GetAssertionReportRaw() => DllImport.GetAssertionReportRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetAudioCaptureDevices(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)
                nativeContext.LoadFunction("GetAudioCaptureDevices", "SDL3")
        )(count);

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [NativeFunction("SDL3", EntryPoint = "GetAudioCaptureDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetAudioCaptureDevices(int* count) =>
        DllImport.GetAudioCaptureDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetAudioCaptureDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetAudioCaptureDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioCaptureDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetAudioCaptureDevices(Ref<int> count) =>
        DllImport.GetAudioCaptureDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioSpec* spec,
        int* sample_frames
    ) =>
        (
            (delegate* unmanaged<uint, AudioSpec*, int*, int>)
                nativeContext.LoadFunction("GetAudioDeviceFormat", "SDL3")
        )(devid, spec, sample_frames);

    [NativeFunction("SDL3", EntryPoint = "GetAudioDeviceFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        AudioSpec* spec,
        int* sample_frames
    ) => DllImport.GetAudioDeviceFormat(devid, spec, sample_frames);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<AudioSpec> spec,
        Ref<int> sample_frames
    )
    {
        fixed (int* __dsl_sample_frames = sample_frames)
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (int)((ISdl)this).GetAudioDeviceFormat(devid, __dsl_spec, __dsl_sample_frames);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioDeviceFormat(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        Ref<AudioSpec> spec,
        Ref<int> sample_frames
    ) => DllImport.GetAudioDeviceFormat(devid, spec, sample_frames);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetAudioDeviceName([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        (sbyte*)((ISdl)this).GetAudioDeviceNameRaw(devid);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetAudioDeviceName([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.GetAudioDeviceName(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetAudioDeviceNameRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetAudioDeviceName", "SDL3")
        )(devid);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetAudioDeviceNameRaw([NativeTypeName("SDL_AudioDeviceID")] uint devid) =>
        DllImport.GetAudioDeviceNameRaw(devid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetAudioDriver(int index) => (sbyte*)((ISdl)this).GetAudioDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetAudioDriver(int index) => DllImport.GetAudioDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetAudioDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)
                nativeContext.LoadFunction("SDL_GetAudioDriver", "SDL3")
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetAudioDriverRaw(int index) => DllImport.GetAudioDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetAudioOutputDevices(int* count) =>
        (
            (delegate* unmanaged<int*, uint*>)
                nativeContext.LoadFunction("GetAudioOutputDevices", "SDL3")
        )(count);

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [NativeFunction("SDL3", EntryPoint = "GetAudioOutputDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetAudioOutputDevices(int* count) => DllImport.GetAudioOutputDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetAudioOutputDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetAudioOutputDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioOutputDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetAudioOutputDevices(Ref<int> count) =>
        DllImport.GetAudioOutputDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamAvailable(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, int>)
                nativeContext.LoadFunction("GetAudioStreamAvailable", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamAvailable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamAvailable(SDL_AudioStream* stream) =>
        DllImport.GetAudioStreamAvailable(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamAvailable(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).GetAudioStreamAvailable(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamAvailable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamAvailable(Ref<SDL_AudioStream> stream) =>
        DllImport.GetAudioStreamAvailable(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, void*, int, int>)
                nativeContext.LoadFunction("GetAudioStreamData", "SDL3")
        )(stream, buf, len);

    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len) =>
        DllImport.GetAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamData(Ref<SDL_AudioStream> stream, Ref buf, int len)
    {
        fixed (void* __dsl_buf = buf)
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).GetAudioStreamData(__dsl_stream, __dsl_buf, len);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamData(Ref<SDL_AudioStream> stream, Ref buf, int len) =>
        DllImport.GetAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAudioStreamDevice(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, uint>)
                nativeContext.LoadFunction("GetAudioStreamDevice", "SDL3")
        )(stream);

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAudioStreamDevice(SDL_AudioStream* stream) =>
        DllImport.GetAudioStreamDevice(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAudioStreamDevice(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (uint)((ISdl)this).GetAudioStreamDevice(__dsl_stream);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAudioStreamDevice(Ref<SDL_AudioStream> stream) =>
        DllImport.GetAudioStreamDevice(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamFormat(
        SDL_AudioStream* stream,
        AudioSpec* src_spec,
        AudioSpec* dst_spec
    ) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, AudioSpec*, AudioSpec*, int>)
                nativeContext.LoadFunction("GetAudioStreamFormat", "SDL3")
        )(stream, src_spec, dst_spec);

    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamFormat(
        SDL_AudioStream* stream,
        AudioSpec* src_spec,
        AudioSpec* dst_spec
    ) => DllImport.GetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamFormat(
        Ref<SDL_AudioStream> stream,
        Ref<AudioSpec> src_spec,
        Ref<AudioSpec> dst_spec
    )
    {
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)
                ((ISdl)this).GetAudioStreamFormat(__dsl_stream, __dsl_src_spec, __dsl_dst_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamFormat(
        Ref<SDL_AudioStream> stream,
        Ref<AudioSpec> src_spec,
        Ref<AudioSpec> dst_spec
    ) => DllImport.GetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetAudioStreamFrequencyRatio(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, float>)
                nativeContext.LoadFunction("GetAudioStreamFrequencyRatio", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetAudioStreamFrequencyRatio(SDL_AudioStream* stream) =>
        DllImport.GetAudioStreamFrequencyRatio(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (float)((ISdl)this).GetAudioStreamFrequencyRatio(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream) =>
        DllImport.GetAudioStreamFrequencyRatio(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAudioStreamProperties(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, uint>)
                nativeContext.LoadFunction("GetAudioStreamProperties", "SDL3")
        )(stream);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAudioStreamProperties(SDL_AudioStream* stream) =>
        DllImport.GetAudioStreamProperties(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetAudioStreamProperties(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (uint)((ISdl)this).GetAudioStreamProperties(__dsl_stream);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetAudioStreamProperties(Ref<SDL_AudioStream> stream) =>
        DllImport.GetAudioStreamProperties(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamQueued(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, int>)
                nativeContext.LoadFunction("GetAudioStreamQueued", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "GetAudioStreamQueued")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamQueued(SDL_AudioStream* stream) =>
        DllImport.GetAudioStreamQueued(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetAudioStreamQueued(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).GetAudioStreamQueued(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetAudioStreamQueued")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetAudioStreamQueued(Ref<SDL_AudioStream> stream) =>
        DllImport.GetAudioStreamQueued(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetBasePath() => (sbyte*)((ISdl)this).GetBasePathRaw();

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetBasePath() => DllImport.GetBasePath();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetBasePathRaw() =>
        ((delegate* unmanaged<sbyte*>)nativeContext.LoadFunction("SDL_GetBasePath", "SDL3"))();

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBasePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetBasePathRaw() => DllImport.GetBasePathRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_bool")] int default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, int, int>)
                nativeContext.LoadFunction("GetBooleanProperty", "SDL3")
        )(props, name, default_value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_bool")] int default_value
    ) => DllImport.GetBooleanProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).GetBooleanProperty(props, __dsl_name, (int)default_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
    ) => DllImport.GetBooleanProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCameraDeviceName([NativeTypeName("SDL_CameraDeviceID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetCameraDeviceNameRaw(instance_id);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCameraDeviceName(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
    ) => DllImport.GetCameraDeviceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCameraDeviceNameRaw([NativeTypeName("SDL_CameraDeviceID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetCameraDeviceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCameraDeviceNameRaw(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
    ) => DllImport.GetCameraDeviceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CameraPosition ISdl.GetCameraDevicePosition(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, CameraPosition>)
                nativeContext.LoadFunction("GetCameraDevicePosition", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetCameraDevicePosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CameraPosition GetCameraDevicePosition(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id
    ) => DllImport.GetCameraDevicePosition(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetCameraDevices(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetCameraDevices", "SDL3"))(
            count
        );

    [return: NativeTypeName("SDL_CameraDeviceID *")]
    [NativeFunction("SDL3", EntryPoint = "GetCameraDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetCameraDevices(int* count) => DllImport.GetCameraDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetCameraDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetCameraDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_CameraDeviceID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetCameraDevices(Ref<int> count) => DllImport.GetCameraDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    CameraSpec* ISdl.GetCameraDeviceSupportedFormats(
        [NativeTypeName("SDL_CameraDeviceID")] uint devid,
        int* count
    ) =>
        (
            (delegate* unmanaged<uint, int*, CameraSpec*>)
                nativeContext.LoadFunction("GetCameraDeviceSupportedFormats", "SDL3")
        )(devid, count);

    [NativeFunction("SDL3", EntryPoint = "GetCameraDeviceSupportedFormats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static CameraSpec* GetCameraDeviceSupportedFormats(
        [NativeTypeName("SDL_CameraDeviceID")] uint devid,
        int* count
    ) => DllImport.GetCameraDeviceSupportedFormats(devid, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<CameraSpec> ISdl.GetCameraDeviceSupportedFormats(
        [NativeTypeName("SDL_CameraDeviceID")] uint devid,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (CameraSpec*)((ISdl)this).GetCameraDeviceSupportedFormats(devid, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDeviceSupportedFormats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<CameraSpec> GetCameraDeviceSupportedFormats(
        [NativeTypeName("SDL_CameraDeviceID")] uint devid,
        Ref<int> count
    ) => DllImport.GetCameraDeviceSupportedFormats(devid, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCameraDriver(int index) => (sbyte*)((ISdl)this).GetCameraDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCameraDriver(int index) => DllImport.GetCameraDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCameraDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)
                nativeContext.LoadFunction("SDL_GetCameraDriver", "SDL3")
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCameraDriverRaw(int index) => DllImport.GetCameraDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCameraFormat(SDL_Camera* camera, CameraSpec* spec) =>
        (
            (delegate* unmanaged<SDL_Camera*, CameraSpec*, int>)
                nativeContext.LoadFunction("GetCameraFormat", "SDL3")
        )(camera, spec);

    [NativeFunction("SDL3", EntryPoint = "GetCameraFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCameraFormat(SDL_Camera* camera, CameraSpec* spec) =>
        DllImport.GetCameraFormat(camera, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCameraFormat(Ref<SDL_Camera> camera, Ref<CameraSpec> spec)
    {
        fixed (CameraSpec* __dsl_spec = spec)
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            return (int)((ISdl)this).GetCameraFormat(__dsl_camera, __dsl_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCameraFormat(Ref<SDL_Camera> camera, Ref<CameraSpec> spec) =>
        DllImport.GetCameraFormat(camera, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetCameraInstanceID(SDL_Camera* camera) =>
        (
            (delegate* unmanaged<SDL_Camera*, uint>)
                nativeContext.LoadFunction("GetCameraInstanceID", "SDL3")
        )(camera);

    [return: NativeTypeName("SDL_CameraDeviceID")]
    [NativeFunction("SDL3", EntryPoint = "GetCameraInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetCameraInstanceID(SDL_Camera* camera) =>
        DllImport.GetCameraInstanceID(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetCameraInstanceID(Ref<SDL_Camera> camera)
    {
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            return (uint)((ISdl)this).GetCameraInstanceID(__dsl_camera);
        }
    }

    [return: NativeTypeName("SDL_CameraDeviceID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetCameraInstanceID(Ref<SDL_Camera> camera) =>
        DllImport.GetCameraInstanceID(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCameraPermissionState(SDL_Camera* camera) =>
        (
            (delegate* unmanaged<SDL_Camera*, int>)
                nativeContext.LoadFunction("GetCameraPermissionState", "SDL3")
        )(camera);

    [NativeFunction("SDL3", EntryPoint = "GetCameraPermissionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCameraPermissionState(SDL_Camera* camera) =>
        DllImport.GetCameraPermissionState(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCameraPermissionState(Ref<SDL_Camera> camera)
    {
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            return (int)((ISdl)this).GetCameraPermissionState(__dsl_camera);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraPermissionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCameraPermissionState(Ref<SDL_Camera> camera) =>
        DllImport.GetCameraPermissionState(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetCameraProperties(SDL_Camera* camera) =>
        (
            (delegate* unmanaged<SDL_Camera*, uint>)
                nativeContext.LoadFunction("GetCameraProperties", "SDL3")
        )(camera);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetCameraProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetCameraProperties(SDL_Camera* camera) =>
        DllImport.GetCameraProperties(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetCameraProperties(Ref<SDL_Camera> camera)
    {
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            return (uint)((ISdl)this).GetCameraProperties(__dsl_camera);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCameraProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetCameraProperties(Ref<SDL_Camera> camera) =>
        DllImport.GetCameraProperties(camera);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetClipboardData(
        [NativeTypeName("const char *")] sbyte* mime_type,
        [NativeTypeName("size_t *")] nuint* size
    ) =>
        (
            (delegate* unmanaged<sbyte*, nuint*, void*>)
                nativeContext.LoadFunction("GetClipboardData", "SDL3")
        )(mime_type, size);

    [NativeFunction("SDL3", EntryPoint = "GetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetClipboardData(
        [NativeTypeName("const char *")] sbyte* mime_type,
        [NativeTypeName("size_t *")] nuint* size
    ) => DllImport.GetClipboardData(mime_type, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetClipboardData(
        [NativeTypeName("const char *")] Ref<sbyte> mime_type,
        [NativeTypeName("size_t *")] Ref<nuint> size
    )
    {
        fixed (nuint* __dsl_size = size)
        fixed (sbyte* __dsl_mime_type = mime_type)
        {
            return (void*)((ISdl)this).GetClipboardData(__dsl_mime_type, __dsl_size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetClipboardData(
        [NativeTypeName("const char *")] Ref<sbyte> mime_type,
        [NativeTypeName("size_t *")] Ref<nuint> size
    ) => DllImport.GetClipboardData(mime_type, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetClipboardText() => (sbyte*)((ISdl)this).GetClipboardTextRaw();

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetClipboardText() => DllImport.GetClipboardText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetClipboardTextRaw() =>
        ((delegate* unmanaged<sbyte*>)nativeContext.LoadFunction("SDL_GetClipboardText", "SDL3"))();

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetClipboardTextRaw() => DllImport.GetClipboardTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("SDL_bool")] int include_high_density_modes
    ) =>
        (
            (delegate* unmanaged<uint, int, int, float, int, DisplayMode*>)
                nativeContext.LoadFunction("GetClosestFullscreenDisplayMode", "SDL3")
        )(displayID, w, h, refresh_rate, include_high_density_modes);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "GetClosestFullscreenDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("SDL_bool")] int include_high_density_modes
    ) =>
        DllImport.GetClosestFullscreenDisplayMode(
            displayID,
            w,
            h,
            refresh_rate,
            include_high_density_modes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("SDL_bool")] MaybeBool<int> include_high_density_modes
    ) =>
        (DisplayMode*)
            ((ISdl)this).GetClosestFullscreenDisplayMode(
                displayID,
                w,
                h,
                refresh_rate,
                (int)include_high_density_modes
            );

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetClosestFullscreenDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int w,
        int h,
        float refresh_rate,
        [NativeTypeName("SDL_bool")] MaybeBool<int> include_high_density_modes
    ) =>
        DllImport.GetClosestFullscreenDisplayMode(
            displayID,
            w,
            h,
            refresh_rate,
            include_high_density_modes
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCPUCacheLineSize() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetCPUCacheLineSize", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetCPUCacheLineSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCPUCacheLineSize() => DllImport.GetCPUCacheLineSize();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCPUCount() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetCPUCount", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetCPUCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCPUCount() => DllImport.GetCPUCount();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCurrentAudioDriver() => (sbyte*)((ISdl)this).GetCurrentAudioDriverRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCurrentAudioDriver() => DllImport.GetCurrentAudioDriver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCurrentAudioDriverRaw() =>
        (
            (delegate* unmanaged<sbyte*>)
                nativeContext.LoadFunction("SDL_GetCurrentAudioDriver", "SDL3")
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentAudioDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCurrentAudioDriverRaw() => DllImport.GetCurrentAudioDriverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCurrentCameraDriver() => (sbyte*)((ISdl)this).GetCurrentCameraDriverRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCurrentCameraDriver() => DllImport.GetCurrentCameraDriver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCurrentCameraDriverRaw() =>
        (
            (delegate* unmanaged<sbyte*>)
                nativeContext.LoadFunction("SDL_GetCurrentCameraDriver", "SDL3")
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentCameraDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCurrentCameraDriverRaw() => DllImport.GetCurrentCameraDriverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetCurrentDisplayMode([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (DisplayMode*)((ISdl)this).GetCurrentDisplayModeRaw(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetCurrentDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetCurrentDisplayMode(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetCurrentDisplayModeRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, DisplayMode*>)
                nativeContext.LoadFunction("SDL_GetCurrentDisplayMode", "SDL3")
        )(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetCurrentDisplayModeRaw(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetCurrentDisplayModeRaw(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayOrientation ISdl.GetCurrentDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) =>
        (
            (delegate* unmanaged<uint, DisplayOrientation>)
                nativeContext.LoadFunction("GetCurrentDisplayOrientation", "SDL3")
        )(displayID);

    [NativeFunction("SDL3", EntryPoint = "GetCurrentDisplayOrientation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayOrientation GetCurrentDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetCurrentDisplayOrientation(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int*, int*, int>)
                nativeContext.LoadFunction("GetCurrentRenderOutputSize", "SDL3")
        )(renderer, w, h);

    [NativeFunction("SDL3", EntryPoint = "GetCurrentRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
        DllImport.GetCurrentRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCurrentRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetCurrentRenderOutputSize(__dsl_renderer, __dsl_w, __dsl_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCurrentRenderOutputSize(
        Ref<SDL_Renderer> renderer,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.GetCurrentRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetCurrentThreadID() =>
        ((delegate* unmanaged<ulong>)nativeContext.LoadFunction("GetCurrentThreadID", "SDL3"))();

    [return: NativeTypeName("SDL_ThreadID")]
    [NativeFunction("SDL3", EntryPoint = "GetCurrentThreadID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetCurrentThreadID() => DllImport.GetCurrentThreadID();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
        ((delegate* unmanaged<long*, int>)nativeContext.LoadFunction("GetCurrentTime", "SDL3"))(
            ticks
        );

    [NativeFunction("SDL3", EntryPoint = "GetCurrentTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCurrentTime([NativeTypeName("SDL_Time *")] long* ticks) =>
        DllImport.GetCurrentTime(ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks)
    {
        fixed (long* __dsl_ticks = ticks)
        {
            return (int)((ISdl)this).GetCurrentTime(__dsl_ticks);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetCurrentTime([NativeTypeName("SDL_Time *")] Ref<long> ticks) =>
        DllImport.GetCurrentTime(ticks);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetCurrentVideoDriver() => (sbyte*)((ISdl)this).GetCurrentVideoDriverRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetCurrentVideoDriver() => DllImport.GetCurrentVideoDriver();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetCurrentVideoDriverRaw() =>
        (
            (delegate* unmanaged<sbyte*>)
                nativeContext.LoadFunction("SDL_GetCurrentVideoDriver", "SDL3")
        )();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCurrentVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetCurrentVideoDriverRaw() => DllImport.GetCurrentVideoDriverRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Cursor> ISdl.GetCursor() => (SDL_Cursor*)((ISdl)this).GetCursorRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Cursor> GetCursor() => DllImport.GetCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Cursor* ISdl.GetCursorRaw() =>
        ((delegate* unmanaged<SDL_Cursor*>)nativeContext.LoadFunction("SDL_GetCursor", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Cursor* GetCursorRaw() => DllImport.GetCursorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDayOfWeek(int year, int month, int day) =>
        (
            (delegate* unmanaged<int, int, int, int>)
                nativeContext.LoadFunction("GetDayOfWeek", "SDL3")
        )(year, month, day);

    [NativeFunction("SDL3", EntryPoint = "GetDayOfWeek")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDayOfWeek(int year, int month, int day) =>
        DllImport.GetDayOfWeek(year, month, day);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDayOfYear(int year, int month, int day) =>
        (
            (delegate* unmanaged<int, int, int, int>)
                nativeContext.LoadFunction("GetDayOfYear", "SDL3")
        )(year, month, day);

    [NativeFunction("SDL3", EntryPoint = "GetDayOfYear")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDayOfYear(int year, int month, int day) =>
        DllImport.GetDayOfYear(year, month, day);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDaysInMonth(int year, int month) =>
        ((delegate* unmanaged<int, int, int>)nativeContext.LoadFunction("GetDaysInMonth", "SDL3"))(
            year,
            month
        );

    [NativeFunction("SDL3", EntryPoint = "GetDaysInMonth")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDaysInMonth(int year, int month) => DllImport.GetDaysInMonth(year, month);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<AssertData*, void*, AssertState> ISdl.GetDefaultAssertionHandler() =>
        (
            (delegate* unmanaged<delegate* unmanaged<AssertData*, void*, AssertState>>)
                nativeContext.LoadFunction("GetDefaultAssertionHandler", "SDL3")
        )();

    [return: NativeTypeName("SDL_AssertionHandler")]
    [NativeFunction("SDL3", EntryPoint = "GetDefaultAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<
        AssertData*,
        void*,
        AssertState> GetDefaultAssertionHandler() => DllImport.GetDefaultAssertionHandler();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Cursor> ISdl.GetDefaultCursor() => (SDL_Cursor*)((ISdl)this).GetDefaultCursorRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Cursor> GetDefaultCursor() => DllImport.GetDefaultCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Cursor* ISdl.GetDefaultCursorRaw() =>
        (
            (delegate* unmanaged<SDL_Cursor*>)
                nativeContext.LoadFunction("SDL_GetDefaultCursor", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetDefaultCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Cursor* GetDefaultCursorRaw() => DllImport.GetDefaultCursorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetDesktopDisplayMode([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (DisplayMode*)((ISdl)this).GetDesktopDisplayModeRaw(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetDesktopDisplayMode(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetDesktopDisplayMode(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetDesktopDisplayModeRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, DisplayMode*>)
                nativeContext.LoadFunction("SDL_GetDesktopDisplayMode", "SDL3")
        )(displayID);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDesktopDisplayMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetDesktopDisplayModeRaw(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetDesktopDisplayModeRaw(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDisplayBounds([NativeTypeName("SDL_DisplayID")] uint displayID, Rect* rect) =>
        (
            (delegate* unmanaged<uint, Rect*, int>)
                nativeContext.LoadFunction("GetDisplayBounds", "SDL3")
        )(displayID, rect);

    [NativeFunction("SDL3", EntryPoint = "GetDisplayBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDisplayBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Rect* rect
    ) => DllImport.GetDisplayBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDisplayBounds([NativeTypeName("SDL_DisplayID")] uint displayID, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (int)((ISdl)this).GetDisplayBounds(displayID, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDisplayBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    ) => DllImport.GetDisplayBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetDisplayContentScale([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, float>)
                nativeContext.LoadFunction("GetDisplayContentScale", "SDL3")
        )(displayID);

    [NativeFunction("SDL3", EntryPoint = "GetDisplayContentScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetDisplayContentScale([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayContentScale(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
        (
            (delegate* unmanaged<Point*, uint>)
                nativeContext.LoadFunction("GetDisplayForPoint", "SDL3")
        )(point);

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "GetDisplayForPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Point* point) =>
        DllImport.GetDisplayForPoint(point);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Ref<Point> point)
    {
        fixed (Point* __dsl_point = point)
        {
            return (uint)((ISdl)this).GetDisplayForPoint(__dsl_point);
        }
    }

    [return: NativeTypeName("SDL_DisplayID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForPoint([NativeTypeName("const SDL_Point *")] Ref<Point> point) =>
        DllImport.GetDisplayForPoint(point);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
        ((delegate* unmanaged<Rect*, uint>)nativeContext.LoadFunction("GetDisplayForRect", "SDL3"))(
            rect
        );

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "GetDisplayForRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
        DllImport.GetDisplayForRect(rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (uint)((ISdl)this).GetDisplayForRect(__dsl_rect);
        }
    }

    [return: NativeTypeName("SDL_DisplayID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect) =>
        DllImport.GetDisplayForRect(rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForWindow(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, uint>)
                nativeContext.LoadFunction("GetDisplayForWindow", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "GetDisplayForWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForWindow(SDL_Window* window) =>
        DllImport.GetDisplayForWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayForWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (uint)((ISdl)this).GetDisplayForWindow(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_DisplayID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayForWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayForWindow(Ref<SDL_Window> window) =>
        DllImport.GetDisplayForWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (sbyte*)((ISdl)this).GetDisplayNameRaw(displayID);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetDisplayName([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayName(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetDisplayName", "SDL3")
        )(displayID);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetDisplayNameRaw([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayNameRaw(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        (
            (delegate* unmanaged<uint, uint>)
                nativeContext.LoadFunction("GetDisplayProperties", "SDL3")
        )(displayID);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetDisplayProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetDisplayProperties([NativeTypeName("SDL_DisplayID")] uint displayID) =>
        DllImport.GetDisplayProperties(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetDisplays(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetDisplays", "SDL3"))(
            count
        );

    [return: NativeTypeName("SDL_DisplayID *")]
    [NativeFunction("SDL3", EntryPoint = "GetDisplays")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetDisplays(int* count) => DllImport.GetDisplays(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetDisplays(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetDisplays(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_DisplayID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplays")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetDisplays(Ref<int> count) => DllImport.GetDisplays(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDisplayUsableBounds([NativeTypeName("SDL_DisplayID")] uint displayID, Rect* rect) =>
        (
            (delegate* unmanaged<uint, Rect*, int>)
                nativeContext.LoadFunction("GetDisplayUsableBounds", "SDL3")
        )(displayID, rect);

    [NativeFunction("SDL3", EntryPoint = "GetDisplayUsableBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Rect* rect
    ) => DllImport.GetDisplayUsableBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (int)((ISdl)this).GetDisplayUsableBounds(displayID, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetDisplayUsableBounds")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetDisplayUsableBounds(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<Rect> rect
    ) => DllImport.GetDisplayUsableBounds(displayID, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetError() => (sbyte*)((ISdl)this).GetErrorRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetError() => DllImport.GetError();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetErrorRaw() =>
        ((delegate* unmanaged<sbyte*>)nativeContext.LoadFunction("SDL_GetError", "SDL3"))();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetError")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetErrorRaw() => DllImport.GetErrorRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
        void** userdata
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<void*, Event*, int>*, void**, int>)
                nativeContext.LoadFunction("GetEventFilter", "SDL3")
        )(filter, userdata);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
        void** userdata
    ) => DllImport.GetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
        Ref2D userdata
    )
    {
        fixed (void** __dsl_userdata = userdata)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GetEventFilter(filter, __dsl_userdata);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetEventFilter(
        [NativeTypeName("SDL_EventFilter *")] delegate* unmanaged<void*, Event*, int>* filter,
        Ref2D userdata
    ) => DllImport.GetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, float, float>)
                nativeContext.LoadFunction("GetFloatProperty", "SDL3")
        )(props, name, default_value);

    [NativeFunction("SDL3", EntryPoint = "GetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float default_value
    ) => DllImport.GetFloatProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (float)((ISdl)this).GetFloatProperty(props, __dsl_name, default_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float default_value
    ) => DllImport.GetFloatProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode** ISdl.GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int* count
    ) =>
        (
            (delegate* unmanaged<uint, int*, DisplayMode**>)
                nativeContext.LoadFunction("GetFullscreenDisplayModes", "SDL3")
        )(displayID, count);

    [return: NativeTypeName("const SDL_DisplayMode **")]
    [NativeFunction("SDL3", EntryPoint = "GetFullscreenDisplayModes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode** GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        int* count
    ) => DllImport.GetFullscreenDisplayModes(displayID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<DisplayMode> ISdl.GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (DisplayMode**)((ISdl)this).GetFullscreenDisplayModes(displayID, __dsl_count);
        }
    }

    [return: NativeTypeName("const SDL_DisplayMode **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetFullscreenDisplayModes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<DisplayMode> GetFullscreenDisplayModes(
        [NativeTypeName("SDL_DisplayID")] uint displayID,
        Ref<int> count
    ) => DllImport.GetFullscreenDisplayModes(displayID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadAxis, sbyte*>)
                nativeContext.LoadFunction("GetGamepadAppleSFSymbolsNameForAxis", "SDL3")
        )(gamepad, axis);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadAppleSFSymbolsNameForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadAppleSFSymbolsNameForAxis(
        SDL_Gamepad* gamepad,
        GamepadAxis axis
    ) => DllImport.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadAppleSFSymbolsNameForAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (sbyte*)((ISdl)this).GetGamepadAppleSFSymbolsNameForAxis(__dsl_gamepad, axis);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForAxis(
        Ref<SDL_Gamepad> gamepad,
        GamepadAxis axis
    ) => DllImport.GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad* gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadButton, sbyte*>)
                nativeContext.LoadFunction("GetGamepadAppleSFSymbolsNameForButton", "SDL3")
        )(gamepad, button);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadAppleSFSymbolsNameForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadAppleSFSymbolsNameForButton(
        SDL_Gamepad* gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadAppleSFSymbolsNameForButton(
        Ref<SDL_Gamepad> gamepad,
        GamepadButton button
    )
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (sbyte*)
                ((ISdl)this).GetGamepadAppleSFSymbolsNameForButton(__dsl_gamepad, button);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadAppleSFSymbolsNameForButton(
        Ref<SDL_Gamepad> gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadAppleSFSymbolsNameForButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    short ISdl.GetGamepadAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadAxis, short>)
                nativeContext.LoadFunction("GetGamepadAxis", "SDL3")
        )(gamepad, axis);

    [return: NativeTypeName("Sint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static short GetGamepadAxis(SDL_Gamepad* gamepad, GamepadAxis axis) =>
        DllImport.GetGamepadAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    short ISdl.GetGamepadAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (short)((ISdl)this).GetGamepadAxis(__dsl_gamepad, axis);
        }
    }

    [return: NativeTypeName("Sint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static short GetGamepadAxis(Ref<SDL_Gamepad> gamepad, GamepadAxis axis) =>
        DllImport.GetGamepadAxis(gamepad, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadAxis ISdl.GetGamepadAxisFromString([NativeTypeName("const char *")] sbyte* str) =>
        (
            (delegate* unmanaged<sbyte*, GamepadAxis>)
                nativeContext.LoadFunction("GetGamepadAxisFromString", "SDL3")
        )(str);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadAxisFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadAxis GetGamepadAxisFromString(
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.GetGamepadAxisFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadAxis ISdl.GetGamepadAxisFromString([NativeTypeName("const char *")] Ref<sbyte> str)
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (GamepadAxis)((ISdl)this).GetGamepadAxisFromString(__dsl_str);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadAxisFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadAxis GetGamepadAxisFromString(
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.GetGamepadAxisFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadBinding** ISdl.GetGamepadBindings(SDL_Gamepad* gamepad, int* count) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int*, GamepadBinding**>)
                nativeContext.LoadFunction("GetGamepadBindings", "SDL3")
        )(gamepad, count);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadBindings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadBinding** GetGamepadBindings(SDL_Gamepad* gamepad, int* count) =>
        DllImport.GetGamepadBindings(gamepad, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<GamepadBinding> ISdl.GetGamepadBindings(Ref<SDL_Gamepad> gamepad, Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (GamepadBinding**)((ISdl)this).GetGamepadBindings(__dsl_gamepad, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadBindings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<GamepadBinding> GetGamepadBindings(
        Ref<SDL_Gamepad> gamepad,
        Ref<int> count
    ) => DllImport.GetGamepadBindings(gamepad, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetGamepadButton(SDL_Gamepad* gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadButton, byte>)
                nativeContext.LoadFunction("GetGamepadButton", "SDL3")
        )(gamepad, button);

    [return: NativeTypeName("Uint8")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetGamepadButton(SDL_Gamepad* gamepad, GamepadButton button) =>
        DllImport.GetGamepadButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetGamepadButton(Ref<SDL_Gamepad> gamepad, GamepadButton button)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (byte)((ISdl)this).GetGamepadButton(__dsl_gamepad, button);
        }
    }

    [return: NativeTypeName("Uint8")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetGamepadButton(Ref<SDL_Gamepad> gamepad, GamepadButton button) =>
        DllImport.GetGamepadButton(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButton ISdl.GetGamepadButtonFromString([NativeTypeName("const char *")] sbyte* str) =>
        (
            (delegate* unmanaged<sbyte*, GamepadButton>)
                nativeContext.LoadFunction("GetGamepadButtonFromString", "SDL3")
        )(str);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButton GetGamepadButtonFromString(
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.GetGamepadButtonFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButton ISdl.GetGamepadButtonFromString([NativeTypeName("const char *")] Ref<sbyte> str)
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (GamepadButton)((ISdl)this).GetGamepadButtonFromString(__dsl_str);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButton GetGamepadButtonFromString(
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.GetGamepadButtonFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButtonLabel ISdl.GetGamepadButtonLabel(SDL_Gamepad* gamepad, GamepadButton button) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadButton, GamepadButtonLabel>)
                nativeContext.LoadFunction("GetGamepadButtonLabel", "SDL3")
        )(gamepad, button);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonLabel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButtonLabel GetGamepadButtonLabel(
        SDL_Gamepad* gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadButtonLabel(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButtonLabel ISdl.GetGamepadButtonLabel(Ref<SDL_Gamepad> gamepad, GamepadButton button)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (GamepadButtonLabel)((ISdl)this).GetGamepadButtonLabel(__dsl_gamepad, button);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadButtonLabel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButtonLabel GetGamepadButtonLabel(
        Ref<SDL_Gamepad> gamepad,
        GamepadButton button
    ) => DllImport.GetGamepadButtonLabel(gamepad, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadButtonLabel ISdl.GetGamepadButtonLabelForType(GamepadType type, GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadType, GamepadButton, GamepadButtonLabel>)
                nativeContext.LoadFunction("GetGamepadButtonLabelForType", "SDL3")
        )(type, button);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadButtonLabelForType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadButtonLabel GetGamepadButtonLabelForType(
        GamepadType type,
        GamepadButton button
    ) => DllImport.GetGamepadButtonLabelForType(type, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickConnectionState ISdl.GetGamepadConnectionState(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, JoystickConnectionState>)
                nativeContext.LoadFunction("GetGamepadConnectionState", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadConnectionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickConnectionState GetGamepadConnectionState(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadConnectionState(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickConnectionState ISdl.GetGamepadConnectionState(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (JoystickConnectionState)((ISdl)this).GetGamepadConnectionState(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadConnectionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickConnectionState GetGamepadConnectionState(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadConnectionState(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadFirmwareVersion(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ushort>)
                nativeContext.LoadFunction("GetGamepadFirmwareVersion", "SDL3")
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadFirmwareVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadFirmwareVersion(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadFirmwareVersion(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadFirmwareVersion(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (ushort)((ISdl)this).GetGamepadFirmwareVersion(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFirmwareVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadFirmwareVersion(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadFirmwareVersion(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Gamepad> ISdl.GetGamepadFromInstanceID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => (SDL_Gamepad*)((ISdl)this).GetGamepadFromInstanceIDRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Gamepad> GetGamepadFromInstanceID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadFromInstanceID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Gamepad* ISdl.GetGamepadFromInstanceIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, SDL_Gamepad*>)
                nativeContext.LoadFunction("SDL_GetGamepadFromInstanceID", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Gamepad* GetGamepadFromInstanceIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadFromInstanceIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Gamepad> ISdl.GetGamepadFromPlayerIndex(int player_index) =>
        (SDL_Gamepad*)((ISdl)this).GetGamepadFromPlayerIndexRaw(player_index);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Gamepad> GetGamepadFromPlayerIndex(int player_index) =>
        DllImport.GetGamepadFromPlayerIndex(player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Gamepad* ISdl.GetGamepadFromPlayerIndexRaw(int player_index) =>
        (
            (delegate* unmanaged<int, SDL_Gamepad*>)
                nativeContext.LoadFunction("SDL_GetGamepadFromPlayerIndex", "SDL3")
        )(player_index);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Gamepad* GetGamepadFromPlayerIndexRaw(int player_index) =>
        DllImport.GetGamepadFromPlayerIndexRaw(player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetGamepadInstanceGuid([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, Guid>)
                nativeContext.LoadFunction("GetGamepadInstanceGuid", "SDL3")
        )(instance_id);

    [return: NativeTypeName("SDL_JoystickGUID")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceGuid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetGamepadInstanceGuid(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceGuid(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGamepadInstanceID(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, uint>)
                nativeContext.LoadFunction("GetGamepadInstanceID", "SDL3")
        )(gamepad);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGamepadInstanceID(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadInstanceID(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGamepadInstanceID(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (uint)((ISdl)this).GetGamepadInstanceID(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("SDL_JoystickID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGamepadInstanceID(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadInstanceID(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadInstanceMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => (sbyte*)((ISdl)this).GetGamepadInstanceMappingRaw(instance_id);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadInstanceMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceMapping(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadInstanceMappingRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadInstanceMapping", "SDL3")
        )(instance_id);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadInstanceMappingRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceMappingRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadInstanceName([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetGamepadInstanceNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadInstanceName(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadInstanceNameRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadInstanceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadInstanceNameRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadInstancePath([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetGamepadInstancePathRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadInstancePath(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstancePath(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadInstancePathRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadInstancePath", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadInstancePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadInstancePathRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstancePathRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadInstancePlayerIndex([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)
                nativeContext.LoadFunction("GetGamepadInstancePlayerIndex", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstancePlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadInstancePlayerIndex(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstancePlayerIndex(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadInstanceProduct([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)
                nativeContext.LoadFunction("GetGamepadInstanceProduct", "SDL3")
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadInstanceProduct(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceProduct(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadInstanceProductVersion(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, ushort>)
                nativeContext.LoadFunction("GetGamepadInstanceProductVersion", "SDL3")
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadInstanceProductVersion(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceProductVersion(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadInstanceType([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, GamepadType>)
                nativeContext.LoadFunction("GetGamepadInstanceType", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadInstanceType(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceType(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadInstanceVendor([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)
                nativeContext.LoadFunction("GetGamepadInstanceVendor", "SDL3")
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadInstanceVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadInstanceVendor(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetGamepadInstanceVendor(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Joystick* ISdl.GetGamepadJoystick(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, SDL_Joystick*>)
                nativeContext.LoadFunction("GetGamepadJoystick", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Joystick* GetGamepadJoystick(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadJoystick(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Joystick> ISdl.GetGamepadJoystick(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (SDL_Joystick*)((ISdl)this).GetGamepadJoystick(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Joystick> GetGamepadJoystick(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadJoystick(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadMapping(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, sbyte*>)
                nativeContext.LoadFunction("GetGamepadMapping", "SDL3")
        )(gamepad);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadMapping(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadMapping(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadMapping(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (sbyte*)((ISdl)this).GetGamepadMapping(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadMapping(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadMapping(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadMappingForGuid([NativeTypeName("SDL_JoystickGUID")] Guid guid) =>
        (sbyte*)((ISdl)this).GetGamepadMappingForGuidRaw(guid);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadMappingForGuid(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid
    ) => DllImport.GetGamepadMappingForGuid(guid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadMappingForGuidRaw([NativeTypeName("SDL_JoystickGUID")] Guid guid) =>
        (
            (delegate* unmanaged<Guid, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadMappingForGUID", "SDL3")
        )(guid);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappingForGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadMappingForGuidRaw(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid
    ) => DllImport.GetGamepadMappingForGuidRaw(guid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GetGamepadMappings(int* count) =>
        (
            (delegate* unmanaged<int*, sbyte**>)
                nativeContext.LoadFunction("GetGamepadMappings", "SDL3")
        )(count);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GetGamepadMappings(int* count) => DllImport.GetGamepadMappings(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GetGamepadMappings(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (sbyte**)((ISdl)this).GetGamepadMappings(__dsl_count);
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GetGamepadMappings(Ref<int> count) =>
        DllImport.GetGamepadMappings(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadName(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, sbyte*>)
                nativeContext.LoadFunction("GetGamepadName", "SDL3")
        )(gamepad);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadName(SDL_Gamepad* gamepad) => DllImport.GetGamepadName(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadName(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (sbyte*)((ISdl)this).GetGamepadName(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadName(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadName(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadPath(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, sbyte*>)
                nativeContext.LoadFunction("GetGamepadPath", "SDL3")
        )(gamepad);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadPath(SDL_Gamepad* gamepad) => DllImport.GetGamepadPath(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadPath(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (sbyte*)((ISdl)this).GetGamepadPath(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadPath(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadPath(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadPlayerIndex(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int>)
                nativeContext.LoadFunction("GetGamepadPlayerIndex", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadPlayerIndex(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadPlayerIndex(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).GetGamepadPlayerIndex(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadPlayerIndex(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int*, PowerState>)
                nativeContext.LoadFunction("GetGamepadPowerInfo", "SDL3")
        )(gamepad, percent);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent) =>
        DllImport.GetGamepadPowerInfo(gamepad, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetGamepadPowerInfo(Ref<SDL_Gamepad> gamepad, Ref<int> percent)
    {
        fixed (int* __dsl_percent = percent)
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (PowerState)((ISdl)this).GetGamepadPowerInfo(__dsl_gamepad, __dsl_percent);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetGamepadPowerInfo(Ref<SDL_Gamepad> gamepad, Ref<int> percent) =>
        DllImport.GetGamepadPowerInfo(gamepad, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProduct(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ushort>)
                nativeContext.LoadFunction("GetGamepadProduct", "SDL3")
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProduct(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadProduct(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProduct(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (ushort)((ISdl)this).GetGamepadProduct(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProduct(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadProduct(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProductVersion(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ushort>)
                nativeContext.LoadFunction("GetGamepadProductVersion", "SDL3")
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProductVersion(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadProductVersion(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadProductVersion(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (ushort)((ISdl)this).GetGamepadProductVersion(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadProductVersion(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadProductVersion(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGamepadProperties(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, uint>)
                nativeContext.LoadFunction("GetGamepadProperties", "SDL3")
        )(gamepad);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGamepadProperties(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadProperties(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGamepadProperties(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (uint)((ISdl)this).GetGamepadProperties(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGamepadProperties(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadProperties(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetGamepads(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetGamepads", "SDL3"))(
            count
        );

    [return: NativeTypeName("SDL_JoystickID *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetGamepads(int* count) => DllImport.GetGamepads(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetGamepads(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetGamepads(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_JoystickID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetGamepads(Ref<int> count) => DllImport.GetGamepads(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadSensorData(
        SDL_Gamepad* gamepad,
        SensorType type,
        float* data,
        int num_values
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, SensorType, float*, int, int>)
                nativeContext.LoadFunction("GetGamepadSensorData", "SDL3")
        )(gamepad, type, data, num_values);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadSensorData(
        SDL_Gamepad* gamepad,
        SensorType type,
        float* data,
        int num_values
    ) => DllImport.GetGamepadSensorData(gamepad, type, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadSensorData(
        Ref<SDL_Gamepad> gamepad,
        SensorType type,
        Ref<float> data,
        int num_values
    )
    {
        fixed (float* __dsl_data = data)
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)
                ((ISdl)this).GetGamepadSensorData(__dsl_gamepad, type, __dsl_data, num_values);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadSensorData(
        Ref<SDL_Gamepad> gamepad,
        SensorType type,
        Ref<float> data,
        int num_values
    ) => DllImport.GetGamepadSensorData(gamepad, type, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SensorType type) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, SensorType, float>)
                nativeContext.LoadFunction("GetGamepadSensorDataRate", "SDL3")
        )(gamepad, type);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadSensorDataRate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SensorType type) =>
        DllImport.GetGamepadSensorDataRate(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetGamepadSensorDataRate(Ref<SDL_Gamepad> gamepad, SensorType type)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (float)((ISdl)this).GetGamepadSensorDataRate(__dsl_gamepad, type);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSensorDataRate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetGamepadSensorDataRate(Ref<SDL_Gamepad> gamepad, SensorType type) =>
        DllImport.GetGamepadSensorDataRate(gamepad, type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadSerial(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, sbyte*>)
                nativeContext.LoadFunction("GetGamepadSerial", "SDL3")
        )(gamepad);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadSerial(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadSerial(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadSerial(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (sbyte*)((ISdl)this).GetGamepadSerial(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadSerial(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadSerial(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetGamepadSteamHandle(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ulong>)
                nativeContext.LoadFunction("GetGamepadSteamHandle", "SDL3")
        )(gamepad);

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadSteamHandle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetGamepadSteamHandle(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadSteamHandle(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetGamepadSteamHandle(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (ulong)((ISdl)this).GetGamepadSteamHandle(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("Uint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadSteamHandle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetGamepadSteamHandle(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadSteamHandle(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadStringForAxis(GamepadAxis axis) =>
        (sbyte*)((ISdl)this).GetGamepadStringForAxisRaw(axis);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadStringForAxis(GamepadAxis axis) =>
        DllImport.GetGamepadStringForAxis(axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadStringForAxisRaw(GamepadAxis axis) =>
        (
            (delegate* unmanaged<GamepadAxis, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadStringForAxis", "SDL3")
        )(axis);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadStringForAxisRaw(GamepadAxis axis) =>
        DllImport.GetGamepadStringForAxisRaw(axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadStringForButton(GamepadButton button) =>
        (sbyte*)((ISdl)this).GetGamepadStringForButtonRaw(button);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadStringForButton(GamepadButton button) =>
        DllImport.GetGamepadStringForButton(button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadStringForButtonRaw(GamepadButton button) =>
        (
            (delegate* unmanaged<GamepadButton, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadStringForButton", "SDL3")
        )(button);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadStringForButtonRaw(GamepadButton button) =>
        DllImport.GetGamepadStringForButtonRaw(button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetGamepadStringForType(GamepadType type) =>
        (sbyte*)((ISdl)this).GetGamepadStringForTypeRaw(type);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetGamepadStringForType(GamepadType type) =>
        DllImport.GetGamepadStringForType(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetGamepadStringForTypeRaw(GamepadType type) =>
        (
            (delegate* unmanaged<GamepadType, sbyte*>)
                nativeContext.LoadFunction("SDL_GetGamepadStringForType", "SDL3")
        )(type);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadStringForType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetGamepadStringForTypeRaw(GamepadType type) =>
        DllImport.GetGamepadStringForTypeRaw(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadTouchpadFinger(
        SDL_Gamepad* gamepad,
        int touchpad,
        int finger,
        [NativeTypeName("Uint8 *")] byte* state,
        float* x,
        float* y,
        float* pressure
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int, int, byte*, float*, float*, float*, int>)
                nativeContext.LoadFunction("GetGamepadTouchpadFinger", "SDL3")
        )(gamepad, touchpad, finger, state, x, y, pressure);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadTouchpadFinger")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadTouchpadFinger(
        SDL_Gamepad* gamepad,
        int touchpad,
        int finger,
        [NativeTypeName("Uint8 *")] byte* state,
        float* x,
        float* y,
        float* pressure
    ) => DllImport.GetGamepadTouchpadFinger(gamepad, touchpad, finger, state, x, y, pressure);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetGamepadTouchpadFinger(
        Ref<SDL_Gamepad> gamepad,
        int touchpad,
        int finger,
        [NativeTypeName("Uint8 *")] Ref<byte> state,
        Ref<float> x,
        Ref<float> y,
        Ref<float> pressure
    )
    {
        fixed (float* __dsl_pressure = pressure)
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        fixed (byte* __dsl_state = state)
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)
                ((ISdl)this).GetGamepadTouchpadFinger(
                    __dsl_gamepad,
                    touchpad,
                    finger,
                    __dsl_state,
                    __dsl_x,
                    __dsl_y,
                    __dsl_pressure
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTouchpadFinger")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetGamepadTouchpadFinger(
        Ref<SDL_Gamepad> gamepad,
        int touchpad,
        int finger,
        [NativeTypeName("Uint8 *")] Ref<byte> state,
        Ref<float> x,
        Ref<float> y,
        Ref<float> pressure
    ) => DllImport.GetGamepadTouchpadFinger(gamepad, touchpad, finger, state, x, y, pressure);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadType(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadType>)
                nativeContext.LoadFunction("GetGamepadType", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadType(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadType(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadType(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (GamepadType)((ISdl)this).GetGamepadType(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadType(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadType(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadTypeFromString([NativeTypeName("const char *")] sbyte* str) =>
        (
            (delegate* unmanaged<sbyte*, GamepadType>)
                nativeContext.LoadFunction("GetGamepadTypeFromString", "SDL3")
        )(str);

    [NativeFunction("SDL3", EntryPoint = "GetGamepadTypeFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadTypeFromString(
        [NativeTypeName("const char *")] sbyte* str
    ) => DllImport.GetGamepadTypeFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetGamepadTypeFromString([NativeTypeName("const char *")] Ref<sbyte> str)
    {
        fixed (sbyte* __dsl_str = str)
        {
            return (GamepadType)((ISdl)this).GetGamepadTypeFromString(__dsl_str);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadTypeFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetGamepadTypeFromString(
        [NativeTypeName("const char *")] Ref<sbyte> str
    ) => DllImport.GetGamepadTypeFromString(str);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadVendor(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ushort>)
                nativeContext.LoadFunction("GetGamepadVendor", "SDL3")
        )(gamepad);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetGamepadVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadVendor(SDL_Gamepad* gamepad) =>
        DllImport.GetGamepadVendor(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetGamepadVendor(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (ushort)((ISdl)this).GetGamepadVendor(__dsl_gamepad);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGamepadVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetGamepadVendor(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetGamepadVendor(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGlobalMouseState(float* x, float* y) =>
        (
            (delegate* unmanaged<float*, float*, uint>)
                nativeContext.LoadFunction("GetGlobalMouseState", "SDL3")
        )(x, y);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetGlobalMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGlobalMouseState(float* x, float* y) =>
        DllImport.GetGlobalMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGlobalMouseState(Ref<float> x, Ref<float> y)
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)((ISdl)this).GetGlobalMouseState(__dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGlobalMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGlobalMouseState(Ref<float> x, Ref<float> y) =>
        DllImport.GetGlobalMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetGlobalProperties() =>
        ((delegate* unmanaged<uint>)nativeContext.LoadFunction("GetGlobalProperties", "SDL3"))();

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetGlobalProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetGlobalProperties() => DllImport.GetGlobalProperties();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GetGrabbedWindow() => (SDL_Window*)((ISdl)this).GetGrabbedWindowRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GetGrabbedWindow() => DllImport.GetGrabbedWindow();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GetGrabbedWindowRaw() =>
        (
            (delegate* unmanaged<SDL_Window*>)
                nativeContext.LoadFunction("SDL_GetGrabbedWindow", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetGrabbedWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GetGrabbedWindowRaw() => DllImport.GetGrabbedWindowRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetHapticEffectStatus(SDL_Haptic* haptic, int effect) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, int>)
                nativeContext.LoadFunction("GetHapticEffectStatus", "SDL3")
        )(haptic, effect);

    [NativeFunction("SDL3", EntryPoint = "GetHapticEffectStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetHapticEffectStatus(SDL_Haptic* haptic, int effect) =>
        DllImport.GetHapticEffectStatus(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetHapticEffectStatus(Ref<SDL_Haptic> haptic, int effect)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).GetHapticEffectStatus(__dsl_haptic, effect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticEffectStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetHapticEffectStatus(Ref<SDL_Haptic> haptic, int effect) =>
        DllImport.GetHapticEffectStatus(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetHapticFeatures(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, uint>)
                nativeContext.LoadFunction("GetHapticFeatures", "SDL3")
        )(haptic);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetHapticFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetHapticFeatures(SDL_Haptic* haptic) => DllImport.GetHapticFeatures(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetHapticFeatures(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (uint)((ISdl)this).GetHapticFeatures(__dsl_haptic);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFeatures")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetHapticFeatures(Ref<SDL_Haptic> haptic) =>
        DllImport.GetHapticFeatures(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Haptic> ISdl.GetHapticFromInstanceID(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) => (SDL_Haptic*)((ISdl)this).GetHapticFromInstanceIDRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Haptic> GetHapticFromInstanceID(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) => DllImport.GetHapticFromInstanceID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Haptic* ISdl.GetHapticFromInstanceIDRaw(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, SDL_Haptic*>)
                nativeContext.LoadFunction("SDL_GetHapticFromInstanceID", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Haptic* GetHapticFromInstanceIDRaw(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) => DllImport.GetHapticFromInstanceIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetHapticInstanceID(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, uint>)
                nativeContext.LoadFunction("GetHapticInstanceID", "SDL3")
        )(haptic);

    [return: NativeTypeName("SDL_HapticID")]
    [NativeFunction("SDL3", EntryPoint = "GetHapticInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetHapticInstanceID(SDL_Haptic* haptic) =>
        DllImport.GetHapticInstanceID(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetHapticInstanceID(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (uint)((ISdl)this).GetHapticInstanceID(__dsl_haptic);
        }
    }

    [return: NativeTypeName("SDL_HapticID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetHapticInstanceID(Ref<SDL_Haptic> haptic) =>
        DllImport.GetHapticInstanceID(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetHapticInstanceName([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetHapticInstanceNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetHapticInstanceName(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) => DllImport.GetHapticInstanceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetHapticInstanceNameRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetHapticInstanceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetHapticInstanceNameRaw(
        [NativeTypeName("SDL_HapticID")] uint instance_id
    ) => DllImport.GetHapticInstanceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetHapticName(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, sbyte*>)
                nativeContext.LoadFunction("GetHapticName", "SDL3")
        )(haptic);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetHapticName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetHapticName(SDL_Haptic* haptic) => DllImport.GetHapticName(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetHapticName(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (sbyte*)((ISdl)this).GetHapticName(__dsl_haptic);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHapticName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetHapticName(Ref<SDL_Haptic> haptic) =>
        DllImport.GetHapticName(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetHaptics(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetHaptics", "SDL3"))(count);

    [return: NativeTypeName("SDL_HapticID *")]
    [NativeFunction("SDL3", EntryPoint = "GetHaptics")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetHaptics(int* count) => DllImport.GetHaptics(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetHaptics(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetHaptics(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_HapticID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHaptics")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetHaptics(Ref<int> count) => DllImport.GetHaptics(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetHint([NativeTypeName("const char *")] sbyte* name) =>
        ((delegate* unmanaged<sbyte*, sbyte*>)nativeContext.LoadFunction("GetHint", "SDL3"))(name);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetHint([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetHint([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (sbyte*)((ISdl)this).GetHint(__dsl_name);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.GetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetHintBoolean(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_bool")] int default_value
    ) =>
        (
            (delegate* unmanaged<sbyte*, int, int>)
                nativeContext.LoadFunction("GetHintBoolean", "SDL3")
        )(name, default_value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetHintBoolean")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetHintBoolean(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_bool")] int default_value
    ) => DllImport.GetHintBoolean(name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetHintBoolean(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GetHintBoolean(__dsl_name, (int)default_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetHintBoolean")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetHintBoolean(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_bool")] MaybeBool<int> default_value
    ) => DllImport.GetHintBoolean(name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetIOProperties(SDL_IOStream* context) =>
        (
            (delegate* unmanaged<SDL_IOStream*, uint>)
                nativeContext.LoadFunction("GetIOProperties", "SDL3")
        )(context);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetIOProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetIOProperties(SDL_IOStream* context) => DllImport.GetIOProperties(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetIOProperties(Ref<SDL_IOStream> context)
    {
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (uint)((ISdl)this).GetIOProperties(__dsl_context);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetIOProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetIOProperties(Ref<SDL_IOStream> context) =>
        DllImport.GetIOProperties(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetIOSize(SDL_IOStream* context) =>
        ((delegate* unmanaged<SDL_IOStream*, long>)nativeContext.LoadFunction("GetIOSize", "SDL3"))(
            context
        );

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "GetIOSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetIOSize(SDL_IOStream* context) => DllImport.GetIOSize(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetIOSize(Ref<SDL_IOStream> context)
    {
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (long)((ISdl)this).GetIOSize(__dsl_context);
        }
    }

    [return: NativeTypeName("Sint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetIOSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetIOSize(Ref<SDL_IOStream> context) => DllImport.GetIOSize(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStatus ISdl.GetIOStatus(SDL_IOStream* context) =>
        (
            (delegate* unmanaged<SDL_IOStream*, IOStatus>)
                nativeContext.LoadFunction("GetIOStatus", "SDL3")
        )(context);

    [NativeFunction("SDL3", EntryPoint = "GetIOStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStatus GetIOStatus(SDL_IOStream* context) => DllImport.GetIOStatus(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    IOStatus ISdl.GetIOStatus(Ref<SDL_IOStream> context)
    {
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (IOStatus)((ISdl)this).GetIOStatus(__dsl_context);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetIOStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static IOStatus GetIOStatus(Ref<SDL_IOStream> context) => DllImport.GetIOStatus(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    short ISdl.GetJoystickAxis(SDL_Joystick* joystick, int axis) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, short>)
                nativeContext.LoadFunction("GetJoystickAxis", "SDL3")
        )(joystick, axis);

    [return: NativeTypeName("Sint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static short GetJoystickAxis(SDL_Joystick* joystick, int axis) =>
        DllImport.GetJoystickAxis(joystick, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    short ISdl.GetJoystickAxis(Ref<SDL_Joystick> joystick, int axis)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (short)((ISdl)this).GetJoystickAxis(__dsl_joystick, axis);
        }
    }

    [return: NativeTypeName("Sint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static short GetJoystickAxis(Ref<SDL_Joystick> joystick, int axis) =>
        DllImport.GetJoystickAxis(joystick, axis);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickAxisInitialState(
        SDL_Joystick* joystick,
        int axis,
        [NativeTypeName("Sint16 *")] short* state
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, short*, int>)
                nativeContext.LoadFunction("GetJoystickAxisInitialState", "SDL3")
        )(joystick, axis, state);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickAxisInitialState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickAxisInitialState(
        SDL_Joystick* joystick,
        int axis,
        [NativeTypeName("Sint16 *")] short* state
    ) => DllImport.GetJoystickAxisInitialState(joystick, axis, state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetJoystickAxisInitialState(
        Ref<SDL_Joystick> joystick,
        int axis,
        [NativeTypeName("Sint16 *")] Ref<short> state
    )
    {
        fixed (short* __dsl_state = state)
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).GetJoystickAxisInitialState(__dsl_joystick, axis, __dsl_state);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickAxisInitialState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetJoystickAxisInitialState(
        Ref<SDL_Joystick> joystick,
        int axis,
        [NativeTypeName("Sint16 *")] Ref<short> state
    ) => DllImport.GetJoystickAxisInitialState(joystick, axis, state);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, int*, int*, int>)
                nativeContext.LoadFunction("GetJoystickBall", "SDL3")
        )(joystick, ball, dx, dy);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickBall")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy) =>
        DllImport.GetJoystickBall(joystick, ball, dx, dy);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickBall(Ref<SDL_Joystick> joystick, int ball, Ref<int> dx, Ref<int> dy)
    {
        fixed (int* __dsl_dy = dy)
        fixed (int* __dsl_dx = dx)
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).GetJoystickBall(__dsl_joystick, ball, __dsl_dx, __dsl_dy);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickBall")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickBall(
        Ref<SDL_Joystick> joystick,
        int ball,
        Ref<int> dx,
        Ref<int> dy
    ) => DllImport.GetJoystickBall(joystick, ball, dx, dy);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickButton(SDL_Joystick* joystick, int button) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, byte>)
                nativeContext.LoadFunction("GetJoystickButton", "SDL3")
        )(joystick, button);

    [return: NativeTypeName("Uint8")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickButton(SDL_Joystick* joystick, int button) =>
        DllImport.GetJoystickButton(joystick, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickButton(Ref<SDL_Joystick> joystick, int button)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (byte)((ISdl)this).GetJoystickButton(__dsl_joystick, button);
        }
    }

    [return: NativeTypeName("Uint8")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickButton(Ref<SDL_Joystick> joystick, int button) =>
        DllImport.GetJoystickButton(joystick, button);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickConnectionState ISdl.GetJoystickConnectionState(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, JoystickConnectionState>)
                nativeContext.LoadFunction("GetJoystickConnectionState", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickConnectionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickConnectionState GetJoystickConnectionState(SDL_Joystick* joystick) =>
        DllImport.GetJoystickConnectionState(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickConnectionState ISdl.GetJoystickConnectionState(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (JoystickConnectionState)((ISdl)this).GetJoystickConnectionState(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickConnectionState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickConnectionState GetJoystickConnectionState(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickConnectionState(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickFirmwareVersion(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, ushort>)
                nativeContext.LoadFunction("GetJoystickFirmwareVersion", "SDL3")
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickFirmwareVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickFirmwareVersion(SDL_Joystick* joystick) =>
        DllImport.GetJoystickFirmwareVersion(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickFirmwareVersion(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (ushort)((ISdl)this).GetJoystickFirmwareVersion(__dsl_joystick);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFirmwareVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickFirmwareVersion(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickFirmwareVersion(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Joystick> ISdl.GetJoystickFromInstanceID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => (SDL_Joystick*)((ISdl)this).GetJoystickFromInstanceIDRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Joystick> GetJoystickFromInstanceID(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickFromInstanceID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Joystick* ISdl.GetJoystickFromInstanceIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, SDL_Joystick*>)
                nativeContext.LoadFunction("SDL_GetJoystickFromInstanceID", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Joystick* GetJoystickFromInstanceIDRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickFromInstanceIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Joystick> ISdl.GetJoystickFromPlayerIndex(int player_index) =>
        (SDL_Joystick*)((ISdl)this).GetJoystickFromPlayerIndexRaw(player_index);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Joystick> GetJoystickFromPlayerIndex(int player_index) =>
        DllImport.GetJoystickFromPlayerIndex(player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Joystick* ISdl.GetJoystickFromPlayerIndexRaw(int player_index) =>
        (
            (delegate* unmanaged<int, SDL_Joystick*>)
                nativeContext.LoadFunction("SDL_GetJoystickFromPlayerIndex", "SDL3")
        )(player_index);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Joystick* GetJoystickFromPlayerIndexRaw(int player_index) =>
        DllImport.GetJoystickFromPlayerIndexRaw(player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickGuid(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, Guid>)
                nativeContext.LoadFunction("GetJoystickGuid", "SDL3")
        )(joystick);

    [return: NativeTypeName("SDL_JoystickGUID")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickGuid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickGuid(SDL_Joystick* joystick) =>
        DllImport.GetJoystickGuid(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickGuid(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (Guid)((ISdl)this).GetJoystickGuid(__dsl_joystick);
        }
    }

    [return: NativeTypeName("SDL_JoystickGUID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickGuid(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickGuid(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickGuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
        (
            (delegate* unmanaged<sbyte*, Guid>)
                nativeContext.LoadFunction("GetJoystickGuidFromString", "SDL3")
        )(pchGUID);

    [return: NativeTypeName("SDL_JoystickGUID")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickGuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
        DllImport.GetJoystickGuidFromString(pchGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickGuidFromString([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
    {
        fixed (sbyte* __dsl_pchGUID = pchGUID)
        {
            return (Guid)((ISdl)this).GetJoystickGuidFromString(__dsl_pchGUID);
        }
    }

    [return: NativeTypeName("SDL_JoystickGUID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickGuidFromString(
        [NativeTypeName("const char *")] Ref<sbyte> pchGUID
    ) => DllImport.GetJoystickGuidFromString(pchGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetJoystickGuidInfo(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("Uint16 *")] ushort* vendor,
        [NativeTypeName("Uint16 *")] ushort* product,
        [NativeTypeName("Uint16 *")] ushort* version,
        [NativeTypeName("Uint16 *")] ushort* crc16
    ) =>
        (
            (delegate* unmanaged<Guid, ushort*, ushort*, ushort*, ushort*, void>)
                nativeContext.LoadFunction("GetJoystickGuidInfo", "SDL3")
        )(guid, vendor, product, version, crc16);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetJoystickGuidInfo(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("Uint16 *")] ushort* vendor,
        [NativeTypeName("Uint16 *")] ushort* product,
        [NativeTypeName("Uint16 *")] ushort* version,
        [NativeTypeName("Uint16 *")] ushort* crc16
    ) => DllImport.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetJoystickGuidInfo(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
        [NativeTypeName("Uint16 *")] Ref<ushort> product,
        [NativeTypeName("Uint16 *")] Ref<ushort> version,
        [NativeTypeName("Uint16 *")] Ref<ushort> crc16
    )
    {
        fixed (ushort* __dsl_crc16 = crc16)
        fixed (ushort* __dsl_version = version)
        fixed (ushort* __dsl_product = product)
        fixed (ushort* __dsl_vendor = vendor)
        {
            ((ISdl)this).GetJoystickGuidInfo(
                guid,
                __dsl_vendor,
                __dsl_product,
                __dsl_version,
                __dsl_crc16
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetJoystickGuidInfo(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("Uint16 *")] Ref<ushort> vendor,
        [NativeTypeName("Uint16 *")] Ref<ushort> product,
        [NativeTypeName("Uint16 *")] Ref<ushort> version,
        [NativeTypeName("Uint16 *")] Ref<ushort> crc16
    ) => DllImport.GetJoystickGuidInfo(guid, vendor, product, version, crc16);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickGuidString(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("char *")] sbyte* pszGUID,
        int cbGUID
    ) =>
        (
            (delegate* unmanaged<Guid, sbyte*, int, int>)
                nativeContext.LoadFunction("GetJoystickGuidString", "SDL3")
        )(guid, pszGUID, cbGUID);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickGuidString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickGuidString(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("char *")] sbyte* pszGUID,
        int cbGUID
    ) => DllImport.GetJoystickGuidString(guid, pszGUID, cbGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickGuidString(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("char *")] Ref<sbyte> pszGUID,
        int cbGUID
    )
    {
        fixed (sbyte* __dsl_pszGUID = pszGUID)
        {
            return (int)((ISdl)this).GetJoystickGuidString(guid, __dsl_pszGUID, cbGUID);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickGUIDString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickGuidString(
        [NativeTypeName("SDL_JoystickGUID")] Guid guid,
        [NativeTypeName("char *")] Ref<sbyte> pszGUID,
        int cbGUID
    ) => DllImport.GetJoystickGuidString(guid, pszGUID, cbGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickHat(SDL_Joystick* joystick, int hat) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, byte>)
                nativeContext.LoadFunction("GetJoystickHat", "SDL3")
        )(joystick, hat);

    [return: NativeTypeName("Uint8")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickHat(SDL_Joystick* joystick, int hat) =>
        DllImport.GetJoystickHat(joystick, hat);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte ISdl.GetJoystickHat(Ref<SDL_Joystick> joystick, int hat)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (byte)((ISdl)this).GetJoystickHat(__dsl_joystick, hat);
        }
    }

    [return: NativeTypeName("Uint8")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte GetJoystickHat(Ref<SDL_Joystick> joystick, int hat) =>
        DllImport.GetJoystickHat(joystick, hat);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetJoystickInstanceGuid([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, Guid>)
                nativeContext.LoadFunction("GetJoystickInstanceGuid", "SDL3")
        )(instance_id);

    [return: NativeTypeName("SDL_JoystickGUID")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceGuid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetJoystickInstanceGuid(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceGuid(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetJoystickInstanceID(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, uint>)
                nativeContext.LoadFunction("GetJoystickInstanceID", "SDL3")
        )(joystick);

    [return: NativeTypeName("SDL_JoystickID")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetJoystickInstanceID(SDL_Joystick* joystick) =>
        DllImport.GetJoystickInstanceID(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetJoystickInstanceID(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (uint)((ISdl)this).GetJoystickInstanceID(__dsl_joystick);
        }
    }

    [return: NativeTypeName("SDL_JoystickID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetJoystickInstanceID(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickInstanceID(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickInstanceName([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetJoystickInstanceNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickInstanceName(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickInstanceNameRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetJoystickInstanceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickInstanceNameRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickInstancePath([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetJoystickInstancePathRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickInstancePath(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstancePath(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickInstancePathRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetJoystickInstancePath", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickInstancePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickInstancePathRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstancePathRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickInstancePlayerIndex([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)
                nativeContext.LoadFunction("GetJoystickInstancePlayerIndex", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstancePlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickInstancePlayerIndex(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstancePlayerIndex(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickInstanceProduct([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)
                nativeContext.LoadFunction("GetJoystickInstanceProduct", "SDL3")
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickInstanceProduct(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceProduct(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickInstanceProductVersion(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, ushort>)
                nativeContext.LoadFunction("GetJoystickInstanceProductVersion", "SDL3")
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickInstanceProductVersion(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceProductVersion(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickType ISdl.GetJoystickInstanceType(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, JoystickType>)
                nativeContext.LoadFunction("GetJoystickInstanceType", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickType GetJoystickInstanceType(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceType(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickInstanceVendor([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, ushort>)
                nativeContext.LoadFunction("GetJoystickInstanceVendor", "SDL3")
        )(instance_id);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickInstanceVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickInstanceVendor(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetJoystickInstanceVendor(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickName(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, sbyte*>)
                nativeContext.LoadFunction("GetJoystickName", "SDL3")
        )(joystick);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickName(SDL_Joystick* joystick) =>
        DllImport.GetJoystickName(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickName(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (sbyte*)((ISdl)this).GetJoystickName(__dsl_joystick);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickName(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickName(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickPath(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, sbyte*>)
                nativeContext.LoadFunction("GetJoystickPath", "SDL3")
        )(joystick);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickPath(SDL_Joystick* joystick) =>
        DllImport.GetJoystickPath(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickPath(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (sbyte*)((ISdl)this).GetJoystickPath(__dsl_joystick);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickPath(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickPath(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickPlayerIndex(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("GetJoystickPlayerIndex", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickPlayerIndex(SDL_Joystick* joystick) =>
        DllImport.GetJoystickPlayerIndex(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetJoystickPlayerIndex(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).GetJoystickPlayerIndex(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetJoystickPlayerIndex(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickPlayerIndex(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int*, PowerState>)
                nativeContext.LoadFunction("GetJoystickPowerInfo", "SDL3")
        )(joystick, percent);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent) =>
        DllImport.GetJoystickPowerInfo(joystick, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetJoystickPowerInfo(Ref<SDL_Joystick> joystick, Ref<int> percent)
    {
        fixed (int* __dsl_percent = percent)
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (PowerState)((ISdl)this).GetJoystickPowerInfo(__dsl_joystick, __dsl_percent);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetJoystickPowerInfo(Ref<SDL_Joystick> joystick, Ref<int> percent) =>
        DllImport.GetJoystickPowerInfo(joystick, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProduct(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, ushort>)
                nativeContext.LoadFunction("GetJoystickProduct", "SDL3")
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProduct(SDL_Joystick* joystick) =>
        DllImport.GetJoystickProduct(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProduct(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (ushort)((ISdl)this).GetJoystickProduct(__dsl_joystick);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProduct")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProduct(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickProduct(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProductVersion(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, ushort>)
                nativeContext.LoadFunction("GetJoystickProductVersion", "SDL3")
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProductVersion(SDL_Joystick* joystick) =>
        DllImport.GetJoystickProductVersion(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickProductVersion(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (ushort)((ISdl)this).GetJoystickProductVersion(__dsl_joystick);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProductVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickProductVersion(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickProductVersion(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetJoystickProperties(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, uint>)
                nativeContext.LoadFunction("GetJoystickProperties", "SDL3")
        )(joystick);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetJoystickProperties(SDL_Joystick* joystick) =>
        DllImport.GetJoystickProperties(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetJoystickProperties(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (uint)((ISdl)this).GetJoystickProperties(__dsl_joystick);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetJoystickProperties(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickProperties(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetJoysticks(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetJoysticks", "SDL3"))(
            count
        );

    [return: NativeTypeName("SDL_JoystickID *")]
    [NativeFunction("SDL3", EntryPoint = "GetJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetJoysticks(int* count) => DllImport.GetJoysticks(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetJoysticks(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetJoysticks(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_JoystickID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetJoysticks(Ref<int> count) => DllImport.GetJoysticks(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetJoystickSerial(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, sbyte*>)
                nativeContext.LoadFunction("GetJoystickSerial", "SDL3")
        )(joystick);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetJoystickSerial(SDL_Joystick* joystick) =>
        DllImport.GetJoystickSerial(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetJoystickSerial(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (sbyte*)((ISdl)this).GetJoystickSerial(__dsl_joystick);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickSerial")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetJoystickSerial(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickSerial(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickType ISdl.GetJoystickType(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, JoystickType>)
                nativeContext.LoadFunction("GetJoystickType", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetJoystickType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickType GetJoystickType(SDL_Joystick* joystick) =>
        DllImport.GetJoystickType(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    JoystickType ISdl.GetJoystickType(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (JoystickType)((ISdl)this).GetJoystickType(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static JoystickType GetJoystickType(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickType(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickVendor(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, ushort>)
                nativeContext.LoadFunction("GetJoystickVendor", "SDL3")
        )(joystick);

    [return: NativeTypeName("Uint16")]
    [NativeFunction("SDL3", EntryPoint = "GetJoystickVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickVendor(SDL_Joystick* joystick) =>
        DllImport.GetJoystickVendor(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ushort ISdl.GetJoystickVendor(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (ushort)((ISdl)this).GetJoystickVendor(__dsl_joystick);
        }
    }

    [return: NativeTypeName("Uint16")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetJoystickVendor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ushort GetJoystickVendor(Ref<SDL_Joystick> joystick) =>
        DllImport.GetJoystickVendor(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GetKeyboardFocus() => (SDL_Window*)((ISdl)this).GetKeyboardFocusRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GetKeyboardFocus() => DllImport.GetKeyboardFocus();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GetKeyboardFocusRaw() =>
        (
            (delegate* unmanaged<SDL_Window*>)
                nativeContext.LoadFunction("SDL_GetKeyboardFocus", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GetKeyboardFocusRaw() => DllImport.GetKeyboardFocusRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetKeyboardInstanceName([NativeTypeName("SDL_KeyboardID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetKeyboardInstanceNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetKeyboardInstanceName(
        [NativeTypeName("SDL_KeyboardID")] uint instance_id
    ) => DllImport.GetKeyboardInstanceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetKeyboardInstanceNameRaw([NativeTypeName("SDL_KeyboardID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetKeyboardInstanceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetKeyboardInstanceNameRaw(
        [NativeTypeName("SDL_KeyboardID")] uint instance_id
    ) => DllImport.GetKeyboardInstanceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetKeyboards(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetKeyboards", "SDL3"))(
            count
        );

    [return: NativeTypeName("SDL_KeyboardID *")]
    [NativeFunction("SDL3", EntryPoint = "GetKeyboards")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetKeyboards(int* count) => DllImport.GetKeyboards(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetKeyboards(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetKeyboards(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_KeyboardID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboards")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetKeyboards(Ref<int> count) => DllImport.GetKeyboards(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    byte* ISdl.GetKeyboardState(int* numkeys) =>
        ((delegate* unmanaged<int*, byte*>)nativeContext.LoadFunction("GetKeyboardState", "SDL3"))(
            numkeys
        );

    [return: NativeTypeName("const Uint8 *")]
    [NativeFunction("SDL3", EntryPoint = "GetKeyboardState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static byte* GetKeyboardState(int* numkeys) => DllImport.GetKeyboardState(numkeys);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<byte> ISdl.GetKeyboardState(Ref<int> numkeys)
    {
        fixed (int* __dsl_numkeys = numkeys)
        {
            return (byte*)((ISdl)this).GetKeyboardState(__dsl_numkeys);
        }
    }

    [return: NativeTypeName("const Uint8 *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyboardState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<byte> GetKeyboardState(Ref<int> numkeys) =>
        DllImport.GetKeyboardState(numkeys);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("GetKeyFromName", "SDL3"))(
            name
        );

    [return: NativeTypeName("SDL_Keycode")]
    [NativeFunction("SDL3", EntryPoint = "GetKeyFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetKeyFromName([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetKeyFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).GetKeyFromName(__dsl_name);
        }
    }

    [return: NativeTypeName("SDL_Keycode")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetKeyFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.GetKeyFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetKeyFromScancode(Scancode scancode) =>
        (
            (delegate* unmanaged<Scancode, int>)
                nativeContext.LoadFunction("GetKeyFromScancode", "SDL3")
        )(scancode);

    [return: NativeTypeName("SDL_Keycode")]
    [NativeFunction("SDL3", EntryPoint = "GetKeyFromScancode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetKeyFromScancode(Scancode scancode) =>
        DllImport.GetKeyFromScancode(scancode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetKeyName([NativeTypeName("SDL_Keycode")] int key) =>
        (sbyte*)((ISdl)this).GetKeyNameRaw(key);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetKeyName([NativeTypeName("SDL_Keycode")] int key) =>
        DllImport.GetKeyName(key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetKeyNameRaw([NativeTypeName("SDL_Keycode")] int key) =>
        ((delegate* unmanaged<int, sbyte*>)nativeContext.LoadFunction("SDL_GetKeyName", "SDL3"))(
            key
        );

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetKeyName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetKeyNameRaw([NativeTypeName("SDL_Keycode")] int key) =>
        DllImport.GetKeyNameRaw(key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
        void** userdata
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>*,
                void**,
                void>)
                nativeContext.LoadFunction("GetLogOutputFunction", "SDL3")
        )(callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "GetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
        void** userdata
    ) => DllImport.GetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
        Ref2D userdata
    )
    {
        fixed (void** __dsl_userdata = userdata)
        {
            ((ISdl)this).GetLogOutputFunction(callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction *")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void>* callback,
        Ref2D userdata
    ) => DllImport.GetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMasksForPixelFormatEnum(
        PixelFormatEnum format,
        int* bpp,
        [NativeTypeName("Uint32 *")] uint* Rmask,
        [NativeTypeName("Uint32 *")] uint* Gmask,
        [NativeTypeName("Uint32 *")] uint* Bmask,
        [NativeTypeName("Uint32 *")] uint* Amask
    ) =>
        (
            (delegate* unmanaged<PixelFormatEnum, int*, uint*, uint*, uint*, uint*, int>)
                nativeContext.LoadFunction("GetMasksForPixelFormatEnum", "SDL3")
        )(format, bpp, Rmask, Gmask, Bmask, Amask);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetMasksForPixelFormatEnum")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMasksForPixelFormatEnum(
        PixelFormatEnum format,
        int* bpp,
        [NativeTypeName("Uint32 *")] uint* Rmask,
        [NativeTypeName("Uint32 *")] uint* Gmask,
        [NativeTypeName("Uint32 *")] uint* Bmask,
        [NativeTypeName("Uint32 *")] uint* Amask
    ) => DllImport.GetMasksForPixelFormatEnum(format, bpp, Rmask, Gmask, Bmask, Amask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetMasksForPixelFormatEnum(
        PixelFormatEnum format,
        Ref<int> bpp,
        [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Amask
    )
    {
        fixed (uint* __dsl_Amask = Amask)
        fixed (uint* __dsl_Bmask = Bmask)
        fixed (uint* __dsl_Gmask = Gmask)
        fixed (uint* __dsl_Rmask = Rmask)
        fixed (int* __dsl_bpp = bpp)
        {
            return (MaybeBool<int>)
                (int)
                    ((ISdl)this).GetMasksForPixelFormatEnum(
                        format,
                        __dsl_bpp,
                        __dsl_Rmask,
                        __dsl_Gmask,
                        __dsl_Bmask,
                        __dsl_Amask
                    );
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMasksForPixelFormatEnum")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetMasksForPixelFormatEnum(
        PixelFormatEnum format,
        Ref<int> bpp,
        [NativeTypeName("Uint32 *")] Ref<uint> Rmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Gmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Bmask,
        [NativeTypeName("Uint32 *")] Ref<uint> Amask
    ) => DllImport.GetMasksForPixelFormatEnum(format, bpp, Rmask, Gmask, Bmask, Amask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMaxHapticEffects(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("GetMaxHapticEffects", "SDL3")
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "GetMaxHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMaxHapticEffects(SDL_Haptic* haptic) =>
        DllImport.GetMaxHapticEffects(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMaxHapticEffects(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).GetMaxHapticEffects(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMaxHapticEffects(Ref<SDL_Haptic> haptic) =>
        DllImport.GetMaxHapticEffects(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMaxHapticEffectsPlaying(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("GetMaxHapticEffectsPlaying", "SDL3")
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "GetMaxHapticEffectsPlaying")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMaxHapticEffectsPlaying(SDL_Haptic* haptic) =>
        DllImport.GetMaxHapticEffectsPlaying(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetMaxHapticEffectsPlaying(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).GetMaxHapticEffectsPlaying(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetMaxHapticEffectsPlaying(Ref<SDL_Haptic> haptic) =>
        DllImport.GetMaxHapticEffectsPlaying(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetMice(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetMice", "SDL3"))(count);

    [return: NativeTypeName("SDL_MouseID *")]
    [NativeFunction("SDL3", EntryPoint = "GetMice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetMice(int* count) => DllImport.GetMice(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetMice(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetMice(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_MouseID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetMice(Ref<int> count) => DllImport.GetMice(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Keymod ISdl.GetModState() =>
        ((delegate* unmanaged<Keymod>)nativeContext.LoadFunction("GetModState", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetModState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Keymod GetModState() => DllImport.GetModState();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GetMouseFocus() => (SDL_Window*)((ISdl)this).GetMouseFocusRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GetMouseFocus() => DllImport.GetMouseFocus();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GetMouseFocusRaw() =>
        (
            (delegate* unmanaged<SDL_Window*>)
                nativeContext.LoadFunction("SDL_GetMouseFocus", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GetMouseFocusRaw() => DllImport.GetMouseFocusRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetMouseInstanceName([NativeTypeName("SDL_MouseID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetMouseInstanceNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetMouseInstanceName(
        [NativeTypeName("SDL_MouseID")] uint instance_id
    ) => DllImport.GetMouseInstanceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetMouseInstanceNameRaw([NativeTypeName("SDL_MouseID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetMouseInstanceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetMouseInstanceNameRaw(
        [NativeTypeName("SDL_MouseID")] uint instance_id
    ) => DllImport.GetMouseInstanceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetMouseState(float* x, float* y) =>
        (
            (delegate* unmanaged<float*, float*, uint>)
                nativeContext.LoadFunction("GetMouseState", "SDL3")
        )(x, y);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetMouseState(float* x, float* y) => DllImport.GetMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetMouseState(Ref<float> x, Ref<float> y)
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)((ISdl)this).GetMouseState(__dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetMouseState(Ref<float> x, Ref<float> y) => DllImport.GetMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayOrientation ISdl.GetNaturalDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) =>
        (
            (delegate* unmanaged<uint, DisplayOrientation>)
                nativeContext.LoadFunction("GetNaturalDisplayOrientation", "SDL3")
        )(displayID);

    [NativeFunction("SDL3", EntryPoint = "GetNaturalDisplayOrientation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayOrientation GetNaturalDisplayOrientation(
        [NativeTypeName("SDL_DisplayID")] uint displayID
    ) => DllImport.GetNaturalDisplayOrientation(displayID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumAudioDrivers() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetNumAudioDrivers", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetNumAudioDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumAudioDrivers() => DllImport.GetNumAudioDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, long, long>)
                nativeContext.LoadFunction("GetNumberProperty", "SDL3")
        )(props, name, default_value);

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "GetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long default_value
    ) => DllImport.GetNumberProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long default_value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (long)((ISdl)this).GetNumberProperty(props, __dsl_name, default_value);
        }
    }

    [return: NativeTypeName("Sint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long GetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long default_value
    ) => DllImport.GetNumberProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumCameraDrivers() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetNumCameraDrivers", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetNumCameraDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumCameraDrivers() => DllImport.GetNumCameraDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int, int>)
                nativeContext.LoadFunction("GetNumGamepadTouchpadFingers", "SDL3")
        )(gamepad, touchpad);

    [NativeFunction("SDL3", EntryPoint = "GetNumGamepadTouchpadFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad) =>
        DllImport.GetNumGamepadTouchpadFingers(gamepad, touchpad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumGamepadTouchpadFingers(Ref<SDL_Gamepad> gamepad, int touchpad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).GetNumGamepadTouchpadFingers(__dsl_gamepad, touchpad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumGamepadTouchpadFingers(Ref<SDL_Gamepad> gamepad, int touchpad) =>
        DllImport.GetNumGamepadTouchpadFingers(gamepad, touchpad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumGamepadTouchpads(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int>)
                nativeContext.LoadFunction("GetNumGamepadTouchpads", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "GetNumGamepadTouchpads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumGamepadTouchpads(SDL_Gamepad* gamepad) =>
        DllImport.GetNumGamepadTouchpads(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumGamepadTouchpads(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).GetNumGamepadTouchpads(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumGamepadTouchpads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumGamepadTouchpads(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetNumGamepadTouchpads(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumHapticAxes(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("GetNumHapticAxes", "SDL3")
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "GetNumHapticAxes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumHapticAxes(SDL_Haptic* haptic) => DllImport.GetNumHapticAxes(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumHapticAxes(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).GetNumHapticAxes(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumHapticAxes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumHapticAxes(Ref<SDL_Haptic> haptic) =>
        DllImport.GetNumHapticAxes(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickAxes(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("GetNumJoystickAxes", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetNumJoystickAxes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickAxes(SDL_Joystick* joystick) =>
        DllImport.GetNumJoystickAxes(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickAxes(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).GetNumJoystickAxes(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickAxes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickAxes(Ref<SDL_Joystick> joystick) =>
        DllImport.GetNumJoystickAxes(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickBalls(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("GetNumJoystickBalls", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetNumJoystickBalls")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickBalls(SDL_Joystick* joystick) =>
        DllImport.GetNumJoystickBalls(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickBalls(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).GetNumJoystickBalls(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickBalls")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickBalls(Ref<SDL_Joystick> joystick) =>
        DllImport.GetNumJoystickBalls(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickButtons(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("GetNumJoystickButtons", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetNumJoystickButtons")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickButtons(SDL_Joystick* joystick) =>
        DllImport.GetNumJoystickButtons(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickButtons(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).GetNumJoystickButtons(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickButtons")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickButtons(Ref<SDL_Joystick> joystick) =>
        DllImport.GetNumJoystickButtons(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickHats(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("GetNumJoystickHats", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "GetNumJoystickHats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickHats(SDL_Joystick* joystick) =>
        DllImport.GetNumJoystickHats(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumJoystickHats(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).GetNumJoystickHats(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetNumJoystickHats")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumJoystickHats(Ref<SDL_Joystick> joystick) =>
        DllImport.GetNumJoystickHats(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumRenderDrivers() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetNumRenderDrivers", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetNumRenderDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumRenderDrivers() => DllImport.GetNumRenderDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetNumVideoDrivers() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetNumVideoDrivers", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetNumVideoDrivers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetNumVideoDrivers() => DllImport.GetNumVideoDrivers();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetPathInfo([NativeTypeName("const char *")] sbyte* path, PathInfo* info) =>
        (
            (delegate* unmanaged<sbyte*, PathInfo*, int>)
                nativeContext.LoadFunction("GetPathInfo", "SDL3")
        )(path, info);

    [NativeFunction("SDL3", EntryPoint = "GetPathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetPathInfo([NativeTypeName("const char *")] sbyte* path, PathInfo* info) =>
        DllImport.GetPathInfo(path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetPathInfo([NativeTypeName("const char *")] Ref<sbyte> path, Ref<PathInfo> info)
    {
        fixed (PathInfo* __dsl_info = info)
        fixed (sbyte* __dsl_path = path)
        {
            return (int)((ISdl)this).GetPathInfo(__dsl_path, __dsl_info);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetPathInfo(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    ) => DllImport.GetPathInfo(path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPenCapabilities(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        PenCapabilityInfo* capabilities
    ) =>
        (
            (delegate* unmanaged<uint, PenCapabilityInfo*, uint>)
                nativeContext.LoadFunction("GetPenCapabilities", "SDL3")
        )(instance_id, capabilities);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetPenCapabilities")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPenCapabilities(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        PenCapabilityInfo* capabilities
    ) => DllImport.GetPenCapabilities(instance_id, capabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPenCapabilities(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        Ref<PenCapabilityInfo> capabilities
    )
    {
        fixed (PenCapabilityInfo* __dsl_capabilities = capabilities)
        {
            return (uint)((ISdl)this).GetPenCapabilities(instance_id, __dsl_capabilities);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPenCapabilities")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPenCapabilities(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        Ref<PenCapabilityInfo> capabilities
    ) => DllImport.GetPenCapabilities(instance_id, capabilities);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPenFromGuid(Guid guid) =>
        ((delegate* unmanaged<Guid, uint>)nativeContext.LoadFunction("GetPenFromGuid", "SDL3"))(
            guid
        );

    [return: NativeTypeName("SDL_PenID")]
    [NativeFunction("SDL3", EntryPoint = "GetPenFromGuid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPenFromGuid(Guid guid) => DllImport.GetPenFromGuid(guid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GetPenGuid([NativeTypeName("SDL_PenID")] uint instance_id) =>
        ((delegate* unmanaged<uint, Guid>)nativeContext.LoadFunction("GetPenGuid", "SDL3"))(
            instance_id
        );

    [NativeFunction("SDL3", EntryPoint = "GetPenGuid")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GetPenGuid([NativeTypeName("SDL_PenID")] uint instance_id) =>
        DllImport.GetPenGuid(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPenName([NativeTypeName("SDL_PenID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetPenNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPenName([NativeTypeName("SDL_PenID")] uint instance_id) =>
        DllImport.GetPenName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPenNameRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
        ((delegate* unmanaged<uint, sbyte*>)nativeContext.LoadFunction("SDL_GetPenName", "SDL3"))(
            instance_id
        );

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPenName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPenNameRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
        DllImport.GetPenNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetPens(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetPens", "SDL3"))(count);

    [return: NativeTypeName("SDL_PenID *")]
    [NativeFunction("SDL3", EntryPoint = "GetPens")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetPens(int* count) => DllImport.GetPens(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetPens(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetPens(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_PenID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPens")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetPens(Ref<int> count) => DllImport.GetPens(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPenStatus(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        float* x,
        float* y,
        float* axes,
        [NativeTypeName("size_t")] nuint num_axes
    ) =>
        (
            (delegate* unmanaged<uint, float*, float*, float*, nuint, uint>)
                nativeContext.LoadFunction("GetPenStatus", "SDL3")
        )(instance_id, x, y, axes, num_axes);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetPenStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPenStatus(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        float* x,
        float* y,
        float* axes,
        [NativeTypeName("size_t")] nuint num_axes
    ) => DllImport.GetPenStatus(instance_id, x, y, axes, num_axes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPenStatus(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        Ref<float> x,
        Ref<float> y,
        Ref<float> axes,
        [NativeTypeName("size_t")] nuint num_axes
    )
    {
        fixed (float* __dsl_axes = axes)
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)
                ((ISdl)this).GetPenStatus(instance_id, __dsl_x, __dsl_y, __dsl_axes, num_axes);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPenStatus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPenStatus(
        [NativeTypeName("SDL_PenID")] uint instance_id,
        Ref<float> x,
        Ref<float> y,
        Ref<float> axes,
        [NativeTypeName("size_t")] nuint num_axes
    ) => DllImport.GetPenStatus(instance_id, x, y, axes, num_axes);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PenSubtype ISdl.GetPenType([NativeTypeName("SDL_PenID")] uint instance_id) =>
        ((delegate* unmanaged<uint, PenSubtype>)nativeContext.LoadFunction("GetPenType", "SDL3"))(
            instance_id
        );

    [NativeFunction("SDL3", EntryPoint = "GetPenType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PenSubtype GetPenType([NativeTypeName("SDL_PenID")] uint instance_id) =>
        DllImport.GetPenType(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetPerformanceCounter() =>
        ((delegate* unmanaged<ulong>)nativeContext.LoadFunction("GetPerformanceCounter", "SDL3"))();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "GetPerformanceCounter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPerformanceCounter() => DllImport.GetPerformanceCounter();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetPerformanceFrequency() =>
        (
            (delegate* unmanaged<ulong>)
                nativeContext.LoadFunction("GetPerformanceFrequency", "SDL3")
        )();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "GetPerformanceFrequency")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetPerformanceFrequency() => DllImport.GetPerformanceFrequency();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PixelFormatEnum ISdl.GetPixelFormatEnumForMasks(
        int bpp,
        [NativeTypeName("Uint32")] uint Rmask,
        [NativeTypeName("Uint32")] uint Gmask,
        [NativeTypeName("Uint32")] uint Bmask,
        [NativeTypeName("Uint32")] uint Amask
    ) =>
        (
            (delegate* unmanaged<int, uint, uint, uint, uint, PixelFormatEnum>)
                nativeContext.LoadFunction("GetPixelFormatEnumForMasks", "SDL3")
        )(bpp, Rmask, Gmask, Bmask, Amask);

    [NativeFunction("SDL3", EntryPoint = "GetPixelFormatEnumForMasks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PixelFormatEnum GetPixelFormatEnumForMasks(
        int bpp,
        [NativeTypeName("Uint32")] uint Rmask,
        [NativeTypeName("Uint32")] uint Gmask,
        [NativeTypeName("Uint32")] uint Bmask,
        [NativeTypeName("Uint32")] uint Amask
    ) => DllImport.GetPixelFormatEnumForMasks(bpp, Rmask, Gmask, Bmask, Amask);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPixelFormatName(PixelFormatEnum format) =>
        (sbyte*)((ISdl)this).GetPixelFormatNameRaw(format);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPixelFormatName(PixelFormatEnum format) =>
        DllImport.GetPixelFormatName(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPixelFormatNameRaw(PixelFormatEnum format) =>
        (
            (delegate* unmanaged<PixelFormatEnum, sbyte*>)
                nativeContext.LoadFunction("SDL_GetPixelFormatName", "SDL3")
        )(format);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPixelFormatName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPixelFormatNameRaw(PixelFormatEnum format) =>
        DllImport.GetPixelFormatNameRaw(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPlatform() => (sbyte*)((ISdl)this).GetPlatformRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPlatform() => DllImport.GetPlatform();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPlatformRaw() =>
        ((delegate* unmanaged<sbyte*>)nativeContext.LoadFunction("SDL_GetPlatform", "SDL3"))();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPlatform")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPlatformRaw() => DllImport.GetPlatformRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetPowerInfo(int* seconds, int* percent) =>
        (
            (delegate* unmanaged<int*, int*, PowerState>)
                nativeContext.LoadFunction("GetPowerInfo", "SDL3")
        )(seconds, percent);

    [NativeFunction("SDL3", EntryPoint = "GetPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetPowerInfo(int* seconds, int* percent) =>
        DllImport.GetPowerInfo(seconds, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PowerState ISdl.GetPowerInfo(Ref<int> seconds, Ref<int> percent)
    {
        fixed (int* __dsl_percent = percent)
        fixed (int* __dsl_seconds = seconds)
        {
            return (PowerState)((ISdl)this).GetPowerInfo(__dsl_seconds, __dsl_percent);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPowerInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PowerState GetPowerInfo(Ref<int> seconds, Ref<int> percent) =>
        DllImport.GetPowerInfo(seconds, percent);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Locale> ISdl.GetPreferredLocales() => (Locale*)((ISdl)this).GetPreferredLocalesRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Locale> GetPreferredLocales() => DllImport.GetPreferredLocales();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Locale* ISdl.GetPreferredLocalesRaw() =>
        (
            (delegate* unmanaged<Locale*>)
                nativeContext.LoadFunction("SDL_GetPreferredLocales", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GetPreferredLocales")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Locale* GetPreferredLocalesRaw() => DllImport.GetPreferredLocalesRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPrefPath(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, sbyte*>)
                nativeContext.LoadFunction("GetPrefPath", "SDL3")
        )(org, app);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "GetPrefPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPrefPath(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app
    ) => DllImport.GetPrefPath(org, app);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPrefPath(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app
    )
    {
        fixed (sbyte* __dsl_app = app)
        fixed (sbyte* __dsl_org = org)
        {
            return (sbyte*)((ISdl)this).GetPrefPath(__dsl_org, __dsl_app);
        }
    }

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrefPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPrefPath(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app
    ) => DllImport.GetPrefPath(org, app);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetPrimaryDisplay() =>
        ((delegate* unmanaged<uint>)nativeContext.LoadFunction("GetPrimaryDisplay", "SDL3"))();

    [return: NativeTypeName("SDL_DisplayID")]
    [NativeFunction("SDL3", EntryPoint = "GetPrimaryDisplay")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetPrimaryDisplay() => DllImport.GetPrimaryDisplay();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetPrimarySelectionText() => (sbyte*)((ISdl)this).GetPrimarySelectionTextRaw();

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetPrimarySelectionText() => DllImport.GetPrimarySelectionText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetPrimarySelectionTextRaw() =>
        (
            (delegate* unmanaged<sbyte*>)
                nativeContext.LoadFunction("SDL_GetPrimarySelectionText", "SDL3")
        )();

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetPrimarySelectionTextRaw() => DllImport.GetPrimarySelectionTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, void*, void*>)
                nativeContext.LoadFunction("GetProperty", "SDL3")
        )(props, name, default_value);

    [NativeFunction("SDL3", EntryPoint = "GetProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* default_value
    ) => DllImport.GetProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref default_value
    )
    {
        fixed (void* __dsl_default_value = default_value)
        fixed (sbyte* __dsl_name = name)
        {
            return (void*)((ISdl)this).GetProperty(props, __dsl_name, __dsl_default_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref default_value
    ) => DllImport.GetProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PropertyType ISdl.GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, PropertyType>)
                nativeContext.LoadFunction("GetPropertyType", "SDL3")
        )(props, name);

    [NativeFunction("SDL3", EntryPoint = "GetPropertyType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PropertyType GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.GetPropertyType(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    PropertyType ISdl.GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (PropertyType)((ISdl)this).GetPropertyType(props, __dsl_name);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetPropertyType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static PropertyType GetPropertyType(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.GetPropertyType(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetRealGamepadInstanceType(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, GamepadType>)
                nativeContext.LoadFunction("GetRealGamepadInstanceType", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetRealGamepadInstanceType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetRealGamepadInstanceType(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.GetRealGamepadInstanceType(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetRealGamepadType(SDL_Gamepad* gamepad) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, GamepadType>)
                nativeContext.LoadFunction("GetRealGamepadType", "SDL3")
        )(gamepad);

    [NativeFunction("SDL3", EntryPoint = "GetRealGamepadType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetRealGamepadType(SDL_Gamepad* gamepad) =>
        DllImport.GetRealGamepadType(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    GamepadType ISdl.GetRealGamepadType(Ref<SDL_Gamepad> gamepad)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (GamepadType)((ISdl)this).GetRealGamepadType(__dsl_gamepad);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRealGamepadType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static GamepadType GetRealGamepadType(Ref<SDL_Gamepad> gamepad) =>
        DllImport.GetRealGamepadType(gamepad);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        int* X1,
        int* Y1,
        int* X2,
        int* Y2
    ) =>
        (
            (delegate* unmanaged<Rect*, int*, int*, int*, int*, int>)
                nativeContext.LoadFunction("GetRectAndLineIntersection", "SDL3")
        )(rect, X1, Y1, X2, Y2);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetRectAndLineIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        int* X1,
        int* Y1,
        int* X2,
        int* Y2
    ) => DllImport.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref<int> X1,
        Ref<int> Y1,
        Ref<int> X2,
        Ref<int> Y2
    )
    {
        fixed (int* __dsl_Y2 = Y2)
        fixed (int* __dsl_X2 = X2)
        fixed (int* __dsl_Y1 = Y1)
        fixed (int* __dsl_X1 = X1)
        fixed (Rect* __dsl_rect = rect)
        {
            return (MaybeBool<int>)
                (int)
                    ((ISdl)this).GetRectAndLineIntersection(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRectAndLineIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref<int> X1,
        Ref<int> Y1,
        Ref<int> X2,
        Ref<int> Y2
    ) => DllImport.GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* rect,
        float* X1,
        float* Y1,
        float* X2,
        float* Y2
    ) =>
        (
            (delegate* unmanaged<FRect*, float*, float*, float*, float*, int>)
                nativeContext.LoadFunction("GetRectAndLineIntersectionFloat", "SDL3")
        )(rect, X1, Y1, X2, Y2);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetRectAndLineIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* rect,
        float* X1,
        float* Y1,
        float* X2,
        float* Y2
    ) => DllImport.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
        Ref<float> X1,
        Ref<float> Y1,
        Ref<float> X2,
        Ref<float> Y2
    )
    {
        fixed (float* __dsl_Y2 = Y2)
        fixed (float* __dsl_X2 = X2)
        fixed (float* __dsl_Y1 = Y1)
        fixed (float* __dsl_X1 = X1)
        fixed (FRect* __dsl_rect = rect)
        {
            return (MaybeBool<int>)
                (int)
                    ((ISdl)this).GetRectAndLineIntersectionFloat(
                        __dsl_rect,
                        __dsl_X1,
                        __dsl_Y1,
                        __dsl_X2,
                        __dsl_Y2
                    );
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRectAndLineIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect,
        Ref<float> X1,
        Ref<float> Y1,
        Ref<float> X2,
        Ref<float> Y2
    ) => DllImport.GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Point* points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Rect* clip,
        Rect* result
    ) =>
        (
            (delegate* unmanaged<Point*, int, Rect*, Rect*, int>)
                nativeContext.LoadFunction("GetRectEnclosingPoints", "SDL3")
        )(points, count, clip, result);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetRectEnclosingPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Point* points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Rect* clip,
        Rect* result
    ) => DllImport.GetRectEnclosingPoints(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Ref<Point> points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
        Ref<Rect> result
    )
    {
        fixed (Rect* __dsl_result = result)
        fixed (Rect* __dsl_clip = clip)
        fixed (Point* __dsl_points = points)
        {
            return (MaybeBool<int>)
                (int)
                    ((ISdl)this).GetRectEnclosingPoints(
                        __dsl_points,
                        count,
                        __dsl_clip,
                        __dsl_result
                    );
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRectEnclosingPoints(
        [NativeTypeName("const SDL_Point *")] Ref<Point> points,
        int count,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> clip,
        Ref<Rect> result
    ) => DllImport.GetRectEnclosingPoints(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count,
        [NativeTypeName("const SDL_FRect *")] FRect* clip,
        FRect* result
    ) =>
        (
            (delegate* unmanaged<FPoint*, int, FRect*, FRect*, int>)
                nativeContext.LoadFunction("GetRectEnclosingPointsFloat", "SDL3")
        )(points, count, clip, result);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetRectEnclosingPointsFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count,
        [NativeTypeName("const SDL_FRect *")] FRect* clip,
        FRect* result
    ) => DllImport.GetRectEnclosingPointsFloat(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
        Ref<FRect> result
    )
    {
        fixed (FRect* __dsl_result = result)
        fixed (FRect* __dsl_clip = clip)
        fixed (FPoint* __dsl_points = points)
        {
            return (MaybeBool<int>)
                (int)
                    ((ISdl)this).GetRectEnclosingPointsFloat(
                        __dsl_points,
                        count,
                        __dsl_clip,
                        __dsl_result
                    );
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRectEnclosingPointsFloat(
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> clip,
        Ref<FRect> result
    ) => DllImport.GetRectEnclosingPointsFloat(points, count, clip, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) =>
        (
            (delegate* unmanaged<Rect*, Rect*, Rect*, int>)
                nativeContext.LoadFunction("GetRectIntersection", "SDL3")
        )(A, B, result);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) => DllImport.GetRectIntersection(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    )
    {
        fixed (Rect* __dsl_result = result)
        fixed (Rect* __dsl_B = B)
        fixed (Rect* __dsl_A = A)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).GetRectIntersection(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    ) => DllImport.GetRectIntersection(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) =>
        (
            (delegate* unmanaged<FRect*, FRect*, FRect*, int>)
                nativeContext.LoadFunction("GetRectIntersectionFloat", "SDL3")
        )(A, B, result);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) => DllImport.GetRectIntersectionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    )
    {
        fixed (FRect* __dsl_result = result)
        fixed (FRect* __dsl_B = B)
        fixed (FRect* __dsl_A = A)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).GetRectIntersectionFloat(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    ) => DllImport.GetRectIntersectionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) =>
        (
            (delegate* unmanaged<Rect*, Rect*, Rect*, int>)
                nativeContext.LoadFunction("GetRectUnion", "SDL3")
        )(A, B, result);

    [NativeFunction("SDL3", EntryPoint = "GetRectUnion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B,
        Rect* result
    ) => DllImport.GetRectUnion(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    )
    {
        fixed (Rect* __dsl_result = result)
        fixed (Rect* __dsl_B = B)
        fixed (Rect* __dsl_A = A)
        {
            return (int)((ISdl)this).GetRectUnion(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectUnion(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B,
        Ref<Rect> result
    ) => DllImport.GetRectUnion(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) =>
        (
            (delegate* unmanaged<FRect*, FRect*, FRect*, int>)
                nativeContext.LoadFunction("GetRectUnionFloat", "SDL3")
        )(A, B, result);

    [NativeFunction("SDL3", EntryPoint = "GetRectUnionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B,
        FRect* result
    ) => DllImport.GetRectUnionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    )
    {
        fixed (FRect* __dsl_result = result)
        fixed (FRect* __dsl_B = B)
        fixed (FRect* __dsl_A = A)
        {
            return (int)((ISdl)this).GetRectUnionFloat(__dsl_A, __dsl_B, __dsl_result);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRectUnionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRectUnionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B,
        Ref<FRect> result
    ) => DllImport.GetRectUnionFloat(A, B, result);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetRelativeMouseMode() =>
        (MaybeBool<int>)(int)((ISdl)this).GetRelativeMouseModeRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetRelativeMouseMode() => DllImport.GetRelativeMouseMode();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRelativeMouseModeRaw() =>
        (
            (delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_GetRelativeMouseMode", "SDL3")
        )();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRelativeMouseModeRaw() => DllImport.GetRelativeMouseModeRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRelativeMouseState(float* x, float* y) =>
        (
            (delegate* unmanaged<float*, float*, uint>)
                nativeContext.LoadFunction("GetRelativeMouseState", "SDL3")
        )(x, y);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetRelativeMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRelativeMouseState(float* x, float* y) =>
        DllImport.GetRelativeMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRelativeMouseState(Ref<float> x, Ref<float> y)
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        {
            return (uint)((ISdl)this).GetRelativeMouseState(__dsl_x, __dsl_y);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRelativeMouseState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRelativeMouseState(Ref<float> x, Ref<float> y) =>
        DllImport.GetRelativeMouseState(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderClipRect(SDL_Renderer* renderer, Rect* rect) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Rect*, int>)
                nativeContext.LoadFunction("GetRenderClipRect", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "GetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderClipRect(SDL_Renderer* renderer, Rect* rect) =>
        DllImport.GetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderClipRect(Ref<SDL_Renderer> renderer, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderClipRect(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderClipRect(Ref<SDL_Renderer> renderer, Ref<Rect> rect) =>
        DllImport.GetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderColorScale(SDL_Renderer* renderer, float* scale) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float*, int>)
                nativeContext.LoadFunction("GetRenderColorScale", "SDL3")
        )(renderer, scale);

    [NativeFunction("SDL3", EntryPoint = "GetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderColorScale(SDL_Renderer* renderer, float* scale) =>
        DllImport.GetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderColorScale(Ref<SDL_Renderer> renderer, Ref<float> scale)
    {
        fixed (float* __dsl_scale = scale)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderColorScale(__dsl_renderer, __dsl_scale);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderColorScale(Ref<SDL_Renderer> renderer, Ref<float> scale) =>
        DllImport.GetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode* blendMode) =>
        (
            (delegate* unmanaged<SDL_Renderer*, BlendMode*, int>)
                nativeContext.LoadFunction("GetRenderDrawBlendMode", "SDL3")
        )(renderer, blendMode);

    [NativeFunction("SDL3", EntryPoint = "GetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode* blendMode) =>
        DllImport.GetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, Ref<BlendMode> blendMode)
    {
        fixed (BlendMode* __dsl_blendMode = blendMode)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderDrawBlendMode(__dsl_renderer, __dsl_blendMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderDrawBlendMode(
        Ref<SDL_Renderer> renderer,
        Ref<BlendMode> blendMode
    ) => DllImport.GetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderDrawColor(
        SDL_Renderer* renderer,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, byte*, byte*, byte*, byte*, int>)
                nativeContext.LoadFunction("GetRenderDrawColor", "SDL3")
        )(renderer, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "GetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderDrawColor(
        SDL_Renderer* renderer,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) => DllImport.GetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderDrawColor(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    )
    {
        fixed (byte* __dsl_a = a)
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).GetRenderDrawColor(__dsl_renderer, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderDrawColor(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    ) => DllImport.GetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderDrawColorFloat(
        SDL_Renderer* renderer,
        float* r,
        float* g,
        float* b,
        float* a
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float*, float*, float*, float*, int>)
                nativeContext.LoadFunction("GetRenderDrawColorFloat", "SDL3")
        )(renderer, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "GetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderDrawColorFloat(
        SDL_Renderer* renderer,
        float* r,
        float* g,
        float* b,
        float* a
    ) => DllImport.GetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderDrawColorFloat(
        Ref<SDL_Renderer> renderer,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b,
        Ref<float> a
    )
    {
        fixed (float* __dsl_a = a)
        fixed (float* __dsl_b = b)
        fixed (float* __dsl_g = g)
        fixed (float* __dsl_r = r)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).GetRenderDrawColorFloat(
                    __dsl_renderer,
                    __dsl_r,
                    __dsl_g,
                    __dsl_b,
                    __dsl_a
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderDrawColorFloat(
        Ref<SDL_Renderer> renderer,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b,
        Ref<float> a
    ) => DllImport.GetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetRenderDriver(int index) => (sbyte*)((ISdl)this).GetRenderDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetRenderDriver(int index) => DllImport.GetRenderDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetRenderDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)
                nativeContext.LoadFunction("SDL_GetRenderDriver", "SDL3")
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetRenderDriverRaw(int index) => DllImport.GetRenderDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Renderer* ISdl.GetRenderer(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, SDL_Renderer*>)
                nativeContext.LoadFunction("GetRenderer", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "GetRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Renderer* GetRenderer(SDL_Window* window) => DllImport.GetRenderer(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Renderer> ISdl.GetRenderer(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (SDL_Renderer*)((ISdl)this).GetRenderer(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Renderer> GetRenderer(Ref<SDL_Window> window) =>
        DllImport.GetRenderer(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Renderer* ISdl.GetRendererFromTexture(SDL_Texture* texture) =>
        (
            (delegate* unmanaged<SDL_Texture*, SDL_Renderer*>)
                nativeContext.LoadFunction("GetRendererFromTexture", "SDL3")
        )(texture);

    [NativeFunction("SDL3", EntryPoint = "GetRendererFromTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Renderer* GetRendererFromTexture(SDL_Texture* texture) =>
        DllImport.GetRendererFromTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Renderer> ISdl.GetRendererFromTexture(Ref<SDL_Texture> texture)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (SDL_Renderer*)((ISdl)this).GetRendererFromTexture(__dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererFromTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Renderer> GetRendererFromTexture(Ref<SDL_Texture> texture) =>
        DllImport.GetRendererFromTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRendererInfo(SDL_Renderer* renderer, RendererInfo* info) =>
        (
            (delegate* unmanaged<SDL_Renderer*, RendererInfo*, int>)
                nativeContext.LoadFunction("GetRendererInfo", "SDL3")
        )(renderer, info);

    [NativeFunction("SDL3", EntryPoint = "GetRendererInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRendererInfo(SDL_Renderer* renderer, RendererInfo* info) =>
        DllImport.GetRendererInfo(renderer, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRendererInfo(Ref<SDL_Renderer> renderer, Ref<RendererInfo> info)
    {
        fixed (RendererInfo* __dsl_info = info)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRendererInfo(__dsl_renderer, __dsl_info);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRendererInfo(Ref<SDL_Renderer> renderer, Ref<RendererInfo> info) =>
        DllImport.GetRendererInfo(renderer, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRendererProperties(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, uint>)
                nativeContext.LoadFunction("GetRendererProperties", "SDL3")
        )(renderer);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetRendererProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRendererProperties(SDL_Renderer* renderer) =>
        DllImport.GetRendererProperties(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetRendererProperties(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (uint)((ISdl)this).GetRendererProperties(__dsl_renderer);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRendererProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetRendererProperties(Ref<SDL_Renderer> renderer) =>
        DllImport.GetRendererProperties(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderLogicalPresentation(
        SDL_Renderer* renderer,
        int* w,
        int* h,
        RendererLogicalPresentation* mode,
        ScaleMode* scale_mode
    ) =>
        (
            (delegate* unmanaged<
                SDL_Renderer*,
                int*,
                int*,
                RendererLogicalPresentation*,
                ScaleMode*,
                int>)
                nativeContext.LoadFunction("GetRenderLogicalPresentation", "SDL3")
        )(renderer, w, h, mode, scale_mode);

    [NativeFunction("SDL3", EntryPoint = "GetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderLogicalPresentation(
        SDL_Renderer* renderer,
        int* w,
        int* h,
        RendererLogicalPresentation* mode,
        ScaleMode* scale_mode
    ) => DllImport.GetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderLogicalPresentation(
        Ref<SDL_Renderer> renderer,
        Ref<int> w,
        Ref<int> h,
        Ref<RendererLogicalPresentation> mode,
        Ref<ScaleMode> scale_mode
    )
    {
        fixed (ScaleMode* __dsl_scale_mode = scale_mode)
        fixed (RendererLogicalPresentation* __dsl_mode = mode)
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).GetRenderLogicalPresentation(
                    __dsl_renderer,
                    __dsl_w,
                    __dsl_h,
                    __dsl_mode,
                    __dsl_scale_mode
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderLogicalPresentation(
        Ref<SDL_Renderer> renderer,
        Ref<int> w,
        Ref<int> h,
        Ref<RendererLogicalPresentation> mode,
        Ref<ScaleMode> scale_mode
    ) => DllImport.GetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetRenderMetalCommandEncoder(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, void*>)
                nativeContext.LoadFunction("GetRenderMetalCommandEncoder", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "GetRenderMetalCommandEncoder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetRenderMetalCommandEncoder(SDL_Renderer* renderer) =>
        DllImport.GetRenderMetalCommandEncoder(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetRenderMetalCommandEncoder(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (void*)((ISdl)this).GetRenderMetalCommandEncoder(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetRenderMetalCommandEncoder(Ref<SDL_Renderer> renderer) =>
        DllImport.GetRenderMetalCommandEncoder(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetRenderMetalLayer(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, void*>)
                nativeContext.LoadFunction("GetRenderMetalLayer", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "GetRenderMetalLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetRenderMetalLayer(SDL_Renderer* renderer) =>
        DllImport.GetRenderMetalLayer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetRenderMetalLayer(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (void*)((ISdl)this).GetRenderMetalLayer(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderMetalLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetRenderMetalLayer(Ref<SDL_Renderer> renderer) =>
        DllImport.GetRenderMetalLayer(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int*, int*, int>)
                nativeContext.LoadFunction("GetRenderOutputSize", "SDL3")
        )(renderer, w, h);

    [NativeFunction("SDL3", EntryPoint = "GetRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h) =>
        DllImport.GetRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderOutputSize(__dsl_renderer, __dsl_w, __dsl_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderOutputSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderOutputSize(Ref<SDL_Renderer> renderer, Ref<int> w, Ref<int> h) =>
        DllImport.GetRenderOutputSize(renderer, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float*, float*, int>)
                nativeContext.LoadFunction("GetRenderScale", "SDL3")
        )(renderer, scaleX, scaleY);

    [NativeFunction("SDL3", EntryPoint = "GetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY) =>
        DllImport.GetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderScale(Ref<SDL_Renderer> renderer, Ref<float> scaleX, Ref<float> scaleY)
    {
        fixed (float* __dsl_scaleY = scaleY)
        fixed (float* __dsl_scaleX = scaleX)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderScale(__dsl_renderer, __dsl_scaleX, __dsl_scaleY);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderScale(
        Ref<SDL_Renderer> renderer,
        Ref<float> scaleX,
        Ref<float> scaleY
    ) => DllImport.GetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Texture* ISdl.GetRenderTarget(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, SDL_Texture*>)
                nativeContext.LoadFunction("GetRenderTarget", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "GetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Texture* GetRenderTarget(SDL_Renderer* renderer) =>
        DllImport.GetRenderTarget(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Texture> ISdl.GetRenderTarget(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (SDL_Texture*)((ISdl)this).GetRenderTarget(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Texture> GetRenderTarget(Ref<SDL_Renderer> renderer) =>
        DllImport.GetRenderTarget(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderViewport(SDL_Renderer* renderer, Rect* rect) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Rect*, int>)
                nativeContext.LoadFunction("GetRenderViewport", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "GetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderViewport(SDL_Renderer* renderer, Rect* rect) =>
        DllImport.GetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderViewport(Ref<SDL_Renderer> renderer, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderViewport(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderViewport(Ref<SDL_Renderer> renderer, Ref<Rect> rect) =>
        DllImport.GetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderVSync(SDL_Renderer* renderer, int* vsync) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int*, int>)
                nativeContext.LoadFunction("GetRenderVSync", "SDL3")
        )(renderer, vsync);

    [NativeFunction("SDL3", EntryPoint = "GetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderVSync(SDL_Renderer* renderer, int* vsync) =>
        DllImport.GetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetRenderVSync(Ref<SDL_Renderer> renderer, Ref<int> vsync)
    {
        fixed (int* __dsl_vsync = vsync)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).GetRenderVSync(__dsl_renderer, __dsl_vsync);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetRenderVSync(Ref<SDL_Renderer> renderer, Ref<int> vsync) =>
        DllImport.GetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GetRenderWindow(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, SDL_Window*>)
                nativeContext.LoadFunction("GetRenderWindow", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "GetRenderWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GetRenderWindow(SDL_Renderer* renderer) =>
        DllImport.GetRenderWindow(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GetRenderWindow(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (SDL_Window*)((ISdl)this).GetRenderWindow(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRenderWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GetRenderWindow(Ref<SDL_Renderer> renderer) =>
        DllImport.GetRenderWindow(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetRevision() => (sbyte*)((ISdl)this).GetRevisionRaw();

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetRevision() => DllImport.GetRevision();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetRevisionRaw() =>
        ((delegate* unmanaged<sbyte*>)nativeContext.LoadFunction("SDL_GetRevision", "SDL3"))();

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRevision")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetRevisionRaw() => DllImport.GetRevisionRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) =>
        (
            (delegate* unmanaged<uint, PixelFormat*, byte*, byte*, byte*, void>)
                nativeContext.LoadFunction("GetRGB", "SDL3")
        )(pixel, format, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "GetRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) => DllImport.GetRGB(pixel, format, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    )
    {
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (PixelFormat* __dsl_format = format)
        {
            ((ISdl)this).GetRGB(pixel, __dsl_format, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRGB(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    ) => DllImport.GetRGB(pixel, format, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) =>
        (
            (delegate* unmanaged<uint, PixelFormat*, byte*, byte*, byte*, byte*, void>)
                nativeContext.LoadFunction("GetRgba", "SDL3")
        )(pixel, format, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "GetRgba")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) => DllImport.GetRgba(pixel, format, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    )
    {
        fixed (byte* __dsl_a = a)
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (PixelFormat* __dsl_format = format)
        {
            ((ISdl)this).GetRgba(pixel, __dsl_format, __dsl_r, __dsl_g, __dsl_b, __dsl_a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GetRgba(
        [NativeTypeName("Uint32")] uint pixel,
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    ) => DllImport.GetRgba(pixel, format, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromKey([NativeTypeName("SDL_Keycode")] int key) =>
        (
            (delegate* unmanaged<int, Scancode>)
                nativeContext.LoadFunction("GetScancodeFromKey", "SDL3")
        )(key);

    [NativeFunction("SDL3", EntryPoint = "GetScancodeFromKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromKey([NativeTypeName("SDL_Keycode")] int key) =>
        DllImport.GetScancodeFromKey(key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
        (
            (delegate* unmanaged<sbyte*, Scancode>)
                nativeContext.LoadFunction("GetScancodeFromName", "SDL3")
        )(name);

    [NativeFunction("SDL3", EntryPoint = "GetScancodeFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromName([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.GetScancodeFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Scancode ISdl.GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (Scancode)((ISdl)this).GetScancodeFromName(__dsl_name);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeFromName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Scancode GetScancodeFromName([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.GetScancodeFromName(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetScancodeName(Scancode scancode) =>
        (sbyte*)((ISdl)this).GetScancodeNameRaw(scancode);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetScancodeName(Scancode scancode) =>
        DllImport.GetScancodeName(scancode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetScancodeNameRaw(Scancode scancode) =>
        (
            (delegate* unmanaged<Scancode, sbyte*>)
                nativeContext.LoadFunction("SDL_GetScancodeName", "SDL3")
        )(scancode);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetScancodeName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetScancodeNameRaw(Scancode scancode) =>
        DllImport.GetScancodeNameRaw(scancode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSemaphoreValue(SDL_Semaphore* sem) =>
        (
            (delegate* unmanaged<SDL_Semaphore*, uint>)
                nativeContext.LoadFunction("GetSemaphoreValue", "SDL3")
        )(sem);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetSemaphoreValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSemaphoreValue(SDL_Semaphore* sem) => DllImport.GetSemaphoreValue(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSemaphoreValue(Ref<SDL_Semaphore> sem)
    {
        fixed (SDL_Semaphore* __dsl_sem = sem)
        {
            return (uint)((ISdl)this).GetSemaphoreValue(__dsl_sem);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSemaphoreValue")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSemaphoreValue(Ref<SDL_Semaphore> sem) =>
        DllImport.GetSemaphoreValue(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorData(SDL_Sensor* sensor, float* data, int num_values) =>
        (
            (delegate* unmanaged<SDL_Sensor*, float*, int, int>)
                nativeContext.LoadFunction("GetSensorData", "SDL3")
        )(sensor, data, num_values);

    [NativeFunction("SDL3", EntryPoint = "GetSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorData(SDL_Sensor* sensor, float* data, int num_values) =>
        DllImport.GetSensorData(sensor, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorData(Ref<SDL_Sensor> sensor, Ref<float> data, int num_values)
    {
        fixed (float* __dsl_data = data)
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            return (int)((ISdl)this).GetSensorData(__dsl_sensor, __dsl_data, num_values);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorData(Ref<SDL_Sensor> sensor, Ref<float> data, int num_values) =>
        DllImport.GetSensorData(sensor, data, num_values);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Sensor> ISdl.GetSensorFromInstanceID(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => (SDL_Sensor*)((ISdl)this).GetSensorFromInstanceIDRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Sensor> GetSensorFromInstanceID(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorFromInstanceID(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Sensor* ISdl.GetSensorFromInstanceIDRaw(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) =>
        (
            (delegate* unmanaged<uint, SDL_Sensor*>)
                nativeContext.LoadFunction("SDL_GetSensorFromInstanceID", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorFromInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Sensor* GetSensorFromInstanceIDRaw(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorFromInstanceIDRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSensorInstanceID(SDL_Sensor* sensor) =>
        (
            (delegate* unmanaged<SDL_Sensor*, uint>)
                nativeContext.LoadFunction("GetSensorInstanceID", "SDL3")
        )(sensor);

    [return: NativeTypeName("SDL_SensorID")]
    [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSensorInstanceID(SDL_Sensor* sensor) =>
        DllImport.GetSensorInstanceID(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSensorInstanceID(Ref<SDL_Sensor> sensor)
    {
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            return (uint)((ISdl)this).GetSensorInstanceID(__dsl_sensor);
        }
    }

    [return: NativeTypeName("SDL_SensorID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSensorInstanceID(Ref<SDL_Sensor> sensor) =>
        DllImport.GetSensorInstanceID(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetSensorInstanceName([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (sbyte*)((ISdl)this).GetSensorInstanceNameRaw(instance_id);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetSensorInstanceName(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorInstanceName(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetSensorInstanceNameRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, sbyte*>)
                nativeContext.LoadFunction("SDL_GetSensorInstanceName", "SDL3")
        )(instance_id);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorInstanceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetSensorInstanceNameRaw(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorInstanceNameRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorInstanceNonPortableType([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)
                nativeContext.LoadFunction("GetSensorInstanceNonPortableType", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceNonPortableType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorInstanceNonPortableType(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorInstanceNonPortableType(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorType ISdl.GetSensorInstanceType([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SensorType>)
                nativeContext.LoadFunction("GetSensorInstanceType", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "GetSensorInstanceType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorType GetSensorInstanceType(
        [NativeTypeName("SDL_SensorID")] uint instance_id
    ) => DllImport.GetSensorInstanceType(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetSensorName(SDL_Sensor* sensor) =>
        (
            (delegate* unmanaged<SDL_Sensor*, sbyte*>)
                nativeContext.LoadFunction("GetSensorName", "SDL3")
        )(sensor);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetSensorName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetSensorName(SDL_Sensor* sensor) => DllImport.GetSensorName(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetSensorName(Ref<SDL_Sensor> sensor)
    {
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            return (sbyte*)((ISdl)this).GetSensorName(__dsl_sensor);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetSensorName(Ref<SDL_Sensor> sensor) =>
        DllImport.GetSensorName(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorNonPortableType(SDL_Sensor* sensor) =>
        (
            (delegate* unmanaged<SDL_Sensor*, int>)
                nativeContext.LoadFunction("GetSensorNonPortableType", "SDL3")
        )(sensor);

    [NativeFunction("SDL3", EntryPoint = "GetSensorNonPortableType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorNonPortableType(SDL_Sensor* sensor) =>
        DllImport.GetSensorNonPortableType(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSensorNonPortableType(Ref<SDL_Sensor> sensor)
    {
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            return (int)((ISdl)this).GetSensorNonPortableType(__dsl_sensor);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorNonPortableType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSensorNonPortableType(Ref<SDL_Sensor> sensor) =>
        DllImport.GetSensorNonPortableType(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSensorProperties(SDL_Sensor* sensor) =>
        (
            (delegate* unmanaged<SDL_Sensor*, uint>)
                nativeContext.LoadFunction("GetSensorProperties", "SDL3")
        )(sensor);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetSensorProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSensorProperties(SDL_Sensor* sensor) =>
        DllImport.GetSensorProperties(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSensorProperties(Ref<SDL_Sensor> sensor)
    {
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            return (uint)((ISdl)this).GetSensorProperties(__dsl_sensor);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSensorProperties(Ref<SDL_Sensor> sensor) =>
        DllImport.GetSensorProperties(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint* ISdl.GetSensors(int* count) =>
        ((delegate* unmanaged<int*, uint*>)nativeContext.LoadFunction("GetSensors", "SDL3"))(count);

    [return: NativeTypeName("SDL_SensorID *")]
    [NativeFunction("SDL3", EntryPoint = "GetSensors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint* GetSensors(int* count) => DllImport.GetSensors(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<uint> ISdl.GetSensors(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (uint*)((ISdl)this).GetSensors(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_SensorID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<uint> GetSensors(Ref<int> count) => DllImport.GetSensors(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorType ISdl.GetSensorType(SDL_Sensor* sensor) =>
        (
            (delegate* unmanaged<SDL_Sensor*, SensorType>)
                nativeContext.LoadFunction("GetSensorType", "SDL3")
        )(sensor);

    [NativeFunction("SDL3", EntryPoint = "GetSensorType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorType GetSensorType(SDL_Sensor* sensor) => DllImport.GetSensorType(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SensorType ISdl.GetSensorType(Ref<SDL_Sensor> sensor)
    {
        fixed (SDL_Sensor* __dsl_sensor = sensor)
        {
            return (SensorType)((ISdl)this).GetSensorType(__dsl_sensor);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSensorType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SensorType GetSensorType(Ref<SDL_Sensor> sensor) =>
        DllImport.GetSensorType(sensor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSilenceValueForFormat([NativeTypeName("SDL_AudioFormat")] ushort format) =>
        (
            (delegate* unmanaged<ushort, int>)
                nativeContext.LoadFunction("GetSilenceValueForFormat", "SDL3")
        )(format);

    [NativeFunction("SDL3", EntryPoint = "GetSilenceValueForFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSilenceValueForFormat([NativeTypeName("SDL_AudioFormat")] ushort format) =>
        DllImport.GetSilenceValueForFormat(format);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetStorageFileSize(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("Uint64 *")] ulong* length
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, ulong*, int>)
                nativeContext.LoadFunction("GetStorageFileSize", "SDL3")
        )(storage, path, length);

    [NativeFunction("SDL3", EntryPoint = "GetStorageFileSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetStorageFileSize(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("Uint64 *")] ulong* length
    ) => DllImport.GetStorageFileSize(storage, path, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetStorageFileSize(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("Uint64 *")] Ref<ulong> length
    )
    {
        fixed (ulong* __dsl_length = length)
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)((ISdl)this).GetStorageFileSize(__dsl_storage, __dsl_path, __dsl_length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageFileSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetStorageFileSize(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("Uint64 *")] Ref<ulong> length
    ) => DllImport.GetStorageFileSize(storage, path, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetStoragePathInfo(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        PathInfo* info
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, PathInfo*, int>)
                nativeContext.LoadFunction("GetStoragePathInfo", "SDL3")
        )(storage, path, info);

    [NativeFunction("SDL3", EntryPoint = "GetStoragePathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetStoragePathInfo(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        PathInfo* info
    ) => DllImport.GetStoragePathInfo(storage, path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetStoragePathInfo(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    )
    {
        fixed (PathInfo* __dsl_info = info)
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)((ISdl)this).GetStoragePathInfo(__dsl_storage, __dsl_path, __dsl_info);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStoragePathInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetStoragePathInfo(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<PathInfo> info
    ) => DllImport.GetStoragePathInfo(storage, path, info);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetStorageSpaceRemaining(SDL_Storage* storage) =>
        (
            (delegate* unmanaged<SDL_Storage*, ulong>)
                nativeContext.LoadFunction("GetStorageSpaceRemaining", "SDL3")
        )(storage);

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "GetStorageSpaceRemaining")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetStorageSpaceRemaining(SDL_Storage* storage) =>
        DllImport.GetStorageSpaceRemaining(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetStorageSpaceRemaining(Ref<SDL_Storage> storage)
    {
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (ulong)((ISdl)this).GetStorageSpaceRemaining(__dsl_storage);
        }
    }

    [return: NativeTypeName("Uint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStorageSpaceRemaining")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetStorageSpaceRemaining(Ref<SDL_Storage> storage) =>
        DllImport.GetStorageSpaceRemaining(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* default_value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, sbyte*, sbyte*>)
                nativeContext.LoadFunction("GetStringProperty", "SDL3")
        )(props, name, default_value);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* default_value
    ) => DllImport.GetStringProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> default_value
    )
    {
        fixed (sbyte* __dsl_default_value = default_value)
        fixed (sbyte* __dsl_name = name)
        {
            return (sbyte*)((ISdl)this).GetStringProperty(props, __dsl_name, __dsl_default_value);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> default_value
    ) => DllImport.GetStringProperty(props, name, default_value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8 *")] byte* alpha) =>
        (
            (delegate* unmanaged<Surface*, byte*, int>)
                nativeContext.LoadFunction("GetSurfaceAlphaMod", "SDL3")
        )(surface, alpha);

    [NativeFunction("SDL3", EntryPoint = "GetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceAlphaMod(
        Surface* surface,
        [NativeTypeName("Uint8 *")] byte* alpha
    ) => DllImport.GetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceAlphaMod(Ref<Surface> surface, [NativeTypeName("Uint8 *")] Ref<byte> alpha)
    {
        fixed (byte* __dsl_alpha = alpha)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).GetSurfaceAlphaMod(__dsl_surface, __dsl_alpha);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceAlphaMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    ) => DllImport.GetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceBlendMode(Surface* surface, BlendMode* blendMode) =>
        (
            (delegate* unmanaged<Surface*, BlendMode*, int>)
                nativeContext.LoadFunction("GetSurfaceBlendMode", "SDL3")
        )(surface, blendMode);

    [NativeFunction("SDL3", EntryPoint = "GetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceBlendMode(Surface* surface, BlendMode* blendMode) =>
        DllImport.GetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceBlendMode(Ref<Surface> surface, Ref<BlendMode> blendMode)
    {
        fixed (BlendMode* __dsl_blendMode = blendMode)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).GetSurfaceBlendMode(__dsl_surface, __dsl_blendMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceBlendMode(Ref<Surface> surface, Ref<BlendMode> blendMode) =>
        DllImport.GetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceClipRect(Surface* surface, Rect* rect) =>
        (
            (delegate* unmanaged<Surface*, Rect*, int>)
                nativeContext.LoadFunction("GetSurfaceClipRect", "SDL3")
        )(surface, rect);

    [NativeFunction("SDL3", EntryPoint = "GetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceClipRect(Surface* surface, Rect* rect) =>
        DllImport.GetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).GetSurfaceClipRect(__dsl_surface, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceClipRect(Ref<Surface> surface, Ref<Rect> rect) =>
        DllImport.GetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceColorKey(Surface* surface, [NativeTypeName("Uint32 *")] uint* key) =>
        (
            (delegate* unmanaged<Surface*, uint*, int>)
                nativeContext.LoadFunction("GetSurfaceColorKey", "SDL3")
        )(surface, key);

    [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceColorKey(
        Surface* surface,
        [NativeTypeName("Uint32 *")] uint* key
    ) => DllImport.GetSurfaceColorKey(surface, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceColorKey(Ref<Surface> surface, [NativeTypeName("Uint32 *")] Ref<uint> key)
    {
        fixed (uint* __dsl_key = key)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).GetSurfaceColorKey(__dsl_surface, __dsl_key);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceColorKey(
        Ref<Surface> surface,
        [NativeTypeName("Uint32 *")] Ref<uint> key
    ) => DllImport.GetSurfaceColorKey(surface, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) =>
        (
            (delegate* unmanaged<Surface*, byte*, byte*, byte*, int>)
                nativeContext.LoadFunction("GetSurfaceColorMod", "SDL3")
        )(surface, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) => DllImport.GetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    )
    {
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).GetSurfaceColorMod(__dsl_surface, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    ) => DllImport.GetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceColorspace(Surface* surface, Colorspace* colorspace) =>
        (
            (delegate* unmanaged<Surface*, Colorspace*, int>)
                nativeContext.LoadFunction("GetSurfaceColorspace", "SDL3")
        )(surface, colorspace);

    [NativeFunction("SDL3", EntryPoint = "GetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceColorspace(Surface* surface, Colorspace* colorspace) =>
        DllImport.GetSurfaceColorspace(surface, colorspace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSurfaceColorspace(Ref<Surface> surface, Ref<Colorspace> colorspace)
    {
        fixed (Colorspace* __dsl_colorspace = colorspace)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).GetSurfaceColorspace(__dsl_surface, __dsl_colorspace);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSurfaceColorspace(Ref<Surface> surface, Ref<Colorspace> colorspace) =>
        DllImport.GetSurfaceColorspace(surface, colorspace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSurfaceProperties(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, uint>)
                nativeContext.LoadFunction("GetSurfaceProperties", "SDL3")
        )(surface);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetSurfaceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSurfaceProperties(Surface* surface) =>
        DllImport.GetSurfaceProperties(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetSurfaceProperties(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (uint)((ISdl)this).GetSurfaceProperties(__dsl_surface);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetSurfaceProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetSurfaceProperties(Ref<Surface> surface) =>
        DllImport.GetSurfaceProperties(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetSystemRAM() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("GetSystemRAM", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetSystemRAM")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetSystemRAM() => DllImport.GetSystemRAM();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SystemTheme ISdl.GetSystemTheme() =>
        ((delegate* unmanaged<SystemTheme>)nativeContext.LoadFunction("GetSystemTheme", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GetSystemTheme")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SystemTheme GetSystemTheme() => DllImport.GetSystemTheme();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureAlphaMod(SDL_Texture* texture, [NativeTypeName("Uint8 *")] byte* alpha) =>
        (
            (delegate* unmanaged<SDL_Texture*, byte*, int>)
                nativeContext.LoadFunction("GetTextureAlphaMod", "SDL3")
        )(texture, alpha);

    [NativeFunction("SDL3", EntryPoint = "GetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureAlphaMod(
        SDL_Texture* texture,
        [NativeTypeName("Uint8 *")] byte* alpha
    ) => DllImport.GetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureAlphaMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    )
    {
        fixed (byte* __dsl_alpha = alpha)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).GetTextureAlphaMod(__dsl_texture, __dsl_alpha);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureAlphaMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> alpha
    ) => DllImport.GetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha) =>
        (
            (delegate* unmanaged<SDL_Texture*, float*, int>)
                nativeContext.LoadFunction("GetTextureAlphaModFloat", "SDL3")
        )(texture, alpha);

    [NativeFunction("SDL3", EntryPoint = "GetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha) =>
        DllImport.GetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureAlphaModFloat(Ref<SDL_Texture> texture, Ref<float> alpha)
    {
        fixed (float* __dsl_alpha = alpha)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).GetTextureAlphaModFloat(__dsl_texture, __dsl_alpha);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureAlphaModFloat(Ref<SDL_Texture> texture, Ref<float> alpha) =>
        DllImport.GetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureBlendMode(SDL_Texture* texture, BlendMode* blendMode) =>
        (
            (delegate* unmanaged<SDL_Texture*, BlendMode*, int>)
                nativeContext.LoadFunction("GetTextureBlendMode", "SDL3")
        )(texture, blendMode);

    [NativeFunction("SDL3", EntryPoint = "GetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureBlendMode(SDL_Texture* texture, BlendMode* blendMode) =>
        DllImport.GetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureBlendMode(Ref<SDL_Texture> texture, Ref<BlendMode> blendMode)
    {
        fixed (BlendMode* __dsl_blendMode = blendMode)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).GetTextureBlendMode(__dsl_texture, __dsl_blendMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureBlendMode(Ref<SDL_Texture> texture, Ref<BlendMode> blendMode) =>
        DllImport.GetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureColorMod(
        SDL_Texture* texture,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, byte*, byte*, byte*, int>)
                nativeContext.LoadFunction("GetTextureColorMod", "SDL3")
        )(texture, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "GetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureColorMod(
        SDL_Texture* texture,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b
    ) => DllImport.GetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureColorMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    )
    {
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).GetTextureColorMod(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureColorMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b
    ) => DllImport.GetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureColorModFloat(SDL_Texture* texture, float* r, float* g, float* b) =>
        (
            (delegate* unmanaged<SDL_Texture*, float*, float*, float*, int>)
                nativeContext.LoadFunction("GetTextureColorModFloat", "SDL3")
        )(texture, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "GetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureColorModFloat(SDL_Texture* texture, float* r, float* g, float* b) =>
        DllImport.GetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureColorModFloat(
        Ref<SDL_Texture> texture,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b
    )
    {
        fixed (float* __dsl_b = b)
        fixed (float* __dsl_g = g)
        fixed (float* __dsl_r = r)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)
                ((ISdl)this).GetTextureColorModFloat(__dsl_texture, __dsl_r, __dsl_g, __dsl_b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureColorModFloat(
        Ref<SDL_Texture> texture,
        Ref<float> r,
        Ref<float> g,
        Ref<float> b
    ) => DllImport.GetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetTextureProperties(SDL_Texture* texture) =>
        (
            (delegate* unmanaged<SDL_Texture*, uint>)
                nativeContext.LoadFunction("GetTextureProperties", "SDL3")
        )(texture);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetTextureProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetTextureProperties(SDL_Texture* texture) =>
        DllImport.GetTextureProperties(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetTextureProperties(Ref<SDL_Texture> texture)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (uint)((ISdl)this).GetTextureProperties(__dsl_texture);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetTextureProperties(Ref<SDL_Texture> texture) =>
        DllImport.GetTextureProperties(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureScaleMode(SDL_Texture* texture, ScaleMode* scaleMode) =>
        (
            (delegate* unmanaged<SDL_Texture*, ScaleMode*, int>)
                nativeContext.LoadFunction("GetTextureScaleMode", "SDL3")
        )(texture, scaleMode);

    [NativeFunction("SDL3", EntryPoint = "GetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureScaleMode(SDL_Texture* texture, ScaleMode* scaleMode) =>
        DllImport.GetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetTextureScaleMode(Ref<SDL_Texture> texture, Ref<ScaleMode> scaleMode)
    {
        fixed (ScaleMode* __dsl_scaleMode = scaleMode)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).GetTextureScaleMode(__dsl_texture, __dsl_scaleMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetTextureScaleMode(Ref<SDL_Texture> texture, Ref<ScaleMode> scaleMode) =>
        DllImport.GetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetThreadID(SDL_Thread* thread) =>
        (
            (delegate* unmanaged<SDL_Thread*, ulong>)
                nativeContext.LoadFunction("GetThreadID", "SDL3")
        )(thread);

    [return: NativeTypeName("SDL_ThreadID")]
    [NativeFunction("SDL3", EntryPoint = "GetThreadID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetThreadID(SDL_Thread* thread) => DllImport.GetThreadID(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetThreadID(Ref<SDL_Thread> thread)
    {
        fixed (SDL_Thread* __dsl_thread = thread)
        {
            return (ulong)((ISdl)this).GetThreadID(__dsl_thread);
        }
    }

    [return: NativeTypeName("SDL_ThreadID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetThreadID(Ref<SDL_Thread> thread) => DllImport.GetThreadID(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetThreadName(SDL_Thread* thread) =>
        (
            (delegate* unmanaged<SDL_Thread*, sbyte*>)
                nativeContext.LoadFunction("GetThreadName", "SDL3")
        )(thread);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetThreadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetThreadName(SDL_Thread* thread) => DllImport.GetThreadName(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetThreadName(Ref<SDL_Thread> thread)
    {
        fixed (SDL_Thread* __dsl_thread = thread)
        {
            return (sbyte*)((ISdl)this).GetThreadName(__dsl_thread);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetThreadName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetThreadName(Ref<SDL_Thread> thread) =>
        DllImport.GetThreadName(thread);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetTicks() =>
        ((delegate* unmanaged<ulong>)nativeContext.LoadFunction("GetTicks", "SDL3"))();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "GetTicks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetTicks() => DllImport.GetTicks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong ISdl.GetTicksNS() =>
        ((delegate* unmanaged<ulong>)nativeContext.LoadFunction("GetTicksNS", "SDL3"))();

    [return: NativeTypeName("Uint64")]
    [NativeFunction("SDL3", EntryPoint = "GetTicksNS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong GetTicksNS() => DllImport.GetTicksNS();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetTLS([NativeTypeName("SDL_TLSID")] uint id) => (void*)((ISdl)this).GetTLSRaw(id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetTLS([NativeTypeName("SDL_TLSID")] uint id) => DllImport.GetTLS(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetTLSRaw([NativeTypeName("SDL_TLSID")] uint id) =>
        ((delegate* unmanaged<uint, void*>)nativeContext.LoadFunction("SDL_GetTLS", "SDL3"))(id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetTLSRaw([NativeTypeName("SDL_TLSID")] uint id) => DllImport.GetTLSRaw(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetTouchDeviceName([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        (sbyte*)((ISdl)this).GetTouchDeviceNameRaw(touchID);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetTouchDeviceName([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        DllImport.GetTouchDeviceName(touchID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        (
            (delegate* unmanaged<ulong, sbyte*>)
                nativeContext.LoadFunction("SDL_GetTouchDeviceName", "SDL3")
        )(touchID);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDeviceName")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetTouchDeviceNameRaw([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        DllImport.GetTouchDeviceNameRaw(touchID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    ulong* ISdl.GetTouchDevices(int* count) =>
        ((delegate* unmanaged<int*, ulong*>)nativeContext.LoadFunction("GetTouchDevices", "SDL3"))(
            count
        );

    [return: NativeTypeName("SDL_TouchID *")]
    [NativeFunction("SDL3", EntryPoint = "GetTouchDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static ulong* GetTouchDevices(int* count) => DllImport.GetTouchDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<ulong> ISdl.GetTouchDevices(Ref<int> count)
    {
        fixed (int* __dsl_count = count)
        {
            return (ulong*)((ISdl)this).GetTouchDevices(__dsl_count);
        }
    }

    [return: NativeTypeName("SDL_TouchID *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchDevices")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<ulong> GetTouchDevices(Ref<int> count) => DllImport.GetTouchDevices(count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    TouchDeviceType ISdl.GetTouchDeviceType([NativeTypeName("SDL_TouchID")] ulong touchID) =>
        (
            (delegate* unmanaged<ulong, TouchDeviceType>)
                nativeContext.LoadFunction("GetTouchDeviceType", "SDL3")
        )(touchID);

    [NativeFunction("SDL3", EntryPoint = "GetTouchDeviceType")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static TouchDeviceType GetTouchDeviceType(
        [NativeTypeName("SDL_TouchID")] ulong touchID
    ) => DllImport.GetTouchDeviceType(touchID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Finger** ISdl.GetTouchFingers([NativeTypeName("SDL_TouchID")] ulong touchID, int* count) =>
        (
            (delegate* unmanaged<ulong, int*, Finger**>)
                nativeContext.LoadFunction("GetTouchFingers", "SDL3")
        )(touchID, count);

    [NativeFunction("SDL3", EntryPoint = "GetTouchFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Finger** GetTouchFingers(
        [NativeTypeName("SDL_TouchID")] ulong touchID,
        int* count
    ) => DllImport.GetTouchFingers(touchID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<Finger> ISdl.GetTouchFingers(
        [NativeTypeName("SDL_TouchID")] ulong touchID,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        {
            return (Finger**)((ISdl)this).GetTouchFingers(touchID, __dsl_count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetTouchFingers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<Finger> GetTouchFingers(
        [NativeTypeName("SDL_TouchID")] ulong touchID,
        Ref<int> count
    ) => DllImport.GetTouchFingers(touchID, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetUserFolder(Folder folder) => (sbyte*)((ISdl)this).GetUserFolderRaw(folder);

    [return: NativeTypeName("char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetUserFolder(Folder folder) => DllImport.GetUserFolder(folder);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetUserFolderRaw(Folder folder) =>
        (
            (delegate* unmanaged<Folder, sbyte*>)
                nativeContext.LoadFunction("SDL_GetUserFolder", "SDL3")
        )(folder);

    [return: NativeTypeName("char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetUserFolder")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetUserFolderRaw(Folder folder) => DllImport.GetUserFolderRaw(folder);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetVersion(Version* ver) =>
        ((delegate* unmanaged<Version*, int>)nativeContext.LoadFunction("GetVersion", "SDL3"))(ver);

    [NativeFunction("SDL3", EntryPoint = "GetVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetVersion(Version* ver) => DllImport.GetVersion(ver);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetVersion(Ref<Version> ver)
    {
        fixed (Version* __dsl_ver = ver)
        {
            return (int)((ISdl)this).GetVersion(__dsl_ver);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetVersion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetVersion(Ref<Version> ver) => DllImport.GetVersion(ver);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetVideoDriver(int index) => (sbyte*)((ISdl)this).GetVideoDriverRaw(index);

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetVideoDriver(int index) => DllImport.GetVideoDriver(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetVideoDriverRaw(int index) =>
        (
            (delegate* unmanaged<int, sbyte*>)
                nativeContext.LoadFunction("SDL_GetVideoDriver", "SDL3")
        )(index);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetVideoDriver")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetVideoDriverRaw(int index) => DllImport.GetVideoDriverRaw(index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowBordersSize(
        SDL_Window* window,
        int* top,
        int* left,
        int* bottom,
        int* right
    ) =>
        (
            (delegate* unmanaged<SDL_Window*, int*, int*, int*, int*, int>)
                nativeContext.LoadFunction("GetWindowBordersSize", "SDL3")
        )(window, top, left, bottom, right);

    [NativeFunction("SDL3", EntryPoint = "GetWindowBordersSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowBordersSize(
        SDL_Window* window,
        int* top,
        int* left,
        int* bottom,
        int* right
    ) => DllImport.GetWindowBordersSize(window, top, left, bottom, right);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowBordersSize(
        Ref<SDL_Window> window,
        Ref<int> top,
        Ref<int> left,
        Ref<int> bottom,
        Ref<int> right
    )
    {
        fixed (int* __dsl_right = right)
        fixed (int* __dsl_bottom = bottom)
        fixed (int* __dsl_left = left)
        fixed (int* __dsl_top = top)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)
                ((ISdl)this).GetWindowBordersSize(
                    __dsl_window,
                    __dsl_top,
                    __dsl_left,
                    __dsl_bottom,
                    __dsl_right
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowBordersSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowBordersSize(
        Ref<SDL_Window> window,
        Ref<int> top,
        Ref<int> left,
        Ref<int> bottom,
        Ref<int> right
    ) => DllImport.GetWindowBordersSize(window, top, left, bottom, right);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowDisplayScale(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, float>)
                nativeContext.LoadFunction("GetWindowDisplayScale", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "GetWindowDisplayScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowDisplayScale(SDL_Window* window) =>
        DllImport.GetWindowDisplayScale(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowDisplayScale(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (float)((ISdl)this).GetWindowDisplayScale(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowDisplayScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowDisplayScale(Ref<SDL_Window> window) =>
        DllImport.GetWindowDisplayScale(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowFlags(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, uint>)
                nativeContext.LoadFunction("GetWindowFlags", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_WindowFlags")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowFlags")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowFlags(SDL_Window* window) => DllImport.GetWindowFlags(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowFlags(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (uint)((ISdl)this).GetWindowFlags(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_WindowFlags")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFlags")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowFlags(Ref<SDL_Window> window) => DllImport.GetWindowFlags(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
        (SDL_Window*)((ISdl)this).GetWindowFromIDRaw(id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GetWindowFromID([NativeTypeName("SDL_WindowID")] uint id) =>
        DllImport.GetWindowFromID(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GetWindowFromIDRaw([NativeTypeName("SDL_WindowID")] uint id) =>
        (
            (delegate* unmanaged<uint, SDL_Window*>)
                nativeContext.LoadFunction("SDL_GetWindowFromID", "SDL3")
        )(id);

    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFromID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GetWindowFromIDRaw([NativeTypeName("SDL_WindowID")] uint id) =>
        DllImport.GetWindowFromIDRaw(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    DisplayMode* ISdl.GetWindowFullscreenMode(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, DisplayMode*>)
                nativeContext.LoadFunction("GetWindowFullscreenMode", "SDL3")
        )(window);

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static DisplayMode* GetWindowFullscreenMode(SDL_Window* window) =>
        DllImport.GetWindowFullscreenMode(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<DisplayMode> ISdl.GetWindowFullscreenMode(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (DisplayMode*)((ISdl)this).GetWindowFullscreenMode(__dsl_window);
        }
    }

    [return: NativeTypeName("const SDL_DisplayMode *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<DisplayMode> GetWindowFullscreenMode(Ref<SDL_Window> window) =>
        DllImport.GetWindowFullscreenMode(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GetWindowICCProfile(SDL_Window* window, [NativeTypeName("size_t *")] nuint* size) =>
        (
            (delegate* unmanaged<SDL_Window*, nuint*, void*>)
                nativeContext.LoadFunction("GetWindowICCProfile", "SDL3")
        )(window, size);

    [NativeFunction("SDL3", EntryPoint = "GetWindowICCProfile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GetWindowICCProfile(
        SDL_Window* window,
        [NativeTypeName("size_t *")] nuint* size
    ) => DllImport.GetWindowICCProfile(window, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GetWindowICCProfile(
        Ref<SDL_Window> window,
        [NativeTypeName("size_t *")] Ref<nuint> size
    )
    {
        fixed (nuint* __dsl_size = size)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (void*)((ISdl)this).GetWindowICCProfile(__dsl_window, __dsl_size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowICCProfile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GetWindowICCProfile(
        Ref<SDL_Window> window,
        [NativeTypeName("size_t *")] Ref<nuint> size
    ) => DllImport.GetWindowICCProfile(window, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowID(SDL_Window* window) =>
        ((delegate* unmanaged<SDL_Window*, uint>)nativeContext.LoadFunction("GetWindowID", "SDL3"))(
            window
        );

    [return: NativeTypeName("SDL_WindowID")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowID(SDL_Window* window) => DllImport.GetWindowID(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowID(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (uint)((ISdl)this).GetWindowID(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_WindowID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowID")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowID(Ref<SDL_Window> window) => DllImport.GetWindowID(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowKeyboardGrab(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("GetWindowKeyboardGrab", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowKeyboardGrab(SDL_Window* window) =>
        DllImport.GetWindowKeyboardGrab(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetWindowKeyboardGrab(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GetWindowKeyboardGrab(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetWindowKeyboardGrab(Ref<SDL_Window> window) =>
        DllImport.GetWindowKeyboardGrab(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowMaximumSize(SDL_Window* window, int* w, int* h) =>
        (
            (delegate* unmanaged<SDL_Window*, int*, int*, int>)
                nativeContext.LoadFunction("GetWindowMaximumSize", "SDL3")
        )(window, w, h);

    [NativeFunction("SDL3", EntryPoint = "GetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowMaximumSize(SDL_Window* window, int* w, int* h) =>
        DllImport.GetWindowMaximumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowMaximumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GetWindowMaximumSize(__dsl_window, __dsl_w, __dsl_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowMaximumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
        DllImport.GetWindowMaximumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowMinimumSize(SDL_Window* window, int* w, int* h) =>
        (
            (delegate* unmanaged<SDL_Window*, int*, int*, int>)
                nativeContext.LoadFunction("GetWindowMinimumSize", "SDL3")
        )(window, w, h);

    [NativeFunction("SDL3", EntryPoint = "GetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowMinimumSize(SDL_Window* window, int* w, int* h) =>
        DllImport.GetWindowMinimumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowMinimumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GetWindowMinimumSize(__dsl_window, __dsl_w, __dsl_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowMinimumSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
        DllImport.GetWindowMinimumSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowMouseGrab(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("GetWindowMouseGrab", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowMouseGrab(SDL_Window* window) =>
        DllImport.GetWindowMouseGrab(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GetWindowMouseGrab(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GetWindowMouseGrab(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GetWindowMouseGrab(Ref<SDL_Window> window) =>
        DllImport.GetWindowMouseGrab(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Rect* ISdl.GetWindowMouseRect(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, Rect*>)
                nativeContext.LoadFunction("GetWindowMouseRect", "SDL3")
        )(window);

    [return: NativeTypeName("const SDL_Rect *")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Rect* GetWindowMouseRect(SDL_Window* window) =>
        DllImport.GetWindowMouseRect(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Rect> ISdl.GetWindowMouseRect(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (Rect*)((ISdl)this).GetWindowMouseRect(__dsl_window);
        }
    }

    [return: NativeTypeName("const SDL_Rect *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Rect> GetWindowMouseRect(Ref<SDL_Window> window) =>
        DllImport.GetWindowMouseRect(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowOpacity(SDL_Window* window, float* out_opacity) =>
        (
            (delegate* unmanaged<SDL_Window*, float*, int>)
                nativeContext.LoadFunction("GetWindowOpacity", "SDL3")
        )(window, out_opacity);

    [NativeFunction("SDL3", EntryPoint = "GetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowOpacity(SDL_Window* window, float* out_opacity) =>
        DllImport.GetWindowOpacity(window, out_opacity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowOpacity(Ref<SDL_Window> window, Ref<float> out_opacity)
    {
        fixed (float* __dsl_out_opacity = out_opacity)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GetWindowOpacity(__dsl_window, __dsl_out_opacity);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowOpacity(Ref<SDL_Window> window, Ref<float> out_opacity) =>
        DllImport.GetWindowOpacity(window, out_opacity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GetWindowParent(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, SDL_Window*>)
                nativeContext.LoadFunction("GetWindowParent", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "GetWindowParent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GetWindowParent(SDL_Window* window) =>
        DllImport.GetWindowParent(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GetWindowParent(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (SDL_Window*)((ISdl)this).GetWindowParent(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowParent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GetWindowParent(Ref<SDL_Window> window) =>
        DllImport.GetWindowParent(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowPixelDensity(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, float>)
                nativeContext.LoadFunction("GetWindowPixelDensity", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "GetWindowPixelDensity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowPixelDensity(SDL_Window* window) =>
        DllImport.GetWindowPixelDensity(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    float ISdl.GetWindowPixelDensity(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (float)((ISdl)this).GetWindowPixelDensity(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelDensity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static float GetWindowPixelDensity(Ref<SDL_Window> window) =>
        DllImport.GetWindowPixelDensity(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowPixelFormat(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, uint>)
                nativeContext.LoadFunction("GetWindowPixelFormat", "SDL3")
        )(window);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowPixelFormat(SDL_Window* window) =>
        DllImport.GetWindowPixelFormat(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowPixelFormat(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (uint)((ISdl)this).GetWindowPixelFormat(__dsl_window);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPixelFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowPixelFormat(Ref<SDL_Window> window) =>
        DllImport.GetWindowPixelFormat(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowPosition(SDL_Window* window, int* x, int* y) =>
        (
            (delegate* unmanaged<SDL_Window*, int*, int*, int>)
                nativeContext.LoadFunction("GetWindowPosition", "SDL3")
        )(window, x, y);

    [NativeFunction("SDL3", EntryPoint = "GetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowPosition(SDL_Window* window, int* x, int* y) =>
        DllImport.GetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowPosition(Ref<SDL_Window> window, Ref<int> x, Ref<int> y)
    {
        fixed (int* __dsl_y = y)
        fixed (int* __dsl_x = x)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GetWindowPosition(__dsl_window, __dsl_x, __dsl_y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowPosition(Ref<SDL_Window> window, Ref<int> x, Ref<int> y) =>
        DllImport.GetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowProperties(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, uint>)
                nativeContext.LoadFunction("GetWindowProperties", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_PropertiesID")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowProperties(SDL_Window* window) =>
        DllImport.GetWindowProperties(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.GetWindowProperties(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (uint)((ISdl)this).GetWindowProperties(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_PropertiesID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint GetWindowProperties(Ref<SDL_Window> window) =>
        DllImport.GetWindowProperties(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowSize(SDL_Window* window, int* w, int* h) =>
        (
            (delegate* unmanaged<SDL_Window*, int*, int*, int>)
                nativeContext.LoadFunction("GetWindowSize", "SDL3")
        )(window, w, h);

    [NativeFunction("SDL3", EntryPoint = "GetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowSize(SDL_Window* window, int* w, int* h) =>
        DllImport.GetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GetWindowSize(__dsl_window, __dsl_w, __dsl_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowSize(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
        DllImport.GetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowSizeInPixels(SDL_Window* window, int* w, int* h) =>
        (
            (delegate* unmanaged<SDL_Window*, int*, int*, int>)
                nativeContext.LoadFunction("GetWindowSizeInPixels", "SDL3")
        )(window, w, h);

    [NativeFunction("SDL3", EntryPoint = "GetWindowSizeInPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowSizeInPixels(SDL_Window* window, int* w, int* h) =>
        DllImport.GetWindowSizeInPixels(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GetWindowSizeInPixels(Ref<SDL_Window> window, Ref<int> w, Ref<int> h)
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GetWindowSizeInPixels(__dsl_window, __dsl_w, __dsl_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSizeInPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GetWindowSizeInPixels(Ref<SDL_Window> window, Ref<int> w, Ref<int> h) =>
        DllImport.GetWindowSizeInPixels(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.GetWindowSurface(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, Surface*>)
                nativeContext.LoadFunction("GetWindowSurface", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "GetWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* GetWindowSurface(SDL_Window* window) =>
        DllImport.GetWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.GetWindowSurface(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (Surface*)((ISdl)this).GetWindowSurface(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> GetWindowSurface(Ref<SDL_Window> window) =>
        DllImport.GetWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte* ISdl.GetWindowTitle(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, sbyte*>)
                nativeContext.LoadFunction("GetWindowTitle", "SDL3")
        )(window);

    [return: NativeTypeName("const char *")]
    [NativeFunction("SDL3", EntryPoint = "GetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte* GetWindowTitle(SDL_Window* window) => DllImport.GetWindowTitle(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<sbyte> ISdl.GetWindowTitle(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (sbyte*)((ISdl)this).GetWindowTitle(__dsl_window);
        }
    }

    [return: NativeTypeName("const char *")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<sbyte> GetWindowTitle(Ref<SDL_Window> window) =>
        DllImport.GetWindowTitle(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GLCreateContext(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, void*>)
                nativeContext.LoadFunction("GLCreateContext", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_GLContext")]
    [NativeFunction("SDL3", EntryPoint = "GLCreateContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GLCreateContext(SDL_Window* window) => DllImport.GLCreateContext(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GLCreateContext(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (void*)((ISdl)this).GLCreateContext(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_GLContext")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_CreateContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GLCreateContext(Ref<SDL_Window> window) => DllImport.GLCreateContext(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLDeleteContext([NativeTypeName("SDL_GLContext")] void* context) =>
        ((delegate* unmanaged<void*, int>)nativeContext.LoadFunction("GLDeleteContext", "SDL3"))(
            context
        );

    [NativeFunction("SDL3", EntryPoint = "GLDeleteContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLDeleteContext([NativeTypeName("SDL_GLContext")] void* context) =>
        DllImport.GLDeleteContext(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLDeleteContext([NativeTypeName("SDL_GLContext")] Ref context)
    {
        fixed (void* __dsl_context = context)
        {
            return (int)((ISdl)this).GLDeleteContext(__dsl_context);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_DeleteContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLDeleteContext([NativeTypeName("SDL_GLContext")] Ref context) =>
        DllImport.GLDeleteContext(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
        (
            (delegate* unmanaged<sbyte*, int>)
                nativeContext.LoadFunction("GLExtensionSupported", "SDL3")
        )(extension);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "GLExtensionSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLExtensionSupported([NativeTypeName("const char *")] sbyte* extension) =>
        DllImport.GLExtensionSupported(extension);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.GLExtensionSupported([NativeTypeName("const char *")] Ref<sbyte> extension)
    {
        fixed (sbyte* __dsl_extension = extension)
        {
            return (MaybeBool<int>)(int)((ISdl)this).GLExtensionSupported(__dsl_extension);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_ExtensionSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> GLExtensionSupported(
        [NativeTypeName("const char *")] Ref<sbyte> extension
    ) => DllImport.GLExtensionSupported(extension);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLGetAttribute(GLattr attr, int* value) =>
        (
            (delegate* unmanaged<GLattr, int*, int>)
                nativeContext.LoadFunction("GLGetAttribute", "SDL3")
        )(attr, value);

    [NativeFunction("SDL3", EntryPoint = "GLGetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLGetAttribute(GLattr attr, int* value) =>
        DllImport.GLGetAttribute(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLGetAttribute(GLattr attr, Ref<int> value)
    {
        fixed (int* __dsl_value = value)
        {
            return (int)((ISdl)this).GLGetAttribute(attr, __dsl_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLGetAttribute(GLattr attr, Ref<int> value) =>
        DllImport.GLGetAttribute(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.GLGetCurrentContext() => (void*)((ISdl)this).GLGetCurrentContextRaw();

    [return: NativeTypeName("SDL_GLContext")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr GLGetCurrentContext() => DllImport.GLGetCurrentContext();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.GLGetCurrentContextRaw() =>
        (
            (delegate* unmanaged<void*>)
                nativeContext.LoadFunction("SDL_GL_GetCurrentContext", "SDL3")
        )();

    [return: NativeTypeName("SDL_GLContext")]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentContext")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* GLGetCurrentContextRaw() => DllImport.GLGetCurrentContextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Window> ISdl.GLGetCurrentWindow() => (SDL_Window*)((ISdl)this).GLGetCurrentWindowRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Window> GLGetCurrentWindow() => DllImport.GLGetCurrentWindow();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Window* ISdl.GLGetCurrentWindowRaw() =>
        (
            (delegate* unmanaged<SDL_Window*>)
                nativeContext.LoadFunction("SDL_GL_GetCurrentWindow", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetCurrentWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Window* GLGetCurrentWindowRaw() => DllImport.GLGetCurrentWindowRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<void> ISdl.GLGetProcAddress([NativeTypeName("const char *")] sbyte* proc) =>
        (
            (delegate* unmanaged<sbyte*, delegate* unmanaged<void>>)
                nativeContext.LoadFunction("GLGetProcAddress", "SDL3")
        )(proc);

    [return: NativeTypeName("SDL_FunctionPointer")]
    [NativeFunction("SDL3", EntryPoint = "GLGetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<void> GLGetProcAddress(
        [NativeTypeName("const char *")] sbyte* proc
    ) => DllImport.GLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<void> ISdl.GLGetProcAddress(
        [NativeTypeName("const char *")] Ref<sbyte> proc
    )
    {
        fixed (sbyte* __dsl_proc = proc)
        {
            return (delegate* unmanaged<void>)((ISdl)this).GLGetProcAddress(__dsl_proc);
        }
    }

    [return: NativeTypeName("SDL_FunctionPointer")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetProcAddress")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<void> GLGetProcAddress(
        [NativeTypeName("const char *")] Ref<sbyte> proc
    ) => DllImport.GLGetProcAddress(proc);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLGetSwapInterval(int* interval) =>
        ((delegate* unmanaged<int*, int>)nativeContext.LoadFunction("GLGetSwapInterval", "SDL3"))(
            interval
        );

    [NativeFunction("SDL3", EntryPoint = "GLGetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLGetSwapInterval(int* interval) => DllImport.GLGetSwapInterval(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLGetSwapInterval(Ref<int> interval)
    {
        fixed (int* __dsl_interval = interval)
        {
            return (int)((ISdl)this).GLGetSwapInterval(__dsl_interval);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_GetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLGetSwapInterval(Ref<int> interval) => DllImport.GLGetSwapInterval(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("GLLoadLibrary", "SDL3"))(
            path
        );

    [NativeFunction("SDL3", EntryPoint = "GLLoadLibrary")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLLoadLibrary([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.GLLoadLibrary(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (int)((ISdl)this).GLLoadLibrary(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_LoadLibrary")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLLoadLibrary([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.GLLoadLibrary(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLMakeCurrent(SDL_Window* window, [NativeTypeName("SDL_GLContext")] void* context) =>
        (
            (delegate* unmanaged<SDL_Window*, void*, int>)
                nativeContext.LoadFunction("GLMakeCurrent", "SDL3")
        )(window, context);

    [NativeFunction("SDL3", EntryPoint = "GLMakeCurrent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLMakeCurrent(
        SDL_Window* window,
        [NativeTypeName("SDL_GLContext")] void* context
    ) => DllImport.GLMakeCurrent(window, context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLMakeCurrent(Ref<SDL_Window> window, [NativeTypeName("SDL_GLContext")] Ref context)
    {
        fixed (void* __dsl_context = context)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GLMakeCurrent(__dsl_window, __dsl_context);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_MakeCurrent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLMakeCurrent(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_GLContext")] Ref context
    ) => DllImport.GLMakeCurrent(window, context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GLResetAttributes() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("GLResetAttributes", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GLResetAttributes")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GLResetAttributes() => DllImport.GLResetAttributes();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLSetAttribute(GLattr attr, int value) =>
        (
            (delegate* unmanaged<GLattr, int, int>)
                nativeContext.LoadFunction("GLSetAttribute", "SDL3")
        )(attr, value);

    [NativeFunction("SDL3", EntryPoint = "GLSetAttribute")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLSetAttribute(GLattr attr, int value) =>
        DllImport.GLSetAttribute(attr, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLSetSwapInterval(int interval) =>
        ((delegate* unmanaged<int, int>)nativeContext.LoadFunction("GLSetSwapInterval", "SDL3"))(
            interval
        );

    [NativeFunction("SDL3", EntryPoint = "GLSetSwapInterval")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLSetSwapInterval(int interval) => DllImport.GLSetSwapInterval(interval);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLSwapWindow(SDL_Window* window) =>
        ((delegate* unmanaged<SDL_Window*, int>)nativeContext.LoadFunction("GLSwapWindow", "SDL3"))(
            window
        );

    [NativeFunction("SDL3", EntryPoint = "GLSwapWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLSwapWindow(SDL_Window* window) => DllImport.GLSwapWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GLSwapWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).GLSwapWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GL_SwapWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GLSwapWindow(Ref<SDL_Window> window) => DllImport.GLSwapWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.GLUnloadLibrary() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("GLUnloadLibrary", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "GLUnloadLibrary")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void GLUnloadLibrary() => DllImport.GLUnloadLibrary();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GlobDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("Uint32")] uint flags,
        int* count
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, uint, int*, sbyte**>)
                nativeContext.LoadFunction("GlobDirectory", "SDL3")
        )(path, pattern, flags, count);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "GlobDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GlobDirectory(
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("Uint32")] uint flags,
        int* count
    ) => DllImport.GlobDirectory(path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GlobDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("Uint32")] uint flags,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        fixed (sbyte* __dsl_pattern = pattern)
        fixed (sbyte* __dsl_path = path)
        {
            return (sbyte**)
                ((ISdl)this).GlobDirectory(__dsl_path, __dsl_pattern, flags, __dsl_count);
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GlobDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GlobDirectory(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("Uint32")] uint flags,
        Ref<int> count
    ) => DllImport.GlobDirectory(path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    sbyte** ISdl.GlobStorageDirectory(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("Uint32")] uint flags,
        int* count
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, sbyte*, uint, int*, sbyte**>)
                nativeContext.LoadFunction("GlobStorageDirectory", "SDL3")
        )(storage, path, pattern, flags, count);

    [return: NativeTypeName("char **")]
    [NativeFunction("SDL3", EntryPoint = "GlobStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static sbyte** GlobStorageDirectory(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const char *")] sbyte* pattern,
        [NativeTypeName("Uint32")] uint flags,
        int* count
    ) => DllImport.GlobStorageDirectory(storage, path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr2D<sbyte> ISdl.GlobStorageDirectory(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("Uint32")] uint flags,
        Ref<int> count
    )
    {
        fixed (int* __dsl_count = count)
        fixed (sbyte* __dsl_pattern = pattern)
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (sbyte**)
                ((ISdl)this).GlobStorageDirectory(
                    __dsl_storage,
                    __dsl_path,
                    __dsl_pattern,
                    flags,
                    __dsl_count
                );
        }
    }

    [return: NativeTypeName("char **")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GlobStorageDirectory")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr2D<sbyte> GlobStorageDirectory(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const char *")] Ref<sbyte> pattern,
        [NativeTypeName("Uint32")] uint flags,
        Ref<int> count
    ) => DllImport.GlobStorageDirectory(storage, path, pattern, flags, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
        ((delegate* unmanaged<sbyte*, Guid>)nativeContext.LoadFunction("GuidFromString", "SDL3"))(
            pchGUID
        );

    [NativeFunction("SDL3", EntryPoint = "GuidFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GuidFromString([NativeTypeName("const char *")] sbyte* pchGUID) =>
        DllImport.GuidFromString(pchGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Guid ISdl.GuidFromString([NativeTypeName("const char *")] Ref<sbyte> pchGUID)
    {
        fixed (sbyte* __dsl_pchGUID = pchGUID)
        {
            return (Guid)((ISdl)this).GuidFromString(__dsl_pchGUID);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GUIDFromString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Guid GuidFromString([NativeTypeName("const char *")] Ref<sbyte> pchGUID) =>
        DllImport.GuidFromString(pchGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GuidToString(Guid guid, [NativeTypeName("char *")] sbyte* pszGUID, int cbGUID) =>
        (
            (delegate* unmanaged<Guid, sbyte*, int, int>)
                nativeContext.LoadFunction("GuidToString", "SDL3")
        )(guid, pszGUID, cbGUID);

    [NativeFunction("SDL3", EntryPoint = "GuidToString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GuidToString(
        Guid guid,
        [NativeTypeName("char *")] sbyte* pszGUID,
        int cbGUID
    ) => DllImport.GuidToString(guid, pszGUID, cbGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.GuidToString(Guid guid, [NativeTypeName("char *")] Ref<sbyte> pszGUID, int cbGUID)
    {
        fixed (sbyte* __dsl_pszGUID = pszGUID)
        {
            return (int)((ISdl)this).GuidToString(guid, __dsl_pszGUID, cbGUID);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_GUIDToString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int GuidToString(
        Guid guid,
        [NativeTypeName("char *")] Ref<sbyte> pszGUID,
        int cbGUID
    ) => DllImport.GuidToString(guid, pszGUID, cbGUID);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HapticEffectSupported(
        SDL_Haptic* haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) =>
        (
            (delegate* unmanaged<SDL_Haptic*, HapticEffect*, int>)
                nativeContext.LoadFunction("HapticEffectSupported", "SDL3")
        )(haptic, effect);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "HapticEffectSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HapticEffectSupported(
        SDL_Haptic* haptic,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* effect
    ) => DllImport.HapticEffectSupported(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HapticEffectSupported(
        Ref<SDL_Haptic> haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    )
    {
        fixed (HapticEffect* __dsl_effect = effect)
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).HapticEffectSupported(__dsl_haptic, __dsl_effect);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HapticEffectSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HapticEffectSupported(
        Ref<SDL_Haptic> haptic,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> effect
    ) => DllImport.HapticEffectSupported(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HapticRumbleSupported(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("HapticRumbleSupported", "SDL3")
        )(haptic);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "HapticRumbleSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HapticRumbleSupported(SDL_Haptic* haptic) =>
        DllImport.HapticRumbleSupported(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HapticRumbleSupported(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (MaybeBool<int>)(int)((ISdl)this).HapticRumbleSupported(__dsl_haptic);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HapticRumbleSupported")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HapticRumbleSupported(Ref<SDL_Haptic> haptic) =>
        DllImport.HapticRumbleSupported(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasAltiVec() => (MaybeBool<int>)(int)((ISdl)this).HasAltiVecRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasAltiVec() => DllImport.HasAltiVec();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasAltiVecRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasAltiVec", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAltiVec")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasAltiVecRaw() => DllImport.HasAltiVecRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasArmsimd() => (MaybeBool<int>)(int)((ISdl)this).HasArmsimdRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasArmsimd() => DllImport.HasArmsimd();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasArmsimdRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasARMSIMD", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasARMSIMD")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasArmsimdRaw() => DllImport.HasArmsimdRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasAVX() => (MaybeBool<int>)(int)((ISdl)this).HasAVXRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasAVX() => DllImport.HasAVX();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasAVX2() => (MaybeBool<int>)(int)((ISdl)this).HasAVX2Raw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasAVX2() => DllImport.HasAVX2();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasAVX2Raw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasAVX2", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasAVX2Raw() => DllImport.HasAVX2Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasAVX512F() => (MaybeBool<int>)(int)((ISdl)this).HasAVX512FRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasAVX512F() => DllImport.HasAVX512F();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasAVX512FRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasAVX512F", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX512F")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasAVX512FRaw() => DllImport.HasAVX512FRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasAVXRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasAVX", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasAVX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasAVXRaw() => DllImport.HasAVXRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("HasClipboardData", "SDL3"))(
            mime_type
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "HasClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasClipboardData([NativeTypeName("const char *")] sbyte* mime_type) =>
        DllImport.HasClipboardData(mime_type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasClipboardData([NativeTypeName("const char *")] Ref<sbyte> mime_type)
    {
        fixed (sbyte* __dsl_mime_type = mime_type)
        {
            return (MaybeBool<int>)(int)((ISdl)this).HasClipboardData(__dsl_mime_type);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasClipboardData(
        [NativeTypeName("const char *")] Ref<sbyte> mime_type
    ) => DllImport.HasClipboardData(mime_type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasClipboardText() =>
        (MaybeBool<int>)(int)((ISdl)this).HasClipboardTextRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasClipboardText() => DllImport.HasClipboardText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasClipboardTextRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasClipboardText", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasClipboardTextRaw() => DllImport.HasClipboardTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasEvent([NativeTypeName("Uint32")] uint type) =>
        (MaybeBool<int>)(int)((ISdl)this).HasEventRaw(type);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasEvent([NativeTypeName("Uint32")] uint type) =>
        DllImport.HasEvent(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasEventRaw([NativeTypeName("Uint32")] uint type) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("SDL_HasEvent", "SDL3"))(type);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasEventRaw([NativeTypeName("Uint32")] uint type) =>
        DllImport.HasEventRaw(type);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => (MaybeBool<int>)(int)((ISdl)this).HasEventsRaw(minType, maxType);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasEvents(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.HasEvents(minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasEventsRaw(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) =>
        ((delegate* unmanaged<uint, uint, int>)nativeContext.LoadFunction("SDL_HasEvents", "SDL3"))(
            minType,
            maxType
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasEventsRaw(
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.HasEventsRaw(minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasGamepad() => (MaybeBool<int>)(int)((ISdl)this).HasGamepadRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasGamepad() => DllImport.HasGamepad();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasGamepadRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasGamepad", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasGamepadRaw() => DllImport.HasGamepadRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasJoystick() => (MaybeBool<int>)(int)((ISdl)this).HasJoystickRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasJoystick() => DllImport.HasJoystick();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasJoystickRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasJoystick", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasJoystickRaw() => DllImport.HasJoystickRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasKeyboard() => (MaybeBool<int>)(int)((ISdl)this).HasKeyboardRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasKeyboard() => DllImport.HasKeyboard();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasKeyboardRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasKeyboard", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasKeyboard")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasKeyboardRaw() => DllImport.HasKeyboardRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasLasx() => (MaybeBool<int>)(int)((ISdl)this).HasLasxRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasLasx() => DllImport.HasLasx();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasLasxRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasLASX", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLASX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasLasxRaw() => DllImport.HasLasxRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasLSX() => (MaybeBool<int>)(int)((ISdl)this).HasLSXRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasLSX() => DllImport.HasLSX();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasLSXRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasLSX", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasLSX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasLSXRaw() => DllImport.HasLSXRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasMMX() => (MaybeBool<int>)(int)((ISdl)this).HasMMXRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasMMX() => DllImport.HasMMX();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasMMXRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasMMX", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMMX")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasMMXRaw() => DllImport.HasMMXRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasMouse() => (MaybeBool<int>)(int)((ISdl)this).HasMouseRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasMouse() => DllImport.HasMouse();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasMouseRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasMouse", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasMouseRaw() => DllImport.HasMouseRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasNeon() => (MaybeBool<int>)(int)((ISdl)this).HasNeonRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasNeon() => DllImport.HasNeon();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasNeonRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasNEON", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasNEON")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasNeonRaw() => DllImport.HasNeonRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasPrimarySelectionText() =>
        (MaybeBool<int>)(int)((ISdl)this).HasPrimarySelectionTextRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasPrimarySelectionText() => DllImport.HasPrimarySelectionText();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasPrimarySelectionTextRaw() =>
        (
            (delegate* unmanaged<int>)
                nativeContext.LoadFunction("SDL_HasPrimarySelectionText", "SDL3")
        )();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasPrimarySelectionTextRaw() => DllImport.HasPrimarySelectionTextRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        ((delegate* unmanaged<uint, sbyte*, int>)nativeContext.LoadFunction("HasProperty", "SDL3"))(
            props,
            name
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "HasProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.HasProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<int>)(int)((ISdl)this).HasProperty(props, __dsl_name);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.HasProperty(props, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B
    ) =>
        (
            (delegate* unmanaged<Rect*, Rect*, int>)
                nativeContext.LoadFunction("HasRectIntersection", "SDL3")
        )(A, B);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "HasRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Rect* A,
        [NativeTypeName("const SDL_Rect *")] Rect* B
    ) => DllImport.HasRectIntersection(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
    )
    {
        fixed (Rect* __dsl_B = B)
        fixed (Rect* __dsl_A = A)
        {
            return (MaybeBool<int>)(int)((ISdl)this).HasRectIntersection(__dsl_A, __dsl_B);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersection")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasRectIntersection(
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> A,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> B
    ) => DllImport.HasRectIntersection(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B
    ) =>
        (
            (delegate* unmanaged<FRect*, FRect*, int>)
                nativeContext.LoadFunction("HasRectIntersectionFloat", "SDL3")
        )(A, B);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "HasRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] FRect* A,
        [NativeTypeName("const SDL_FRect *")] FRect* B
    ) => DllImport.HasRectIntersectionFloat(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
    )
    {
        fixed (FRect* __dsl_B = B)
        fixed (FRect* __dsl_A = A)
        {
            return (MaybeBool<int>)(int)((ISdl)this).HasRectIntersectionFloat(__dsl_A, __dsl_B);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasRectIntersectionFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasRectIntersectionFloat(
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> A,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> B
    ) => DllImport.HasRectIntersectionFloat(A, B);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasScreenKeyboardSupport() =>
        (MaybeBool<int>)(int)((ISdl)this).HasScreenKeyboardSupportRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasScreenKeyboardSupport() => DllImport.HasScreenKeyboardSupport();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasScreenKeyboardSupportRaw() =>
        (
            (delegate* unmanaged<int>)
                nativeContext.LoadFunction("SDL_HasScreenKeyboardSupport", "SDL3")
        )();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasScreenKeyboardSupportRaw() => DllImport.HasScreenKeyboardSupportRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasSSE() => (MaybeBool<int>)(int)((ISdl)this).HasSSERaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasSSE() => DllImport.HasSSE();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasSSE2() => (MaybeBool<int>)(int)((ISdl)this).HasSSE2Raw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasSSE2() => DllImport.HasSSE2();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasSSE2Raw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasSSE2", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE2")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasSSE2Raw() => DllImport.HasSSE2Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasSSE3() => (MaybeBool<int>)(int)((ISdl)this).HasSSE3Raw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasSSE3() => DllImport.HasSSE3();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasSSE3Raw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasSSE3", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE3")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasSSE3Raw() => DllImport.HasSSE3Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasSSE41() => (MaybeBool<int>)(int)((ISdl)this).HasSSE41Raw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasSSE41() => DllImport.HasSSE41();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasSSE41Raw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasSSE41", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE41")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasSSE41Raw() => DllImport.HasSSE41Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.HasSSE42() => (MaybeBool<int>)(int)((ISdl)this).HasSSE42Raw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> HasSSE42() => DllImport.HasSSE42();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasSSE42Raw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasSSE42", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE42")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasSSE42Raw() => DllImport.HasSSE42Raw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HasSSERaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_HasSSE", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_HasSSE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HasSSERaw() => DllImport.HasSSERaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidBleScan([NativeTypeName("SDL_bool")] int active) =>
        ((delegate* unmanaged<int, void>)nativeContext.LoadFunction("HidBleScan", "SDL3"))(active);

    [NativeFunction("SDL3", EntryPoint = "HidBleScan")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidBleScan([NativeTypeName("SDL_bool")] int active) =>
        DllImport.HidBleScan(active);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidBleScan([NativeTypeName("SDL_bool")] MaybeBool<int> active) =>
        ((ISdl)this).HidBleScan((int)active);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_ble_scan")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidBleScan([NativeTypeName("SDL_bool")] MaybeBool<int> active) =>
        DllImport.HidBleScan(active);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidClose(SDL_hid_device* dev) =>
        ((delegate* unmanaged<SDL_hid_device*, int>)nativeContext.LoadFunction("HidClose", "SDL3"))(
            dev
        );

    [NativeFunction("SDL3", EntryPoint = "HidClose")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidClose(SDL_hid_device* dev) => DllImport.HidClose(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidClose(Ref<SDL_hid_device> dev)
    {
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidClose(__dsl_dev);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_close")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidClose(Ref<SDL_hid_device> dev) => DllImport.HidClose(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.HidDeviceChangeCount() =>
        ((delegate* unmanaged<uint>)nativeContext.LoadFunction("HidDeviceChangeCount", "SDL3"))();

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "HidDeviceChangeCount")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint HidDeviceChangeCount() => DllImport.HidDeviceChangeCount();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<HidDeviceInfo> ISdl.HidEnumerate(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) => (HidDeviceInfo*)((ISdl)this).HidEnumerateRaw(vendor_id, product_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<HidDeviceInfo> HidEnumerate(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) => DllImport.HidEnumerate(vendor_id, product_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceInfo* ISdl.HidEnumerateRaw(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) =>
        (
            (delegate* unmanaged<ushort, ushort, HidDeviceInfo*>)
                nativeContext.LoadFunction("SDL_hid_enumerate", "SDL3")
        )(vendor_id, product_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_hid_enumerate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceInfo* HidEnumerateRaw(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id
    ) => DllImport.HidEnumerateRaw(vendor_id, product_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidExit() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("HidExit", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "HidExit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidExit() => DllImport.HidExit();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidFreeEnumeration(HidDeviceInfo* devs) =>
        (
            (delegate* unmanaged<HidDeviceInfo*, void>)
                nativeContext.LoadFunction("HidFreeEnumeration", "SDL3")
        )(devs);

    [NativeFunction("SDL3", EntryPoint = "HidFreeEnumeration")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidFreeEnumeration(HidDeviceInfo* devs) =>
        DllImport.HidFreeEnumeration(devs);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.HidFreeEnumeration(Ref<HidDeviceInfo> devs)
    {
        fixed (HidDeviceInfo* __dsl_devs = devs)
        {
            ((ISdl)this).HidFreeEnumeration(__dsl_devs);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_free_enumeration")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void HidFreeEnumeration(Ref<HidDeviceInfo> devs) =>
        DllImport.HidFreeEnumeration(devs);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    HidDeviceInfo* ISdl.HidGetDeviceInfo(SDL_hid_device* dev) =>
        (
            (delegate* unmanaged<SDL_hid_device*, HidDeviceInfo*>)
                nativeContext.LoadFunction("HidGetDeviceInfo", "SDL3")
        )(dev);

    [NativeFunction("SDL3", EntryPoint = "HidGetDeviceInfo")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static HidDeviceInfo* HidGetDeviceInfo(SDL_hid_device* dev) =>
        DllImport.HidGetDeviceInfo(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<HidDeviceInfo> ISdl.HidGetDeviceInfo(Ref<SDL_hid_device> dev)
    {
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (HidDeviceInfo*)((ISdl)this).HidGetDeviceInfo(__dsl_dev);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_device_info")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<HidDeviceInfo> HidGetDeviceInfo(Ref<SDL_hid_device> dev) =>
        DllImport.HidGetDeviceInfo(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetFeatureReport(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int>)
                nativeContext.LoadFunction("HidGetFeatureReport", "SDL3")
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "HidGetFeatureReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetFeatureReport(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetFeatureReport(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidGetFeatureReport(__dsl_dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_feature_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetFeatureReport(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetIndexedString(
        SDL_hid_device* dev,
        int string_index,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, int, uint*, nuint, int>)
                nativeContext.LoadFunction("HidGetIndexedString", "SDL3")
        )(dev, string_index, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "HidGetIndexedString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetIndexedString(
        SDL_hid_device* dev,
        int string_index,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetIndexedString(dev, string_index, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetIndexedString(
        Ref<SDL_hid_device> dev,
        int string_index,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)
                ((ISdl)this).HidGetIndexedString(__dsl_dev, string_index, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_indexed_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetIndexedString(
        Ref<SDL_hid_device> dev,
        int string_index,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetIndexedString(dev, string_index, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetInputReport(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int>)
                nativeContext.LoadFunction("HidGetInputReport", "SDL3")
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "HidGetInputReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetInputReport(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetInputReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetInputReport(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidGetInputReport(__dsl_dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_input_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetInputReport(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidGetInputReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetManufacturerString(
        SDL_hid_device* dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, uint*, nuint, int>)
                nativeContext.LoadFunction("HidGetManufacturerString", "SDL3")
        )(dev, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "HidGetManufacturerString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetManufacturerString(
        SDL_hid_device* dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetManufacturerString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetManufacturerString(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidGetManufacturerString(__dsl_dev, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_manufacturer_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetManufacturerString(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetManufacturerString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetProductString(
        SDL_hid_device* dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, uint*, nuint, int>)
                nativeContext.LoadFunction("HidGetProductString", "SDL3")
        )(dev, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "HidGetProductString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetProductString(
        SDL_hid_device* dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetProductString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetProductString(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidGetProductString(__dsl_dev, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_product_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetProductString(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetProductString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetReportDescriptor(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* buf,
        [NativeTypeName("size_t")] nuint buf_size
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int>)
                nativeContext.LoadFunction("HidGetReportDescriptor", "SDL3")
        )(dev, buf, buf_size);

    [NativeFunction("SDL3", EntryPoint = "HidGetReportDescriptor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetReportDescriptor(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* buf,
        [NativeTypeName("size_t")] nuint buf_size
    ) => DllImport.HidGetReportDescriptor(dev, buf, buf_size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetReportDescriptor(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> buf,
        [NativeTypeName("size_t")] nuint buf_size
    )
    {
        fixed (byte* __dsl_buf = buf)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidGetReportDescriptor(__dsl_dev, __dsl_buf, buf_size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_report_descriptor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetReportDescriptor(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> buf,
        [NativeTypeName("size_t")] nuint buf_size
    ) => DllImport.HidGetReportDescriptor(dev, buf, buf_size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetSerialNumberString(
        SDL_hid_device* dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, uint*, nuint, int>)
                nativeContext.LoadFunction("HidGetSerialNumberString", "SDL3")
        )(dev, @string, maxlen);

    [NativeFunction("SDL3", EntryPoint = "HidGetSerialNumberString")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetSerialNumberString(
        SDL_hid_device* dev,
        [NativeTypeName("wchar_t *")] uint* @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetSerialNumberString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidGetSerialNumberString(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    )
    {
        fixed (uint* __dsl_string = @string)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidGetSerialNumberString(__dsl_dev, __dsl_string, maxlen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_get_serial_number_string")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidGetSerialNumberString(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("wchar_t *")] Ref<uint> @string,
        [NativeTypeName("size_t")] nuint maxlen
    ) => DllImport.HidGetSerialNumberString(dev, @string, maxlen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidInit() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("HidInit", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "HidInit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidInit() => DllImport.HidInit();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_hid_device* ISdl.HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] uint* serial_number
    ) =>
        (
            (delegate* unmanaged<ushort, ushort, uint*, SDL_hid_device*>)
                nativeContext.LoadFunction("HidOpen", "SDL3")
        )(vendor_id, product_id, serial_number);

    [NativeFunction("SDL3", EntryPoint = "HidOpen")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_hid_device* HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] uint* serial_number
    ) => DllImport.HidOpen(vendor_id, product_id, serial_number);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_hid_device> ISdl.HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
    )
    {
        fixed (uint* __dsl_serial_number = serial_number)
        {
            return (SDL_hid_device*)
                ((ISdl)this).HidOpen(vendor_id, product_id, __dsl_serial_number);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_open")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_hid_device> HidOpen(
        [NativeTypeName("unsigned short")] ushort vendor_id,
        [NativeTypeName("unsigned short")] ushort product_id,
        [NativeTypeName("const wchar_t *")] Ref<uint> serial_number
    ) => DllImport.HidOpen(vendor_id, product_id, serial_number);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_hid_device* ISdl.HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, SDL_hid_device*>)
                nativeContext.LoadFunction("HidOpenPath", "SDL3")
        )(path);

    [NativeFunction("SDL3", EntryPoint = "HidOpenPath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_hid_device* HidOpenPath([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.HidOpenPath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_hid_device> ISdl.HidOpenPath([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (SDL_hid_device*)((ISdl)this).HidOpenPath(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_open_path")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_hid_device> HidOpenPath(
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.HidOpenPath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidRead(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int>)
                nativeContext.LoadFunction("HidRead", "SDL3")
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "HidRead")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidRead(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidRead(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidRead(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidRead(__dsl_dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_read")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidRead(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidRead(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidReadTimeout(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int, int>)
                nativeContext.LoadFunction("HidReadTimeout", "SDL3")
        )(dev, data, length, milliseconds);

    [NativeFunction("SDL3", EntryPoint = "HidReadTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidReadTimeout(
        SDL_hid_device* dev,
        [NativeTypeName("unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    ) => DllImport.HidReadTimeout(dev, data, length, milliseconds);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidReadTimeout(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    )
    {
        fixed (byte* __dsl_data = data)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidReadTimeout(__dsl_dev, __dsl_data, length, milliseconds);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_read_timeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidReadTimeout(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length,
        int milliseconds
    ) => DllImport.HidReadTimeout(dev, data, length, milliseconds);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSendFeatureReport(
        SDL_hid_device* dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int>)
                nativeContext.LoadFunction("HidSendFeatureReport", "SDL3")
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "HidSendFeatureReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSendFeatureReport(
        SDL_hid_device* dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidSendFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSendFeatureReport(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidSendFeatureReport(__dsl_dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_send_feature_report")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSendFeatureReport(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidSendFeatureReport(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSetNonblocking(SDL_hid_device* dev, int nonblock) =>
        (
            (delegate* unmanaged<SDL_hid_device*, int, int>)
                nativeContext.LoadFunction("HidSetNonblocking", "SDL3")
        )(dev, nonblock);

    [NativeFunction("SDL3", EntryPoint = "HidSetNonblocking")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSetNonblocking(SDL_hid_device* dev, int nonblock) =>
        DllImport.HidSetNonblocking(dev, nonblock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidSetNonblocking(Ref<SDL_hid_device> dev, int nonblock)
    {
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidSetNonblocking(__dsl_dev, nonblock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_set_nonblocking")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidSetNonblocking(Ref<SDL_hid_device> dev, int nonblock) =>
        DllImport.HidSetNonblocking(dev, nonblock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidWrite(
        SDL_hid_device* dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) =>
        (
            (delegate* unmanaged<SDL_hid_device*, byte*, nuint, int>)
                nativeContext.LoadFunction("HidWrite", "SDL3")
        )(dev, data, length);

    [NativeFunction("SDL3", EntryPoint = "HidWrite")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidWrite(
        SDL_hid_device* dev,
        [NativeTypeName("const unsigned char *")] byte* data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidWrite(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HidWrite(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    )
    {
        fixed (byte* __dsl_data = data)
        fixed (SDL_hid_device* __dsl_dev = dev)
        {
            return (int)((ISdl)this).HidWrite(__dsl_dev, __dsl_data, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_hid_write")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HidWrite(
        Ref<SDL_hid_device> dev,
        [NativeTypeName("const unsigned char *")] Ref<byte> data,
        [NativeTypeName("size_t")] nuint length
    ) => DllImport.HidWrite(dev, data, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HideCursor() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("HideCursor", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "HideCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HideCursor() => DllImport.HideCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HideWindow(SDL_Window* window) =>
        ((delegate* unmanaged<SDL_Window*, int>)nativeContext.LoadFunction("HideWindow", "SDL3"))(
            window
        );

    [NativeFunction("SDL3", EntryPoint = "HideWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HideWindow(SDL_Window* window) => DllImport.HideWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.HideWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).HideWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_HideWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int HideWindow(Ref<SDL_Window> window) => DllImport.HideWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.Init([NativeTypeName("Uint32")] uint flags) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("Init", "SDL3"))(flags);

    [NativeFunction("SDL3", EntryPoint = "Init")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int Init([NativeTypeName("Uint32")] uint flags) => DllImport.Init(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.InitHapticRumble(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("InitHapticRumble", "SDL3")
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "InitHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int InitHapticRumble(SDL_Haptic* haptic) => DllImport.InitHapticRumble(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.InitHapticRumble(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).InitHapticRumble(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_InitHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int InitHapticRumble(Ref<SDL_Haptic> haptic) =>
        DllImport.InitHapticRumble(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.InitSubSystem([NativeTypeName("Uint32")] uint flags) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("InitSubSystem", "SDL3"))(
            flags
        );

    [NativeFunction("SDL3", EntryPoint = "InitSubSystem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int InitSubSystem([NativeTypeName("Uint32")] uint flags) =>
        DllImport.InitSubSystem(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_IOStream* ISdl.IOFromConstMem(
        [NativeTypeName("const void *")] void* mem,
        [NativeTypeName("size_t")] nuint size
    ) =>
        (
            (delegate* unmanaged<void*, nuint, SDL_IOStream*>)
                nativeContext.LoadFunction("IOFromConstMem", "SDL3")
        )(mem, size);

    [NativeFunction("SDL3", EntryPoint = "IOFromConstMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_IOStream* IOFromConstMem(
        [NativeTypeName("const void *")] void* mem,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.IOFromConstMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_IOStream> ISdl.IOFromConstMem(
        [NativeTypeName("const void *")] Ref mem,
        [NativeTypeName("size_t")] nuint size
    )
    {
        fixed (void* __dsl_mem = mem)
        {
            return (SDL_IOStream*)((ISdl)this).IOFromConstMem(__dsl_mem, size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromConstMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_IOStream> IOFromConstMem(
        [NativeTypeName("const void *")] Ref mem,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.IOFromConstMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_IOStream> ISdl.IOFromDynamicMem() => (SDL_IOStream*)((ISdl)this).IOFromDynamicMemRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_IOStream> IOFromDynamicMem() => DllImport.IOFromDynamicMem();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_IOStream* ISdl.IOFromDynamicMemRaw() =>
        (
            (delegate* unmanaged<SDL_IOStream*>)
                nativeContext.LoadFunction("SDL_IOFromDynamicMem", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromDynamicMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_IOStream* IOFromDynamicMemRaw() => DllImport.IOFromDynamicMemRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_IOStream* ISdl.IOFromFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("const char *")] sbyte* mode
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, SDL_IOStream*>)
                nativeContext.LoadFunction("IOFromFile", "SDL3")
        )(file, mode);

    [NativeFunction("SDL3", EntryPoint = "IOFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_IOStream* IOFromFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("const char *")] sbyte* mode
    ) => DllImport.IOFromFile(file, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_IOStream> ISdl.IOFromFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("const char *")] Ref<sbyte> mode
    )
    {
        fixed (sbyte* __dsl_mode = mode)
        fixed (sbyte* __dsl_file = file)
        {
            return (SDL_IOStream*)((ISdl)this).IOFromFile(__dsl_file, __dsl_mode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_IOStream> IOFromFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("const char *")] Ref<sbyte> mode
    ) => DllImport.IOFromFile(file, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_IOStream* ISdl.IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
        (
            (delegate* unmanaged<void*, nuint, SDL_IOStream*>)
                nativeContext.LoadFunction("IOFromMem", "SDL3")
        )(mem, size);

    [NativeFunction("SDL3", EntryPoint = "IOFromMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_IOStream* IOFromMem(void* mem, [NativeTypeName("size_t")] nuint size) =>
        DllImport.IOFromMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_IOStream> ISdl.IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size)
    {
        fixed (void* __dsl_mem = mem)
        {
            return (SDL_IOStream*)((ISdl)this).IOFromMem(__dsl_mem, size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOFromMem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_IOStream> IOFromMem(Ref mem, [NativeTypeName("size_t")] nuint size) =>
        DllImport.IOFromMem(mem, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.IOvprintf(
        SDL_IOStream* context,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) =>
        (
            (delegate* unmanaged<SDL_IOStream*, sbyte*, sbyte*, nuint>)
                nativeContext.LoadFunction("IOvprintf", "SDL3")
        )(context, fmt, ap);

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "IOvprintf")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint IOvprintf(
        SDL_IOStream* context,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) => DllImport.IOvprintf(context, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.IOvprintf(
        Ref<SDL_IOStream> context,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    )
    {
        fixed (sbyte* __dsl_ap = ap)
        fixed (sbyte* __dsl_fmt = fmt)
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (nuint)((ISdl)this).IOvprintf(__dsl_context, __dsl_fmt, __dsl_ap);
        }
    }

    [return: NativeTypeName("size_t")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IOvprintf")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint IOvprintf(
        Ref<SDL_IOStream> context,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    ) => DllImport.IOvprintf(context, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.IsGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (MaybeBool<int>)(int)((ISdl)this).IsGamepadRaw(instance_id);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> IsGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.IsGamepad(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("SDL_IsGamepad", "SDL3"))(
            instance_id
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int IsGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.IsGamepadRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.IsJoystickHaptic(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("IsJoystickHaptic", "SDL3")
        )(joystick);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "IsJoystickHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int IsJoystickHaptic(SDL_Joystick* joystick) =>
        DllImport.IsJoystickHaptic(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.IsJoystickHaptic(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (MaybeBool<int>)(int)((ISdl)this).IsJoystickHaptic(__dsl_joystick);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> IsJoystickHaptic(Ref<SDL_Joystick> joystick) =>
        DllImport.IsJoystickHaptic(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.IsJoystickVirtual([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (MaybeBool<int>)(int)((ISdl)this).IsJoystickVirtualRaw(instance_id);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> IsJoystickVirtual(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.IsJoystickVirtual(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.IsJoystickVirtualRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, int>)
                nativeContext.LoadFunction("SDL_IsJoystickVirtual", "SDL3")
        )(instance_id);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsJoystickVirtual")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int IsJoystickVirtualRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        DllImport.IsJoystickVirtualRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.IsMouseHaptic() => (MaybeBool<int>)(int)((ISdl)this).IsMouseHapticRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> IsMouseHaptic() => DllImport.IsMouseHaptic();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.IsMouseHapticRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_IsMouseHaptic", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsMouseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int IsMouseHapticRaw() => DllImport.IsMouseHapticRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.IsTablet() => (MaybeBool<int>)(int)((ISdl)this).IsTabletRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> IsTablet() => DllImport.IsTablet();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.IsTabletRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_IsTablet", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_IsTablet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int IsTabletRaw() => DllImport.IsTabletRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.JoystickConnected(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int>)
                nativeContext.LoadFunction("JoystickConnected", "SDL3")
        )(joystick);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "JoystickConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int JoystickConnected(SDL_Joystick* joystick) =>
        DllImport.JoystickConnected(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.JoystickConnected(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (MaybeBool<int>)(int)((ISdl)this).JoystickConnected(__dsl_joystick);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> JoystickConnected(Ref<SDL_Joystick> joystick) =>
        DllImport.JoystickConnected(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.JoystickEventsEnabled() =>
        (MaybeBool<int>)(int)((ISdl)this).JoystickEventsEnabledRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> JoystickEventsEnabled() => DllImport.JoystickEventsEnabled();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.JoystickEventsEnabledRaw() =>
        (
            (delegate* unmanaged<int>)
                nativeContext.LoadFunction("SDL_JoystickEventsEnabled", "SDL3")
        )();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_JoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int JoystickEventsEnabledRaw() => DllImport.JoystickEventsEnabledRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.LoadBMP([NativeTypeName("const char *")] sbyte* file) =>
        ((delegate* unmanaged<sbyte*, Surface*>)nativeContext.LoadFunction("LoadBMP", "SDL3"))(
            file
        );

    [NativeFunction("SDL3", EntryPoint = "LoadBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* LoadBMP([NativeTypeName("const char *")] sbyte* file) =>
        DllImport.LoadBMP(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file)
    {
        fixed (sbyte* __dsl_file = file)
        {
            return (Surface*)((ISdl)this).LoadBMP(__dsl_file);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> LoadBMP([NativeTypeName("const char *")] Ref<sbyte> file) =>
        DllImport.LoadBMP(file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.LoadBMPIO(SDL_IOStream* src, [NativeTypeName("SDL_bool")] int closeio) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int, Surface*>)
                nativeContext.LoadFunction("LoadBMPIO", "SDL3")
        )(src, closeio);

    [NativeFunction("SDL3", EntryPoint = "LoadBMPIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* LoadBMPIO(SDL_IOStream* src, [NativeTypeName("SDL_bool")] int closeio) =>
        DllImport.LoadBMPIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.LoadBMPIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    )
    {
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (Surface*)((ISdl)this).LoadBMPIO(__dsl_src, (int)closeio);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadBMP_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> LoadBMPIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    ) => DllImport.LoadBMPIO(src, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.LoadFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("size_t *")] nuint* datasize
    ) =>
        (
            (delegate* unmanaged<sbyte*, nuint*, void*>)
                nativeContext.LoadFunction("LoadFile", "SDL3")
        )(file, datasize);

    [NativeFunction("SDL3", EntryPoint = "LoadFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* LoadFile(
        [NativeTypeName("const char *")] sbyte* file,
        [NativeTypeName("size_t *")] nuint* datasize
    ) => DllImport.LoadFile(file, datasize);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.LoadFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("size_t *")] Ref<nuint> datasize
    )
    {
        fixed (nuint* __dsl_datasize = datasize)
        fixed (sbyte* __dsl_file = file)
        {
            return (void*)((ISdl)this).LoadFile(__dsl_file, __dsl_datasize);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr LoadFile(
        [NativeTypeName("const char *")] Ref<sbyte> file,
        [NativeTypeName("size_t *")] Ref<nuint> datasize
    ) => DllImport.LoadFile(file, datasize);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.LoadFileIO(
        SDL_IOStream* src,
        [NativeTypeName("size_t *")] nuint* datasize,
        [NativeTypeName("SDL_bool")] int closeio
    ) =>
        (
            (delegate* unmanaged<SDL_IOStream*, nuint*, int, void*>)
                nativeContext.LoadFunction("LoadFileIO", "SDL3")
        )(src, datasize, closeio);

    [NativeFunction("SDL3", EntryPoint = "LoadFileIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* LoadFileIO(
        SDL_IOStream* src,
        [NativeTypeName("size_t *")] nuint* datasize,
        [NativeTypeName("SDL_bool")] int closeio
    ) => DllImport.LoadFileIO(src, datasize, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.LoadFileIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("size_t *")] Ref<nuint> datasize,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    )
    {
        fixed (nuint* __dsl_datasize = datasize)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (void*)((ISdl)this).LoadFileIO(__dsl_src, __dsl_datasize, (int)closeio);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFile_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr LoadFileIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("size_t *")] Ref<nuint> datasize,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    ) => DllImport.LoadFileIO(src, datasize, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<void> ISdl.LoadFunction(
        void* handle,
        [NativeTypeName("const char *")] sbyte* name
    ) =>
        (
            (delegate* unmanaged<void*, sbyte*, delegate* unmanaged<void>>)
                nativeContext.LoadFunction("LoadFunction", "SDL3")
        )(handle, name);

    [return: NativeTypeName("SDL_FunctionPointer")]
    [NativeFunction("SDL3", EntryPoint = "LoadFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<void> LoadFunction(
        void* handle,
        [NativeTypeName("const char *")] sbyte* name
    ) => DllImport.LoadFunction(handle, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    delegate* unmanaged<void> ISdl.LoadFunction(
        Ref handle,
        [NativeTypeName("const char *")] Ref<sbyte> name
    )
    {
        fixed (sbyte* __dsl_name = name)
        fixed (void* __dsl_handle = handle)
        {
            return (delegate* unmanaged<void>)((ISdl)this).LoadFunction(__dsl_handle, __dsl_name);
        }
    }

    [return: NativeTypeName("SDL_FunctionPointer")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static delegate* unmanaged<void> LoadFunction(
        Ref handle,
        [NativeTypeName("const char *")] Ref<sbyte> name
    ) => DllImport.LoadFunction(handle, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
        ((delegate* unmanaged<sbyte*, void*>)nativeContext.LoadFunction("LoadObject", "SDL3"))(
            sofile
        );

    [NativeFunction("SDL3", EntryPoint = "LoadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* LoadObject([NativeTypeName("const char *")] sbyte* sofile) =>
        DllImport.LoadObject(sofile);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile)
    {
        fixed (sbyte* __dsl_sofile = sofile)
        {
            return (void*)((ISdl)this).LoadObject(__dsl_sofile);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr LoadObject([NativeTypeName("const char *")] Ref<sbyte> sofile) =>
        DllImport.LoadObject(sofile);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LoadWAV(
        [NativeTypeName("const char *")] sbyte* path,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) =>
        (
            (delegate* unmanaged<sbyte*, AudioSpec*, byte**, uint*, int>)
                nativeContext.LoadFunction("LoadWAV", "SDL3")
        )(path, spec, audio_buf, audio_len);

    [NativeFunction("SDL3", EntryPoint = "LoadWAV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LoadWAV(
        [NativeTypeName("const char *")] sbyte* path,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) => DllImport.LoadWAV(path, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LoadWAV(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    )
    {
        fixed (uint* __dsl_audio_len = audio_len)
        fixed (byte** __dsl_audio_buf = audio_buf)
        fixed (AudioSpec* __dsl_spec = spec)
        fixed (sbyte* __dsl_path = path)
        {
            return (int)
                ((ISdl)this).LoadWAV(__dsl_path, __dsl_spec, __dsl_audio_buf, __dsl_audio_len);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LoadWAV(
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    ) => DllImport.LoadWAV(path, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LoadWAVIO(
        SDL_IOStream* src,
        [NativeTypeName("SDL_bool")] int closeio,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int, AudioSpec*, byte**, uint*, int>)
                nativeContext.LoadFunction("LoadWAVIO", "SDL3")
        )(src, closeio, spec, audio_buf, audio_len);

    [NativeFunction("SDL3", EntryPoint = "LoadWAVIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LoadWAVIO(
        SDL_IOStream* src,
        [NativeTypeName("SDL_bool")] int closeio,
        AudioSpec* spec,
        [NativeTypeName("Uint8 **")] byte** audio_buf,
        [NativeTypeName("Uint32 *")] uint* audio_len
    ) => DllImport.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LoadWAVIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    )
    {
        fixed (uint* __dsl_audio_len = audio_len)
        fixed (byte** __dsl_audio_buf = audio_buf)
        fixed (AudioSpec* __dsl_spec = spec)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).LoadWAVIO(
                    __dsl_src,
                    (int)closeio,
                    __dsl_spec,
                    __dsl_audio_buf,
                    __dsl_audio_len
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LoadWAV_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LoadWAVIO(
        Ref<SDL_IOStream> src,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio,
        Ref<AudioSpec> spec,
        [NativeTypeName("Uint8 **")] Ref2D<byte> audio_buf,
        [NativeTypeName("Uint32 *")] Ref<uint> audio_len
    ) => DllImport.LoadWAVIO(src, closeio, spec, audio_buf, audio_len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockAudioStream(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, int>)
                nativeContext.LoadFunction("LockAudioStream", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "LockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockAudioStream(SDL_AudioStream* stream) => DllImport.LockAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockAudioStream(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).LockAudioStream(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockAudioStream(Ref<SDL_AudioStream> stream) =>
        DllImport.LockAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockJoysticks() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("LockJoysticks", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "LockJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockJoysticks() => DllImport.LockJoysticks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockMutex(SDL_Mutex* mutex) =>
        ((delegate* unmanaged<SDL_Mutex*, void>)nativeContext.LoadFunction("LockMutex", "SDL3"))(
            mutex
        );

    [NativeFunction("SDL3", EntryPoint = "LockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockMutex(SDL_Mutex* mutex) => DllImport.LockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockMutex(Ref<SDL_Mutex> mutex)
    {
        fixed (SDL_Mutex* __dsl_mutex = mutex)
        {
            ((ISdl)this).LockMutex(__dsl_mutex);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockMutex(Ref<SDL_Mutex> mutex) => DllImport.LockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("LockProperties", "SDL3"))(
            props
        );

    [NativeFunction("SDL3", EntryPoint = "LockProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.LockProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockRWLockForReading(SDL_RWLock* rwlock) =>
        (
            (delegate* unmanaged<SDL_RWLock*, void>)
                nativeContext.LoadFunction("LockRWLockForReading", "SDL3")
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "LockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockRWLockForReading(SDL_RWLock* rwlock) =>
        DllImport.LockRWLockForReading(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockRWLockForReading(Ref<SDL_RWLock> rwlock)
    {
        fixed (SDL_RWLock* __dsl_rwlock = rwlock)
        {
            ((ISdl)this).LockRWLockForReading(__dsl_rwlock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockRWLockForReading(Ref<SDL_RWLock> rwlock) =>
        DllImport.LockRWLockForReading(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockRWLockForWriting(SDL_RWLock* rwlock) =>
        (
            (delegate* unmanaged<SDL_RWLock*, void>)
                nativeContext.LoadFunction("LockRWLockForWriting", "SDL3")
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "LockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockRWLockForWriting(SDL_RWLock* rwlock) =>
        DllImport.LockRWLockForWriting(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockRWLockForWriting(Ref<SDL_RWLock> rwlock)
    {
        fixed (SDL_RWLock* __dsl_rwlock = rwlock)
        {
            ((ISdl)this).LockRWLockForWriting(__dsl_rwlock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockRWLockForWriting(Ref<SDL_RWLock> rwlock) =>
        DllImport.LockRWLockForWriting(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        ((delegate* unmanaged<int*, void>)nativeContext.LoadFunction("LockSpinlock", "SDL3"))(
            @lock
        );

    [NativeFunction("SDL3", EntryPoint = "LockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        DllImport.LockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
    {
        fixed (int* __dsl_lock = @lock)
        {
            ((ISdl)this).LockSpinlock(__dsl_lock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
        DllImport.LockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockSurface(Surface* surface) =>
        ((delegate* unmanaged<Surface*, int>)nativeContext.LoadFunction("LockSurface", "SDL3"))(
            surface
        );

    [NativeFunction("SDL3", EntryPoint = "LockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockSurface(Surface* surface) => DllImport.LockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockSurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).LockSurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockSurface(Ref<Surface> surface) => DllImport.LockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        void** pixels,
        int* pitch
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, Rect*, void**, int*, int>)
                nativeContext.LoadFunction("LockTexture", "SDL3")
        )(texture, rect, pixels, pitch);

    [NativeFunction("SDL3", EntryPoint = "LockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        void** pixels,
        int* pitch
    ) => DllImport.LockTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D pixels,
        Ref<int> pitch
    )
    {
        fixed (int* __dsl_pitch = pitch)
        fixed (void** __dsl_pixels = pixels)
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)
                ((ISdl)this).LockTexture(__dsl_texture, __dsl_rect, __dsl_pixels, __dsl_pitch);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D pixels,
        Ref<int> pitch
    ) => DllImport.LockTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockTextureToSurface(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        Surface** surface
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, Rect*, Surface**, int>)
                nativeContext.LoadFunction("LockTextureToSurface", "SDL3")
        )(texture, rect, surface);

    [NativeFunction("SDL3", EntryPoint = "LockTextureToSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockTextureToSurface(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        Surface** surface
    ) => DllImport.LockTextureToSurface(texture, rect, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.LockTextureToSurface(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D<Surface> surface
    )
    {
        fixed (Surface** __dsl_surface = surface)
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).LockTextureToSurface(__dsl_texture, __dsl_rect, __dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LockTextureToSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int LockTextureToSurface(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        Ref2D<Surface> surface
    ) => DllImport.LockTextureToSurface(texture, rect, surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    LogPriority ISdl.LogGetPriority(int category) =>
        (
            (delegate* unmanaged<int, LogPriority>)
                nativeContext.LoadFunction("LogGetPriority", "SDL3")
        )(category);

    [NativeFunction("SDL3", EntryPoint = "LogGetPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static LogPriority LogGetPriority(int category) => DllImport.LogGetPriority(category);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) =>
        (
            (delegate* unmanaged<int, LogPriority, sbyte*, sbyte*, void>)
                nativeContext.LoadFunction("LogMessageV", "SDL3")
        )(category, priority, fmt, ap);

    [NativeFunction("SDL3", EntryPoint = "LogMessageV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] sbyte* fmt,
        [NativeTypeName("va_list")] sbyte* ap
    ) => DllImport.LogMessageV(category, priority, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    )
    {
        fixed (sbyte* __dsl_ap = ap)
        fixed (sbyte* __dsl_fmt = fmt)
        {
            ((ISdl)this).LogMessageV(category, priority, __dsl_fmt, __dsl_ap);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_LogMessageV")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogMessageV(
        int category,
        LogPriority priority,
        [NativeTypeName("const char *")] Ref<sbyte> fmt,
        [NativeTypeName("va_list")] Ref<sbyte> ap
    ) => DllImport.LogMessageV(category, priority, fmt, ap);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogResetPriorities() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("LogResetPriorities", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "LogResetPriorities")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogResetPriorities() => DllImport.LogResetPriorities();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogSetAllPriority(LogPriority priority) =>
        (
            (delegate* unmanaged<LogPriority, void>)
                nativeContext.LoadFunction("LogSetAllPriority", "SDL3")
        )(priority);

    [NativeFunction("SDL3", EntryPoint = "LogSetAllPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogSetAllPriority(LogPriority priority) =>
        DllImport.LogSetAllPriority(priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.LogSetPriority(int category, LogPriority priority) =>
        (
            (delegate* unmanaged<int, LogPriority, void>)
                nativeContext.LoadFunction("LogSetPriority", "SDL3")
        )(category, priority);

    [NativeFunction("SDL3", EntryPoint = "LogSetPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void LogSetPriority(int category, LogPriority priority) =>
        DllImport.LogSetPriority(category, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRGB(
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<PixelFormat*, byte, byte, byte, uint>)
                nativeContext.LoadFunction("MapRGB", "SDL3")
        )(format, r, g, b);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "MapRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRGB(
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.MapRGB(format, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRGB(
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (PixelFormat* __dsl_format = format)
        {
            return (uint)((ISdl)this).MapRGB(__dsl_format, r, g, b);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapRGB")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRGB(
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.MapRGB(format, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRgba(
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) =>
        (
            (delegate* unmanaged<PixelFormat*, byte, byte, byte, byte, uint>)
                nativeContext.LoadFunction("MapRgba", "SDL3")
        )(format, r, g, b, a);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "MapRgba")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRgba(
        [NativeTypeName("const SDL_PixelFormat *")] PixelFormat* format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.MapRgba(format, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.MapRgba(
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    )
    {
        fixed (PixelFormat* __dsl_format = format)
        {
            return (uint)((ISdl)this).MapRgba(__dsl_format, r, g, b, a);
        }
    }

    [return: NativeTypeName("Uint32")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MapRGBA")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint MapRgba(
        [NativeTypeName("const SDL_PixelFormat *")] Ref<PixelFormat> format,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.MapRgba(format, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.MaximizeWindow(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("MaximizeWindow", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "MaximizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int MaximizeWindow(SDL_Window* window) => DllImport.MaximizeWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.MaximizeWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).MaximizeWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MaximizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int MaximizeWindow(Ref<SDL_Window> window) => DllImport.MaximizeWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MemoryBarrierAcquireFunction() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("MemoryBarrierAcquireFunction", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "MemoryBarrierAcquireFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MemoryBarrierAcquireFunction() => DllImport.MemoryBarrierAcquireFunction();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MemoryBarrierReleaseFunction() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("MemoryBarrierReleaseFunction", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "MemoryBarrierReleaseFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MemoryBarrierReleaseFunction() => DllImport.MemoryBarrierReleaseFunction();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.MetalCreateView(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, void*>)
                nativeContext.LoadFunction("MetalCreateView", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_MetalView")]
    [NativeFunction("SDL3", EntryPoint = "MetalCreateView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* MetalCreateView(SDL_Window* window) => DllImport.MetalCreateView(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.MetalCreateView(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (void*)((ISdl)this).MetalCreateView(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_MetalView")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_CreateView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr MetalCreateView(Ref<SDL_Window> window) => DllImport.MetalCreateView(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
        ((delegate* unmanaged<void*, void>)nativeContext.LoadFunction("MetalDestroyView", "SDL3"))(
            view
        );

    [NativeFunction("SDL3", EntryPoint = "MetalDestroyView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] void* view) =>
        DllImport.MetalDestroyView(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view)
    {
        fixed (void* __dsl_view = view)
        {
            ((ISdl)this).MetalDestroyView(__dsl_view);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_DestroyView")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void MetalDestroyView([NativeTypeName("SDL_MetalView")] Ref view) =>
        DllImport.MetalDestroyView(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void* ISdl.MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
        ((delegate* unmanaged<void*, void*>)nativeContext.LoadFunction("MetalGetLayer", "SDL3"))(
            view
        );

    [NativeFunction("SDL3", EntryPoint = "MetalGetLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void* MetalGetLayer([NativeTypeName("SDL_MetalView")] void* view) =>
        DllImport.MetalGetLayer(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr ISdl.MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view)
    {
        fixed (void* __dsl_view = view)
        {
            return (void*)((ISdl)this).MetalGetLayer(__dsl_view);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_Metal_GetLayer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr MetalGetLayer([NativeTypeName("SDL_MetalView")] Ref view) =>
        DllImport.MetalGetLayer(view);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.MinimizeWindow(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("MinimizeWindow", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "MinimizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int MinimizeWindow(SDL_Window* window) => DllImport.MinimizeWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.MinimizeWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).MinimizeWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MinimizeWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int MinimizeWindow(Ref<SDL_Window> window) => DllImport.MinimizeWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.MixAudioFormat(
        [NativeTypeName("Uint8 *")] byte* dst,
        [NativeTypeName("const Uint8 *")] byte* src,
        [NativeTypeName("SDL_AudioFormat")] ushort format,
        [NativeTypeName("Uint32")] uint len,
        int volume
    ) =>
        (
            (delegate* unmanaged<byte*, byte*, ushort, uint, int, int>)
                nativeContext.LoadFunction("MixAudioFormat", "SDL3")
        )(dst, src, format, len, volume);

    [NativeFunction("SDL3", EntryPoint = "MixAudioFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int MixAudioFormat(
        [NativeTypeName("Uint8 *")] byte* dst,
        [NativeTypeName("const Uint8 *")] byte* src,
        [NativeTypeName("SDL_AudioFormat")] ushort format,
        [NativeTypeName("Uint32")] uint len,
        int volume
    ) => DllImport.MixAudioFormat(dst, src, format, len, volume);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.MixAudioFormat(
        [NativeTypeName("Uint8 *")] Ref<byte> dst,
        [NativeTypeName("const Uint8 *")] Ref<byte> src,
        [NativeTypeName("SDL_AudioFormat")] ushort format,
        [NativeTypeName("Uint32")] uint len,
        int volume
    )
    {
        fixed (byte* __dsl_src = src)
        fixed (byte* __dsl_dst = dst)
        {
            return (int)((ISdl)this).MixAudioFormat(__dsl_dst, __dsl_src, format, len, volume);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_MixAudioFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int MixAudioFormat(
        [NativeTypeName("Uint8 *")] Ref<byte> dst,
        [NativeTypeName("const Uint8 *")] Ref<byte> src,
        [NativeTypeName("SDL_AudioFormat")] ushort format,
        [NativeTypeName("Uint32")] uint len,
        int volume
    ) => DllImport.MixAudioFormat(dst, src, format, len, volume);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationDidBecomeActive() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("OnApplicationDidBecomeActive", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "OnApplicationDidBecomeActive")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationDidBecomeActive() => DllImport.OnApplicationDidBecomeActive();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationDidEnterBackground() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("OnApplicationDidEnterBackground", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "OnApplicationDidEnterBackground")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationDidEnterBackground() =>
        DllImport.OnApplicationDidEnterBackground();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationDidReceiveMemoryWarning() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("OnApplicationDidReceiveMemoryWarning", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "OnApplicationDidReceiveMemoryWarning")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationDidReceiveMemoryWarning() =>
        DllImport.OnApplicationDidReceiveMemoryWarning();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationWillEnterForeground() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("OnApplicationWillEnterForeground", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "OnApplicationWillEnterForeground")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationWillEnterForeground() =>
        DllImport.OnApplicationWillEnterForeground();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationWillResignActive() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("OnApplicationWillResignActive", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "OnApplicationWillResignActive")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationWillResignActive() => DllImport.OnApplicationWillResignActive();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.OnApplicationWillTerminate() =>
        (
            (delegate* unmanaged<void>)
                nativeContext.LoadFunction("OnApplicationWillTerminate", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "OnApplicationWillTerminate")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void OnApplicationWillTerminate() => DllImport.OnApplicationWillTerminate();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
    ) =>
        (
            (delegate* unmanaged<uint, AudioSpec*, uint>)
                nativeContext.LoadFunction("OpenAudioDevice", "SDL3")
        )(devid, spec);

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [NativeFunction("SDL3", EntryPoint = "OpenAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec
    ) => DllImport.OpenAudioDevice(devid, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
    )
    {
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (uint)((ISdl)this).OpenAudioDevice(devid, __dsl_spec);
        }
    }

    [return: NativeTypeName("SDL_AudioDeviceID")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint OpenAudioDevice(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec
    ) => DllImport.OpenAudioDevice(devid, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_AudioStream* ISdl.OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                uint,
                AudioSpec*,
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void>,
                void*,
                SDL_AudioStream*>)
                nativeContext.LoadFunction("OpenAudioDeviceStream", "SDL3")
        )(devid, spec, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "OpenAudioDeviceStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_AudioStream* OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* spec,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        void* userdata
    ) => DllImport.OpenAudioDeviceStream(devid, spec, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_AudioStream> ISdl.OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (AudioSpec* __dsl_spec = spec)
        {
            return (SDL_AudioStream*)
                ((ISdl)this).OpenAudioDeviceStream(devid, __dsl_spec, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenAudioDeviceStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_AudioStream> OpenAudioDeviceStream(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> spec,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        Ref userdata
    ) => DllImport.OpenAudioDeviceStream(devid, spec, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Camera* ISdl.OpenCameraDevice(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
    ) =>
        (
            (delegate* unmanaged<uint, CameraSpec*, SDL_Camera*>)
                nativeContext.LoadFunction("OpenCameraDevice", "SDL3")
        )(instance_id, spec);

    [NativeFunction("SDL3", EntryPoint = "OpenCameraDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Camera* OpenCameraDevice(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] CameraSpec* spec
    ) => DllImport.OpenCameraDevice(instance_id, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Camera> ISdl.OpenCameraDevice(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
    )
    {
        fixed (CameraSpec* __dsl_spec = spec)
        {
            return (SDL_Camera*)((ISdl)this).OpenCameraDevice(instance_id, __dsl_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenCameraDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Camera> OpenCameraDevice(
        [NativeTypeName("SDL_CameraDeviceID")] uint instance_id,
        [NativeTypeName("const SDL_CameraSpec *")] Ref<CameraSpec> spec
    ) => DllImport.OpenCameraDevice(instance_id, spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Storage* ISdl.OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
        (
            (delegate* unmanaged<sbyte*, SDL_Storage*>)
                nativeContext.LoadFunction("OpenFileStorage", "SDL3")
        )(path);

    [NativeFunction("SDL3", EntryPoint = "OpenFileStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Storage* OpenFileStorage([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.OpenFileStorage(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Storage> ISdl.OpenFileStorage([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (SDL_Storage*)((ISdl)this).OpenFileStorage(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenFileStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Storage> OpenFileStorage(
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.OpenFileStorage(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Gamepad> ISdl.OpenGamepad([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (SDL_Gamepad*)((ISdl)this).OpenGamepadRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Gamepad> OpenGamepad(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.OpenGamepad(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Gamepad* ISdl.OpenGamepadRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SDL_Gamepad*>)
                nativeContext.LoadFunction("SDL_OpenGamepad", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Gamepad* OpenGamepadRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.OpenGamepadRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Haptic> ISdl.OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (SDL_Haptic*)((ISdl)this).OpenHapticRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Haptic> OpenHaptic([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        DllImport.OpenHaptic(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Haptic* ISdl.OpenHapticFromJoystick(SDL_Joystick* joystick) =>
        (
            (delegate* unmanaged<SDL_Joystick*, SDL_Haptic*>)
                nativeContext.LoadFunction("OpenHapticFromJoystick", "SDL3")
        )(joystick);

    [NativeFunction("SDL3", EntryPoint = "OpenHapticFromJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Haptic* OpenHapticFromJoystick(SDL_Joystick* joystick) =>
        DllImport.OpenHapticFromJoystick(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Haptic> ISdl.OpenHapticFromJoystick(Ref<SDL_Joystick> joystick)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (SDL_Haptic*)((ISdl)this).OpenHapticFromJoystick(__dsl_joystick);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Haptic> OpenHapticFromJoystick(Ref<SDL_Joystick> joystick) =>
        DllImport.OpenHapticFromJoystick(joystick);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Haptic> ISdl.OpenHapticFromMouse() =>
        (SDL_Haptic*)((ISdl)this).OpenHapticFromMouseRaw();

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Haptic> OpenHapticFromMouse() => DllImport.OpenHapticFromMouse();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Haptic* ISdl.OpenHapticFromMouseRaw() =>
        (
            (delegate* unmanaged<SDL_Haptic*>)
                nativeContext.LoadFunction("SDL_OpenHapticFromMouse", "SDL3")
        )();

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHapticFromMouse")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Haptic* OpenHapticFromMouseRaw() => DllImport.OpenHapticFromMouseRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Haptic* ISdl.OpenHapticRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SDL_Haptic*>)
                nativeContext.LoadFunction("SDL_OpenHaptic", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Haptic* OpenHapticRaw([NativeTypeName("SDL_HapticID")] uint instance_id) =>
        DllImport.OpenHapticRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_IOStream* ISdl.OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<IOStreamInterface*, void*, SDL_IOStream*>)
                nativeContext.LoadFunction("OpenIO", "SDL3")
        )(iface, userdata);

    [NativeFunction("SDL3", EntryPoint = "OpenIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_IOStream* OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] IOStreamInterface* iface,
        void* userdata
    ) => DllImport.OpenIO(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_IOStream> ISdl.OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (IOStreamInterface* __dsl_iface = iface)
        {
            return (SDL_IOStream*)((ISdl)this).OpenIO(__dsl_iface, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_IOStream> OpenIO(
        [NativeTypeName("const SDL_IOStreamInterface *")] Ref<IOStreamInterface> iface,
        Ref userdata
    ) => DllImport.OpenIO(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Joystick> ISdl.OpenJoystick([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (SDL_Joystick*)((ISdl)this).OpenJoystickRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Joystick> OpenJoystick(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.OpenJoystick(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Joystick* ISdl.OpenJoystickRaw([NativeTypeName("SDL_JoystickID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SDL_Joystick*>)
                nativeContext.LoadFunction("SDL_OpenJoystick", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Joystick* OpenJoystickRaw(
        [NativeTypeName("SDL_JoystickID")] uint instance_id
    ) => DllImport.OpenJoystickRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Sensor> ISdl.OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (SDL_Sensor*)((ISdl)this).OpenSensorRaw(instance_id);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Sensor> OpenSensor([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        DllImport.OpenSensor(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Sensor* ISdl.OpenSensorRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        (
            (delegate* unmanaged<uint, SDL_Sensor*>)
                nativeContext.LoadFunction("SDL_OpenSensor", "SDL3")
        )(instance_id);

    [NativeFunction("SDL3", EntryPoint = "SDL_OpenSensor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Sensor* OpenSensorRaw([NativeTypeName("SDL_SensorID")] uint instance_id) =>
        DllImport.OpenSensorRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Storage* ISdl.OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<StorageInterface*, void*, SDL_Storage*>)
                nativeContext.LoadFunction("OpenStorage", "SDL3")
        )(iface, userdata);

    [NativeFunction("SDL3", EntryPoint = "OpenStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Storage* OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] StorageInterface* iface,
        void* userdata
    ) => DllImport.OpenStorage(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Storage> ISdl.OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (StorageInterface* __dsl_iface = iface)
        {
            return (SDL_Storage*)((ISdl)this).OpenStorage(__dsl_iface, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Storage> OpenStorage(
        [NativeTypeName("const SDL_StorageInterface *")] Ref<StorageInterface> iface,
        Ref userdata
    ) => DllImport.OpenStorage(iface, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Storage* ISdl.OpenTitleStorage(
        [NativeTypeName("const char *")] sbyte* @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<sbyte*, uint, SDL_Storage*>)
                nativeContext.LoadFunction("OpenTitleStorage", "SDL3")
        )(@override, props);

    [NativeFunction("SDL3", EntryPoint = "OpenTitleStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Storage* OpenTitleStorage(
        [NativeTypeName("const char *")] sbyte* @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenTitleStorage(@override, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Storage> ISdl.OpenTitleStorage(
        [NativeTypeName("const char *")] Ref<sbyte> @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (sbyte* __dsl_override = @override)
        {
            return (SDL_Storage*)((ISdl)this).OpenTitleStorage(__dsl_override, props);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenTitleStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Storage> OpenTitleStorage(
        [NativeTypeName("const char *")] Ref<sbyte> @override,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenTitleStorage(@override, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.OpenURL([NativeTypeName("const char *")] sbyte* url) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("OpenURL", "SDL3"))(url);

    [NativeFunction("SDL3", EntryPoint = "OpenURL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int OpenURL([NativeTypeName("const char *")] sbyte* url) =>
        DllImport.OpenURL(url);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.OpenURL([NativeTypeName("const char *")] Ref<sbyte> url)
    {
        fixed (sbyte* __dsl_url = url)
        {
            return (int)((ISdl)this).OpenURL(__dsl_url);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenURL")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int OpenURL([NativeTypeName("const char *")] Ref<sbyte> url) =>
        DllImport.OpenURL(url);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    SDL_Storage* ISdl.OpenUserStorage(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, uint, SDL_Storage*>)
                nativeContext.LoadFunction("OpenUserStorage", "SDL3")
        )(org, app, props);

    [NativeFunction("SDL3", EntryPoint = "OpenUserStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static SDL_Storage* OpenUserStorage(
        [NativeTypeName("const char *")] sbyte* org,
        [NativeTypeName("const char *")] sbyte* app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenUserStorage(org, app, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<SDL_Storage> ISdl.OpenUserStorage(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    )
    {
        fixed (sbyte* __dsl_app = app)
        fixed (sbyte* __dsl_org = org)
        {
            return (SDL_Storage*)((ISdl)this).OpenUserStorage(__dsl_org, __dsl_app, props);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_OpenUserStorage")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<SDL_Storage> OpenUserStorage(
        [NativeTypeName("const char *")] Ref<sbyte> org,
        [NativeTypeName("const char *")] Ref<sbyte> app,
        [NativeTypeName("SDL_PropertiesID")] uint props
    ) => DllImport.OpenUserStorage(org, app, props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("PauseAudioDevice", "SDL3"))(
            dev
        );

    [NativeFunction("SDL3", EntryPoint = "PauseAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PauseAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        DllImport.PauseAudioDevice(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PauseHaptic(SDL_Haptic* haptic) =>
        ((delegate* unmanaged<SDL_Haptic*, int>)nativeContext.LoadFunction("PauseHaptic", "SDL3"))(
            haptic
        );

    [NativeFunction("SDL3", EntryPoint = "PauseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PauseHaptic(SDL_Haptic* haptic) => DllImport.PauseHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PauseHaptic(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).PauseHaptic(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PauseHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PauseHaptic(Ref<SDL_Haptic> haptic) => DllImport.PauseHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PeepEvents(
        Event* events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) =>
        (
            (delegate* unmanaged<Event*, int, EventAction, uint, uint, int>)
                nativeContext.LoadFunction("PeepEvents", "SDL3")
        )(events, numevents, action, minType, maxType);

    [NativeFunction("SDL3", EntryPoint = "PeepEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PeepEvents(
        Event* events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.PeepEvents(events, numevents, action, minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PeepEvents(
        Ref<Event> events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    )
    {
        fixed (Event* __dsl_events = events)
        {
            return (int)((ISdl)this).PeepEvents(__dsl_events, numevents, action, minType, maxType);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PeepEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PeepEvents(
        Ref<Event> events,
        int numevents,
        EventAction action,
        [NativeTypeName("Uint32")] uint minType,
        [NativeTypeName("Uint32")] uint maxType
    ) => DllImport.PeepEvents(events, numevents, action, minType, maxType);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.PenConnected([NativeTypeName("SDL_PenID")] uint instance_id) =>
        (MaybeBool<int>)(int)((ISdl)this).PenConnectedRaw(instance_id);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> PenConnected([NativeTypeName("SDL_PenID")] uint instance_id) =>
        DllImport.PenConnected(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PenConnectedRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("SDL_PenConnected", "SDL3"))(
            instance_id
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_PenConnected")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PenConnectedRaw([NativeTypeName("SDL_PenID")] uint instance_id) =>
        DllImport.PenConnectedRaw(instance_id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PlayHapticRumble(
        SDL_Haptic* haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) =>
        (
            (delegate* unmanaged<SDL_Haptic*, float, uint, int>)
                nativeContext.LoadFunction("PlayHapticRumble", "SDL3")
        )(haptic, strength, length);

    [NativeFunction("SDL3", EntryPoint = "PlayHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PlayHapticRumble(
        SDL_Haptic* haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) => DllImport.PlayHapticRumble(haptic, strength, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PlayHapticRumble(
        Ref<SDL_Haptic> haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    )
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).PlayHapticRumble(__dsl_haptic, strength, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PlayHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PlayHapticRumble(
        Ref<SDL_Haptic> haptic,
        float strength,
        [NativeTypeName("Uint32")] uint length
    ) => DllImport.PlayHapticRumble(haptic, strength, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PollEvent(Event* @event) =>
        ((delegate* unmanaged<Event*, int>)nativeContext.LoadFunction("PollEvent", "SDL3"))(@event);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "PollEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PollEvent(Event* @event) => DllImport.PollEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.PollEvent(Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<int>)(int)((ISdl)this).PollEvent(__dsl_event);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PollEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> PollEvent(Ref<Event> @event) => DllImport.PollEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PostSemaphore(SDL_Semaphore* sem) =>
        (
            (delegate* unmanaged<SDL_Semaphore*, int>)
                nativeContext.LoadFunction("PostSemaphore", "SDL3")
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "PostSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PostSemaphore(SDL_Semaphore* sem) => DllImport.PostSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PostSemaphore(Ref<SDL_Semaphore> sem)
    {
        fixed (SDL_Semaphore* __dsl_sem = sem)
        {
            return (int)((ISdl)this).PostSemaphore(__dsl_sem);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PostSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PostSemaphore(Ref<SDL_Semaphore> sem) => DllImport.PostSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PremultiplyAlpha(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormatEnum dst_format,
        void* dst,
        int dst_pitch
    ) =>
        (
            (delegate* unmanaged<
                int,
                int,
                PixelFormatEnum,
                void*,
                int,
                PixelFormatEnum,
                void*,
                int,
                int>)
                nativeContext.LoadFunction("PremultiplyAlpha", "SDL3")
        )(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);

    [NativeFunction("SDL3", EntryPoint = "PremultiplyAlpha")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PremultiplyAlpha(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] void* src,
        int src_pitch,
        PixelFormatEnum dst_format,
        void* dst,
        int dst_pitch
    ) =>
        DllImport.PremultiplyAlpha(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PremultiplyAlpha(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Ref dst,
        int dst_pitch
    )
    {
        fixed (void* __dsl_dst = dst)
        fixed (void* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).PremultiplyAlpha(
                    width,
                    height,
                    src_format,
                    __dsl_src,
                    src_pitch,
                    dst_format,
                    __dsl_dst,
                    dst_pitch
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PremultiplyAlpha")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PremultiplyAlpha(
        int width,
        int height,
        PixelFormatEnum src_format,
        [NativeTypeName("const void *")] Ref src,
        int src_pitch,
        PixelFormatEnum dst_format,
        Ref dst,
        int dst_pitch
    ) =>
        DllImport.PremultiplyAlpha(
            width,
            height,
            src_format,
            src,
            src_pitch,
            dst_format,
            dst,
            dst_pitch
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.PumpEvents() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("PumpEvents", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "PumpEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void PumpEvents() => DllImport.PumpEvents();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PushEvent(Event* @event) =>
        ((delegate* unmanaged<Event*, int>)nativeContext.LoadFunction("PushEvent", "SDL3"))(@event);

    [NativeFunction("SDL3", EntryPoint = "PushEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PushEvent(Event* @event) => DllImport.PushEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PushEvent(Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (int)((ISdl)this).PushEvent(__dsl_event);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PushEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PushEvent(Ref<Event> @event) => DllImport.PushEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PutAudioStreamData(
        SDL_AudioStream* stream,
        [NativeTypeName("const void *")] void* buf,
        int len
    ) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, void*, int, int>)
                nativeContext.LoadFunction("PutAudioStreamData", "SDL3")
        )(stream, buf, len);

    [NativeFunction("SDL3", EntryPoint = "PutAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PutAudioStreamData(
        SDL_AudioStream* stream,
        [NativeTypeName("const void *")] void* buf,
        int len
    ) => DllImport.PutAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.PutAudioStreamData(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("const void *")] Ref buf,
        int len
    )
    {
        fixed (void* __dsl_buf = buf)
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).PutAudioStreamData(__dsl_stream, __dsl_buf, len);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_PutAudioStreamData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int PutAudioStreamData(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("const void *")] Ref buf,
        int len
    ) => DllImport.PutAudioStreamData(stream, buf, len);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.QueryTexture(
        SDL_Texture* texture,
        PixelFormatEnum* format,
        int* access,
        int* w,
        int* h
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, PixelFormatEnum*, int*, int*, int*, int>)
                nativeContext.LoadFunction("QueryTexture", "SDL3")
        )(texture, format, access, w, h);

    [NativeFunction("SDL3", EntryPoint = "QueryTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int QueryTexture(
        SDL_Texture* texture,
        PixelFormatEnum* format,
        int* access,
        int* w,
        int* h
    ) => DllImport.QueryTexture(texture, format, access, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.QueryTexture(
        Ref<SDL_Texture> texture,
        Ref<PixelFormatEnum> format,
        Ref<int> access,
        Ref<int> w,
        Ref<int> h
    )
    {
        fixed (int* __dsl_h = h)
        fixed (int* __dsl_w = w)
        fixed (int* __dsl_access = access)
        fixed (PixelFormatEnum* __dsl_format = format)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)
                ((ISdl)this).QueryTexture(
                    __dsl_texture,
                    __dsl_format,
                    __dsl_access,
                    __dsl_w,
                    __dsl_h
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_QueryTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int QueryTexture(
        Ref<SDL_Texture> texture,
        Ref<PixelFormatEnum> format,
        Ref<int> access,
        Ref<int> w,
        Ref<int> h
    ) => DllImport.QueryTexture(texture, format, access, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.Quit() => ((delegate* unmanaged<void>)nativeContext.LoadFunction("Quit", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "Quit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void Quit() => DllImport.Quit();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.QuitSubSystem([NativeTypeName("Uint32")] uint flags) =>
        ((delegate* unmanaged<uint, void>)nativeContext.LoadFunction("QuitSubSystem", "SDL3"))(
            flags
        );

    [NativeFunction("SDL3", EntryPoint = "QuitSubSystem")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void QuitSubSystem([NativeTypeName("Uint32")] uint flags) =>
        DllImport.QuitSubSystem(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RaiseWindow(SDL_Window* window) =>
        ((delegate* unmanaged<SDL_Window*, int>)nativeContext.LoadFunction("RaiseWindow", "SDL3"))(
            window
        );

    [NativeFunction("SDL3", EntryPoint = "RaiseWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RaiseWindow(SDL_Window* window) => DllImport.RaiseWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RaiseWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).RaiseWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RaiseWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RaiseWindow(Ref<SDL_Window> window) => DllImport.RaiseWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.ReadIO(SDL_IOStream* context, void* ptr, [NativeTypeName("size_t")] nuint size) =>
        (
            (delegate* unmanaged<SDL_IOStream*, void*, nuint, nuint>)
                nativeContext.LoadFunction("ReadIO", "SDL3")
        )(context, ptr, size);

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "ReadIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint ReadIO(
        SDL_IOStream* context,
        void* ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.ReadIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.ReadIO(Ref<SDL_IOStream> context, Ref ptr, [NativeTypeName("size_t")] nuint size)
    {
        fixed (void* __dsl_ptr = ptr)
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (nuint)((ISdl)this).ReadIO(__dsl_context, __dsl_ptr, size);
        }
    }

    [return: NativeTypeName("size_t")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint ReadIO(
        Ref<SDL_IOStream> context,
        Ref ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.ReadIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadS16BE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, short*, int>)
                nativeContext.LoadFunction("ReadS16BE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadS16BE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
        DllImport.ReadS16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadS16BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    )
    {
        fixed (short* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadS16BE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadS16BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    ) => DllImport.ReadS16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadS16LE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, short*, int>)
                nativeContext.LoadFunction("ReadS16LE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadS16LE(SDL_IOStream* src, [NativeTypeName("Sint16 *")] short* value) =>
        DllImport.ReadS16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadS16LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    )
    {
        fixed (short* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadS16LE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadS16LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint16 *")] Ref<short> value
    ) => DllImport.ReadS16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadS32BE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int*, int>)
                nativeContext.LoadFunction("ReadS32BE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadS32BE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
        DllImport.ReadS32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadS32BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint32 *")] Ref<int> value
    )
    {
        fixed (int* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadS32BE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadS32BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint32 *")] Ref<int> value
    ) => DllImport.ReadS32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadS32LE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int*, int>)
                nativeContext.LoadFunction("ReadS32LE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadS32LE(SDL_IOStream* src, [NativeTypeName("Sint32 *")] int* value) =>
        DllImport.ReadS32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadS32LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint32 *")] Ref<int> value
    )
    {
        fixed (int* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadS32LE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadS32LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint32 *")] Ref<int> value
    ) => DllImport.ReadS32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadS64BE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, long*, int>)
                nativeContext.LoadFunction("ReadS64BE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadS64BE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
        DllImport.ReadS64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadS64BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint64 *")] Ref<long> value
    )
    {
        fixed (long* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadS64BE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadS64BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint64 *")] Ref<long> value
    ) => DllImport.ReadS64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadS64LE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, long*, int>)
                nativeContext.LoadFunction("ReadS64LE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadS64LE(SDL_IOStream* src, [NativeTypeName("Sint64 *")] long* value) =>
        DllImport.ReadS64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadS64LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint64 *")] Ref<long> value
    )
    {
        fixed (long* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadS64LE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadS64LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Sint64 *")] Ref<long> value
    ) => DllImport.ReadS64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadStorageFile(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        void* destination,
        [NativeTypeName("Uint64")] ulong length
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, void*, ulong, int>)
                nativeContext.LoadFunction("ReadStorageFile", "SDL3")
        )(storage, path, destination, length);

    [NativeFunction("SDL3", EntryPoint = "ReadStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadStorageFile(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        void* destination,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.ReadStorageFile(storage, path, destination, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadStorageFile(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref destination,
        [NativeTypeName("Uint64")] ulong length
    )
    {
        fixed (void* __dsl_destination = destination)
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)
                ((ISdl)this).ReadStorageFile(__dsl_storage, __dsl_path, __dsl_destination, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadStorageFile(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        Ref destination,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.ReadStorageFile(storage, path, destination, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadSurfacePixel(
        Surface* surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) =>
        (
            (delegate* unmanaged<Surface*, int, int, byte*, byte*, byte*, byte*, int>)
                nativeContext.LoadFunction("ReadSurfacePixel", "SDL3")
        )(surface, x, y, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "ReadSurfacePixel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadSurfacePixel(
        Surface* surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] byte* r,
        [NativeTypeName("Uint8 *")] byte* g,
        [NativeTypeName("Uint8 *")] byte* b,
        [NativeTypeName("Uint8 *")] byte* a
    ) => DllImport.ReadSurfacePixel(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadSurfacePixel(
        Ref<Surface> surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    )
    {
        fixed (byte* __dsl_a = a)
        fixed (byte* __dsl_b = b)
        fixed (byte* __dsl_g = g)
        fixed (byte* __dsl_r = r)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)
                ((ISdl)this).ReadSurfacePixel(
                    __dsl_surface,
                    x,
                    y,
                    __dsl_r,
                    __dsl_g,
                    __dsl_b,
                    __dsl_a
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadSurfacePixel")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadSurfacePixel(
        Ref<Surface> surface,
        int x,
        int y,
        [NativeTypeName("Uint8 *")] Ref<byte> r,
        [NativeTypeName("Uint8 *")] Ref<byte> g,
        [NativeTypeName("Uint8 *")] Ref<byte> b,
        [NativeTypeName("Uint8 *")] Ref<byte> a
    ) => DllImport.ReadSurfacePixel(surface, x, y, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU16BE(SDL_IOStream* src, [NativeTypeName("Uint16 *")] ushort* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ushort*, int>)
                nativeContext.LoadFunction("ReadU16BE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU16BE(SDL_IOStream* src, [NativeTypeName("Uint16 *")] ushort* value) =>
        DllImport.ReadU16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU16BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    )
    {
        fixed (ushort* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU16BE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU16BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    ) => DllImport.ReadU16BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU16LE(SDL_IOStream* src, [NativeTypeName("Uint16 *")] ushort* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ushort*, int>)
                nativeContext.LoadFunction("ReadU16LE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU16LE(SDL_IOStream* src, [NativeTypeName("Uint16 *")] ushort* value) =>
        DllImport.ReadU16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU16LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    )
    {
        fixed (ushort* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU16LE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU16LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint16 *")] Ref<ushort> value
    ) => DllImport.ReadU16LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU32BE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, uint*, int>)
                nativeContext.LoadFunction("ReadU32BE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU32BE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
        DllImport.ReadU32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU32BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint32 *")] Ref<uint> value
    )
    {
        fixed (uint* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU32BE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU32BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint32 *")] Ref<uint> value
    ) => DllImport.ReadU32BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU32LE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, uint*, int>)
                nativeContext.LoadFunction("ReadU32LE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU32LE(SDL_IOStream* src, [NativeTypeName("Uint32 *")] uint* value) =>
        DllImport.ReadU32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU32LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint32 *")] Ref<uint> value
    )
    {
        fixed (uint* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU32LE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU32LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint32 *")] Ref<uint> value
    ) => DllImport.ReadU32LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU64BE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ulong*, int>)
                nativeContext.LoadFunction("ReadU64BE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU64BE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
        DllImport.ReadU64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU64BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    )
    {
        fixed (ulong* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU64BE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU64BE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    ) => DllImport.ReadU64BE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU64LE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ulong*, int>)
                nativeContext.LoadFunction("ReadU64LE", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU64LE(SDL_IOStream* src, [NativeTypeName("Uint64 *")] ulong* value) =>
        DllImport.ReadU64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU64LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    )
    {
        fixed (ulong* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU64LE(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU64LE(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint64 *")] Ref<ulong> value
    ) => DllImport.ReadU64LE(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReadU8(SDL_IOStream* src, [NativeTypeName("Uint8 *")] byte* value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, byte*, int>)
                nativeContext.LoadFunction("ReadU8", "SDL3")
        )(src, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ReadU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReadU8(SDL_IOStream* src, [NativeTypeName("Uint8 *")] byte* value) =>
        DllImport.ReadU8(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ReadU8(Ref<SDL_IOStream> src, [NativeTypeName("Uint8 *")] Ref<byte> value)
    {
        fixed (byte* __dsl_value = value)
        fixed (SDL_IOStream* __dsl_src = src)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ReadU8(__dsl_src, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReadU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ReadU8(
        Ref<SDL_IOStream> src,
        [NativeTypeName("Uint8 *")] Ref<byte> value
    ) => DllImport.ReadU8(src, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.RegisterEvents(int numevents) =>
        ((delegate* unmanaged<int, uint>)nativeContext.LoadFunction("RegisterEvents", "SDL3"))(
            numevents
        );

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "RegisterEvents")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint RegisterEvents(int numevents) => DllImport.RegisterEvents(numevents);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReleaseCameraFrame(SDL_Camera* camera, Surface* frame) =>
        (
            (delegate* unmanaged<SDL_Camera*, Surface*, int>)
                nativeContext.LoadFunction("ReleaseCameraFrame", "SDL3")
        )(camera, frame);

    [NativeFunction("SDL3", EntryPoint = "ReleaseCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReleaseCameraFrame(SDL_Camera* camera, Surface* frame) =>
        DllImport.ReleaseCameraFrame(camera, frame);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReleaseCameraFrame(Ref<SDL_Camera> camera, Ref<Surface> frame)
    {
        fixed (Surface* __dsl_frame = frame)
        fixed (SDL_Camera* __dsl_camera = camera)
        {
            return (int)((ISdl)this).ReleaseCameraFrame(__dsl_camera, __dsl_frame);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReleaseCameraFrame")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReleaseCameraFrame(Ref<SDL_Camera> camera, Ref<Surface> frame) =>
        DllImport.ReleaseCameraFrame(camera, frame);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ReloadGamepadMappings() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("ReloadGamepadMappings", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ReloadGamepadMappings")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ReloadGamepadMappings() => DllImport.ReloadGamepadMappings();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RemovePath([NativeTypeName("const char *")] sbyte* path) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("RemovePath", "SDL3"))(path);

    [NativeFunction("SDL3", EntryPoint = "RemovePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RemovePath([NativeTypeName("const char *")] sbyte* path) =>
        DllImport.RemovePath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RemovePath([NativeTypeName("const char *")] Ref<sbyte> path)
    {
        fixed (sbyte* __dsl_path = path)
        {
            return (int)((ISdl)this).RemovePath(__dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemovePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RemovePath([NativeTypeName("const char *")] Ref<sbyte> path) =>
        DllImport.RemovePath(path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RemoveStoragePath(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, int>)
                nativeContext.LoadFunction("RemoveStoragePath", "SDL3")
        )(storage, path);

    [NativeFunction("SDL3", EntryPoint = "RemoveStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RemoveStoragePath(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path
    ) => DllImport.RemoveStoragePath(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RemoveStoragePath(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    )
    {
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)((ISdl)this).RemoveStoragePath(__dsl_storage, __dsl_path);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RemoveStoragePath(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path
    ) => DllImport.RemoveStoragePath(storage, path);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
        (MaybeBool<int>)(int)((ISdl)this).RemoveTimerRaw(id);

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RemoveTimer([NativeTypeName("SDL_TimerID")] uint id) =>
        DllImport.RemoveTimer(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("SDL_RemoveTimer", "SDL3"))(id);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_RemoveTimer")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RemoveTimerRaw([NativeTypeName("SDL_TimerID")] uint id) =>
        DllImport.RemoveTimerRaw(id);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenamePath(
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, int>)
                nativeContext.LoadFunction("RenamePath", "SDL3")
        )(oldpath, newpath);

    [NativeFunction("SDL3", EntryPoint = "RenamePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenamePath(
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) => DllImport.RenamePath(oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenamePath(
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    )
    {
        fixed (sbyte* __dsl_newpath = newpath)
        fixed (sbyte* __dsl_oldpath = oldpath)
        {
            return (int)((ISdl)this).RenamePath(__dsl_oldpath, __dsl_newpath);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenamePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenamePath(
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    ) => DllImport.RenamePath(oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenameStoragePath(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, sbyte*, int>)
                nativeContext.LoadFunction("RenameStoragePath", "SDL3")
        )(storage, oldpath, newpath);

    [NativeFunction("SDL3", EntryPoint = "RenameStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenameStoragePath(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* oldpath,
        [NativeTypeName("const char *")] sbyte* newpath
    ) => DllImport.RenameStoragePath(storage, oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenameStoragePath(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    )
    {
        fixed (sbyte* __dsl_newpath = newpath)
        fixed (sbyte* __dsl_oldpath = oldpath)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)((ISdl)this).RenameStoragePath(__dsl_storage, __dsl_oldpath, __dsl_newpath);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenameStoragePath")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenameStoragePath(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> oldpath,
        [NativeTypeName("const char *")] Ref<sbyte> newpath
    ) => DllImport.RenameStoragePath(storage, oldpath, newpath);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderClear(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int>)
                nativeContext.LoadFunction("RenderClear", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "RenderClear")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderClear(SDL_Renderer* renderer) => DllImport.RenderClear(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderClear(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderClear(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderClear")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderClear(Ref<SDL_Renderer> renderer) => DllImport.RenderClear(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderClipEnabled(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int>)
                nativeContext.LoadFunction("RenderClipEnabled", "SDL3")
        )(renderer);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "RenderClipEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderClipEnabled(SDL_Renderer* renderer) =>
        DllImport.RenderClipEnabled(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.RenderClipEnabled(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (MaybeBool<int>)(int)((ISdl)this).RenderClipEnabled(__dsl_renderer);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderClipEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RenderClipEnabled(Ref<SDL_Renderer> renderer) =>
        DllImport.RenderClipEnabled(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderCoordinatesFromWindow(
        SDL_Renderer* renderer,
        float window_x,
        float window_y,
        float* x,
        float* y
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, float, float*, float*, int>)
                nativeContext.LoadFunction("RenderCoordinatesFromWindow", "SDL3")
        )(renderer, window_x, window_y, x, y);

    [NativeFunction("SDL3", EntryPoint = "RenderCoordinatesFromWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderCoordinatesFromWindow(
        SDL_Renderer* renderer,
        float window_x,
        float window_y,
        float* x,
        float* y
    ) => DllImport.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderCoordinatesFromWindow(
        Ref<SDL_Renderer> renderer,
        float window_x,
        float window_y,
        Ref<float> x,
        Ref<float> y
    )
    {
        fixed (float* __dsl_y = y)
        fixed (float* __dsl_x = x)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderCoordinatesFromWindow(
                    __dsl_renderer,
                    window_x,
                    window_y,
                    __dsl_x,
                    __dsl_y
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesFromWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderCoordinatesFromWindow(
        Ref<SDL_Renderer> renderer,
        float window_x,
        float window_y,
        Ref<float> x,
        Ref<float> y
    ) => DllImport.RenderCoordinatesFromWindow(renderer, window_x, window_y, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderCoordinatesToWindow(
        SDL_Renderer* renderer,
        float x,
        float y,
        float* window_x,
        float* window_y
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, float, float*, float*, int>)
                nativeContext.LoadFunction("RenderCoordinatesToWindow", "SDL3")
        )(renderer, x, y, window_x, window_y);

    [NativeFunction("SDL3", EntryPoint = "RenderCoordinatesToWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderCoordinatesToWindow(
        SDL_Renderer* renderer,
        float x,
        float y,
        float* window_x,
        float* window_y
    ) => DllImport.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderCoordinatesToWindow(
        Ref<SDL_Renderer> renderer,
        float x,
        float y,
        Ref<float> window_x,
        Ref<float> window_y
    )
    {
        fixed (float* __dsl_window_y = window_y)
        fixed (float* __dsl_window_x = window_x)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderCoordinatesToWindow(
                    __dsl_renderer,
                    x,
                    y,
                    __dsl_window_x,
                    __dsl_window_y
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderCoordinatesToWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderCoordinatesToWindow(
        Ref<SDL_Renderer> renderer,
        float x,
        float y,
        Ref<float> window_x,
        Ref<float> window_y
    ) => DllImport.RenderCoordinatesToWindow(renderer, x, y, window_x, window_y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderFillRect(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, FRect*, int>)
                nativeContext.LoadFunction("RenderFillRect", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "RenderFillRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderFillRect(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) => DllImport.RenderFillRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderFillRect(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    )
    {
        fixed (FRect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderFillRect(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderFillRect(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    ) => DllImport.RenderFillRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderFillRects(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, FRect*, int, int>)
                nativeContext.LoadFunction("RenderFillRects", "SDL3")
        )(renderer, rects, count);

    [NativeFunction("SDL3", EntryPoint = "RenderFillRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderFillRects(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) => DllImport.RenderFillRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderFillRects(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    )
    {
        fixed (FRect* __dsl_rects = rects)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderFillRects(__dsl_renderer, __dsl_rects, count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderFillRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderFillRects(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    ) => DllImport.RenderFillRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderGeometry(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
        int num_vertices,
        [NativeTypeName("const int *")] int* indices,
        int num_indices
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, SDL_Texture*, Vertex*, int, int*, int, int>)
                nativeContext.LoadFunction("RenderGeometry", "SDL3")
        )(renderer, texture, vertices, num_vertices, indices, num_indices);

    [NativeFunction("SDL3", EntryPoint = "RenderGeometry")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderGeometry(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Vertex *")] Vertex* vertices,
        int num_vertices,
        [NativeTypeName("const int *")] int* indices,
        int num_indices
    ) => DllImport.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderGeometry(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
        int num_vertices,
        [NativeTypeName("const int *")] Ref<int> indices,
        int num_indices
    )
    {
        fixed (int* __dsl_indices = indices)
        fixed (Vertex* __dsl_vertices = vertices)
        fixed (SDL_Texture* __dsl_texture = texture)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderGeometry(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_vertices,
                    num_vertices,
                    __dsl_indices,
                    num_indices
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometry")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderGeometry(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Vertex *")] Ref<Vertex> vertices,
        int num_vertices,
        [NativeTypeName("const int *")] Ref<int> indices,
        int num_indices
    ) => DllImport.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderGeometryRaw(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const float *")] float* xy,
        int xy_stride,
        [NativeTypeName("const SDL_Color *")] Color* color,
        int color_stride,
        [NativeTypeName("const float *")] float* uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] void* indices,
        int num_indices,
        int size_indices
    ) =>
        (
            (delegate* unmanaged<
                SDL_Renderer*,
                SDL_Texture*,
                float*,
                int,
                Color*,
                int,
                float*,
                int,
                int,
                void*,
                int,
                int,
                int>)
                nativeContext.LoadFunction("RenderGeometryRaw", "SDL3")
        )(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [NativeFunction("SDL3", EntryPoint = "RenderGeometryRaw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderGeometryRaw(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const float *")] float* xy,
        int xy_stride,
        [NativeTypeName("const SDL_Color *")] Color* color,
        int color_stride,
        [NativeTypeName("const float *")] float* uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] void* indices,
        int num_indices,
        int size_indices
    ) =>
        DllImport.RenderGeometryRaw(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderGeometryRaw(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const float *")] Ref<float> xy,
        int xy_stride,
        [NativeTypeName("const SDL_Color *")] Ref<Color> color,
        int color_stride,
        [NativeTypeName("const float *")] Ref<float> uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] Ref indices,
        int num_indices,
        int size_indices
    )
    {
        fixed (void* __dsl_indices = indices)
        fixed (float* __dsl_uv = uv)
        fixed (Color* __dsl_color = color)
        fixed (float* __dsl_xy = xy)
        fixed (SDL_Texture* __dsl_texture = texture)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderGeometryRaw(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_xy,
                    xy_stride,
                    __dsl_color,
                    color_stride,
                    __dsl_uv,
                    uv_stride,
                    num_vertices,
                    __dsl_indices,
                    num_indices,
                    size_indices
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRaw")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderGeometryRaw(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const float *")] Ref<float> xy,
        int xy_stride,
        [NativeTypeName("const SDL_Color *")] Ref<Color> color,
        int color_stride,
        [NativeTypeName("const float *")] Ref<float> uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] Ref indices,
        int num_indices,
        int size_indices
    ) =>
        DllImport.RenderGeometryRaw(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderGeometryRawFloat(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const float *")] float* xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] FColor* color,
        int color_stride,
        [NativeTypeName("const float *")] float* uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] void* indices,
        int num_indices,
        int size_indices
    ) =>
        (
            (delegate* unmanaged<
                SDL_Renderer*,
                SDL_Texture*,
                float*,
                int,
                FColor*,
                int,
                float*,
                int,
                int,
                void*,
                int,
                int,
                int>)
                nativeContext.LoadFunction("RenderGeometryRawFloat", "SDL3")
        )(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [NativeFunction("SDL3", EntryPoint = "RenderGeometryRawFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderGeometryRawFloat(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const float *")] float* xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] FColor* color,
        int color_stride,
        [NativeTypeName("const float *")] float* uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] void* indices,
        int num_indices,
        int size_indices
    ) =>
        DllImport.RenderGeometryRawFloat(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderGeometryRawFloat(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const float *")] Ref<float> xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
        int color_stride,
        [NativeTypeName("const float *")] Ref<float> uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] Ref indices,
        int num_indices,
        int size_indices
    )
    {
        fixed (void* __dsl_indices = indices)
        fixed (float* __dsl_uv = uv)
        fixed (FColor* __dsl_color = color)
        fixed (float* __dsl_xy = xy)
        fixed (SDL_Texture* __dsl_texture = texture)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderGeometryRawFloat(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_xy,
                    xy_stride,
                    __dsl_color,
                    color_stride,
                    __dsl_uv,
                    uv_stride,
                    num_vertices,
                    __dsl_indices,
                    num_indices,
                    size_indices
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderGeometryRawFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderGeometryRawFloat(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const float *")] Ref<float> xy,
        int xy_stride,
        [NativeTypeName("const SDL_FColor *")] Ref<FColor> color,
        int color_stride,
        [NativeTypeName("const float *")] Ref<float> uv,
        int uv_stride,
        int num_vertices,
        [NativeTypeName("const void *")] Ref indices,
        int num_indices,
        int size_indices
    ) =>
        DllImport.RenderGeometryRawFloat(
            renderer,
            texture,
            xy,
            xy_stride,
            color,
            color_stride,
            uv,
            uv_stride,
            num_vertices,
            indices,
            num_indices,
            size_indices
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, float, float, float, int>)
                nativeContext.LoadFunction("RenderLine", "SDL3")
        )(renderer, x1, y1, x2, y2);

    [NativeFunction("SDL3", EntryPoint = "RenderLine")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2) =>
        DllImport.RenderLine(renderer, x1, y1, x2, y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderLine(Ref<SDL_Renderer> renderer, float x1, float y1, float x2, float y2)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderLine(__dsl_renderer, x1, y1, x2, y2);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderLine")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderLine(
        Ref<SDL_Renderer> renderer,
        float x1,
        float y1,
        float x2,
        float y2
    ) => DllImport.RenderLine(renderer, x1, y1, x2, y2);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderLines(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, FPoint*, int, int>)
                nativeContext.LoadFunction("RenderLines", "SDL3")
        )(renderer, points, count);

    [NativeFunction("SDL3", EntryPoint = "RenderLines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderLines(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) => DllImport.RenderLines(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderLines(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    )
    {
        fixed (FPoint* __dsl_points = points)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderLines(__dsl_renderer, __dsl_points, count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderLines")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderLines(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    ) => DllImport.RenderLines(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderPoint(SDL_Renderer* renderer, float x, float y) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, float, int>)
                nativeContext.LoadFunction("RenderPoint", "SDL3")
        )(renderer, x, y);

    [NativeFunction("SDL3", EntryPoint = "RenderPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderPoint(SDL_Renderer* renderer, float x, float y) =>
        DllImport.RenderPoint(renderer, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderPoint(Ref<SDL_Renderer> renderer, float x, float y)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderPoint(__dsl_renderer, x, y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderPoint(Ref<SDL_Renderer> renderer, float x, float y) =>
        DllImport.RenderPoint(renderer, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderPoints(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, FPoint*, int, int>)
                nativeContext.LoadFunction("RenderPoints", "SDL3")
        )(renderer, points, count);

    [NativeFunction("SDL3", EntryPoint = "RenderPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderPoints(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FPoint *")] FPoint* points,
        int count
    ) => DllImport.RenderPoints(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderPoints(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    )
    {
        fixed (FPoint* __dsl_points = points)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderPoints(__dsl_renderer, __dsl_points, count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPoints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderPoints(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> points,
        int count
    ) => DllImport.RenderPoints(renderer, points, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderPresent(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int>)
                nativeContext.LoadFunction("RenderPresent", "SDL3")
        )(renderer);

    [NativeFunction("SDL3", EntryPoint = "RenderPresent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderPresent(SDL_Renderer* renderer) => DllImport.RenderPresent(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderPresent(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderPresent(__dsl_renderer);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderPresent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderPresent(Ref<SDL_Renderer> renderer) =>
        DllImport.RenderPresent(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Surface* ISdl.RenderReadPixels(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Rect*, Surface*>)
                nativeContext.LoadFunction("RenderReadPixels", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "RenderReadPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Surface* RenderReadPixels(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.RenderReadPixels(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    Ptr<Surface> ISdl.RenderReadPixels(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (Surface*)((ISdl)this).RenderReadPixels(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderReadPixels")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static Ptr<Surface> RenderReadPixels(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.RenderReadPixels(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderRect(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, FRect*, int>)
                nativeContext.LoadFunction("RenderRect", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "RenderRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderRect(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rect
    ) => DllImport.RenderRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderRect(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    )
    {
        fixed (FRect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderRect(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderRect(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rect
    ) => DllImport.RenderRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderRects(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, FRect*, int, int>)
                nativeContext.LoadFunction("RenderRects", "SDL3")
        )(renderer, rects, count);

    [NativeFunction("SDL3", EntryPoint = "RenderRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderRects(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_FRect *")] FRect* rects,
        int count
    ) => DllImport.RenderRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderRects(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    )
    {
        fixed (FRect* __dsl_rects = rects)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).RenderRects(__dsl_renderer, __dsl_rects, count);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderRects(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> rects,
        int count
    ) => DllImport.RenderRects(renderer, rects, count);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderTexture(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, SDL_Texture*, FRect*, FRect*, int>)
                nativeContext.LoadFunction("RenderTexture", "SDL3")
        )(renderer, texture, srcrect, dstrect);

    [NativeFunction("SDL3", EntryPoint = "RenderTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderTexture(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect
    ) => DllImport.RenderTexture(renderer, texture, srcrect, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderTexture(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    )
    {
        fixed (FRect* __dsl_dstrect = dstrect)
        fixed (FRect* __dsl_srcrect = srcrect)
        fixed (SDL_Texture* __dsl_texture = texture)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderTexture(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_srcrect,
                    __dsl_dstrect
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderTexture(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect
    ) => DllImport.RenderTexture(renderer, texture, srcrect, dstrect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderTextureRotated(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
        [NativeTypeName("const double")] double angle,
        [NativeTypeName("const SDL_FPoint *")] FPoint* center,
        [NativeTypeName("const SDL_FlipMode")] FlipMode flip
    ) =>
        (
            (delegate* unmanaged<
                SDL_Renderer*,
                SDL_Texture*,
                FRect*,
                FRect*,
                double,
                FPoint*,
                FlipMode,
                int>)
                nativeContext.LoadFunction("RenderTextureRotated", "SDL3")
        )(renderer, texture, srcrect, dstrect, angle, center, flip);

    [NativeFunction("SDL3", EntryPoint = "RenderTextureRotated")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderTextureRotated(
        SDL_Renderer* renderer,
        SDL_Texture* texture,
        [NativeTypeName("const SDL_FRect *")] FRect* srcrect,
        [NativeTypeName("const SDL_FRect *")] FRect* dstrect,
        [NativeTypeName("const double")] double angle,
        [NativeTypeName("const SDL_FPoint *")] FPoint* center,
        [NativeTypeName("const SDL_FlipMode")] FlipMode flip
    ) => DllImport.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderTextureRotated(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
        [NativeTypeName("const double")] double angle,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
        [NativeTypeName("const SDL_FlipMode")] FlipMode flip
    )
    {
        fixed (FPoint* __dsl_center = center)
        fixed (FRect* __dsl_dstrect = dstrect)
        fixed (FRect* __dsl_srcrect = srcrect)
        fixed (SDL_Texture* __dsl_texture = texture)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).RenderTextureRotated(
                    __dsl_renderer,
                    __dsl_texture,
                    __dsl_srcrect,
                    __dsl_dstrect,
                    angle,
                    __dsl_center,
                    flip
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderTextureRotated")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderTextureRotated(
        Ref<SDL_Renderer> renderer,
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> srcrect,
        [NativeTypeName("const SDL_FRect *")] Ref<FRect> dstrect,
        [NativeTypeName("const double")] double angle,
        [NativeTypeName("const SDL_FPoint *")] Ref<FPoint> center,
        [NativeTypeName("const SDL_FlipMode")] FlipMode flip
    ) => DllImport.RenderTextureRotated(renderer, texture, srcrect, dstrect, angle, center, flip);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RenderViewportSet(SDL_Renderer* renderer) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int>)
                nativeContext.LoadFunction("RenderViewportSet", "SDL3")
        )(renderer);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "RenderViewportSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RenderViewportSet(SDL_Renderer* renderer) =>
        DllImport.RenderViewportSet(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.RenderViewportSet(Ref<SDL_Renderer> renderer)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (MaybeBool<int>)(int)((ISdl)this).RenderViewportSet(__dsl_renderer);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RenderViewportSet")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> RenderViewportSet(Ref<SDL_Renderer> renderer) =>
        DllImport.RenderViewportSet(renderer);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertState ISdl.ReportAssertion(
        AssertData* data,
        [NativeTypeName("const char *")] sbyte* func,
        [NativeTypeName("const char *")] sbyte* file,
        int line
    ) =>
        (
            (delegate* unmanaged<AssertData*, sbyte*, sbyte*, int, AssertState>)
                nativeContext.LoadFunction("ReportAssertion", "SDL3")
        )(data, func, file, line);

    [NativeFunction("SDL3", EntryPoint = "ReportAssertion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertState ReportAssertion(
        AssertData* data,
        [NativeTypeName("const char *")] sbyte* func,
        [NativeTypeName("const char *")] sbyte* file,
        int line
    ) => DllImport.ReportAssertion(data, func, file, line);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    AssertState ISdl.ReportAssertion(
        Ref<AssertData> data,
        [NativeTypeName("const char *")] Ref<sbyte> func,
        [NativeTypeName("const char *")] Ref<sbyte> file,
        int line
    )
    {
        fixed (sbyte* __dsl_file = file)
        fixed (sbyte* __dsl_func = func)
        fixed (AssertData* __dsl_data = data)
        {
            return (AssertState)
                ((ISdl)this).ReportAssertion(__dsl_data, __dsl_func, __dsl_file, line);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ReportAssertion")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static AssertState ReportAssertion(
        Ref<AssertData> data,
        [NativeTypeName("const char *")] Ref<sbyte> func,
        [NativeTypeName("const char *")] Ref<sbyte> file,
        int line
    ) => DllImport.ReportAssertion(data, func, file, line);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetAssertionReport() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("ResetAssertionReport", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ResetAssertionReport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetAssertionReport() => DllImport.ResetAssertionReport();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ResetHint([NativeTypeName("const char *")] sbyte* name) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("ResetHint", "SDL3"))(name);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ResetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ResetHint([NativeTypeName("const char *")] sbyte* name) =>
        DllImport.ResetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ResetHint([NativeTypeName("const char *")] Ref<sbyte> name)
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ResetHint(__dsl_name);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ResetHint([NativeTypeName("const char *")] Ref<sbyte> name) =>
        DllImport.ResetHint(name);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetHints() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("ResetHints", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ResetHints")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetHints() => DllImport.ResetHints();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ResetKeyboard() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("ResetKeyboard", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ResetKeyboard")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ResetKeyboard() => DllImport.ResetKeyboard();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RestoreWindow(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("RestoreWindow", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "RestoreWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RestoreWindow(SDL_Window* window) => DllImport.RestoreWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RestoreWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).RestoreWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RestoreWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RestoreWindow(Ref<SDL_Window> window) => DllImport.RestoreWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        ((delegate* unmanaged<uint, int>)nativeContext.LoadFunction("ResumeAudioDevice", "SDL3"))(
            dev
        );

    [NativeFunction("SDL3", EntryPoint = "ResumeAudioDevice")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ResumeAudioDevice([NativeTypeName("SDL_AudioDeviceID")] uint dev) =>
        DllImport.ResumeAudioDevice(dev);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ResumeHaptic(SDL_Haptic* haptic) =>
        ((delegate* unmanaged<SDL_Haptic*, int>)nativeContext.LoadFunction("ResumeHaptic", "SDL3"))(
            haptic
        );

    [NativeFunction("SDL3", EntryPoint = "ResumeHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ResumeHaptic(SDL_Haptic* haptic) => DllImport.ResumeHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ResumeHaptic(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).ResumeHaptic(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ResumeHaptic")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ResumeHaptic(Ref<SDL_Haptic> haptic) => DllImport.ResumeHaptic(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleGamepad(
        SDL_Gamepad* gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ushort, ushort, uint, int>)
                nativeContext.LoadFunction("RumbleGamepad", "SDL3")
        )(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [NativeFunction("SDL3", EntryPoint = "RumbleGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleGamepad(
        SDL_Gamepad* gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleGamepad(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    )
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)
                ((ISdl)this).RumbleGamepad(
                    __dsl_gamepad,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepad")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleGamepad(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepad(gamepad, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleGamepadTriggers(
        SDL_Gamepad* gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, ushort, ushort, uint, int>)
                nativeContext.LoadFunction("RumbleGamepadTriggers", "SDL3")
        )(gamepad, left_rumble, right_rumble, duration_ms);

    [NativeFunction("SDL3", EntryPoint = "RumbleGamepadTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleGamepadTriggers(
        SDL_Gamepad* gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleGamepadTriggers(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    )
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)
                ((ISdl)this).RumbleGamepadTriggers(
                    __dsl_gamepad,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleGamepadTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleGamepadTriggers(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleGamepadTriggers(gamepad, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleJoystick(
        SDL_Joystick* joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, ushort, ushort, uint, int>)
                nativeContext.LoadFunction("RumbleJoystick", "SDL3")
        )(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);

    [NativeFunction("SDL3", EntryPoint = "RumbleJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleJoystick(
        SDL_Joystick* joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        DllImport.RumbleJoystick(
            joystick,
            low_frequency_rumble,
            high_frequency_rumble,
            duration_ms
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleJoystick(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    )
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)
                ((ISdl)this).RumbleJoystick(
                    __dsl_joystick,
                    low_frequency_rumble,
                    high_frequency_rumble,
                    duration_ms
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystick")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleJoystick(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("Uint16")] ushort low_frequency_rumble,
        [NativeTypeName("Uint16")] ushort high_frequency_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        DllImport.RumbleJoystick(
            joystick,
            low_frequency_rumble,
            high_frequency_rumble,
            duration_ms
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleJoystickTriggers(
        SDL_Joystick* joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, ushort, ushort, uint, int>)
                nativeContext.LoadFunction("RumbleJoystickTriggers", "SDL3")
        )(joystick, left_rumble, right_rumble, duration_ms);

    [NativeFunction("SDL3", EntryPoint = "RumbleJoystickTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleJoystickTriggers(
        SDL_Joystick* joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RumbleJoystickTriggers(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    )
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)
                ((ISdl)this).RumbleJoystickTriggers(
                    __dsl_joystick,
                    left_rumble,
                    right_rumble,
                    duration_ms
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RumbleJoystickTriggers")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RumbleJoystickTriggers(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("Uint16")] ushort left_rumble,
        [NativeTypeName("Uint16")] ushort right_rumble,
        [NativeTypeName("Uint32")] uint duration_ms
    ) => DllImport.RumbleJoystickTriggers(joystick, left_rumble, right_rumble, duration_ms);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RunHapticEffect(
        SDL_Haptic* haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, uint, int>)
                nativeContext.LoadFunction("RunHapticEffect", "SDL3")
        )(haptic, effect, iterations);

    [NativeFunction("SDL3", EntryPoint = "RunHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RunHapticEffect(
        SDL_Haptic* haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) => DllImport.RunHapticEffect(haptic, effect, iterations);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.RunHapticEffect(
        Ref<SDL_Haptic> haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    )
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).RunHapticEffect(__dsl_haptic, effect, iterations);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_RunHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int RunHapticEffect(
        Ref<SDL_Haptic> haptic,
        int effect,
        [NativeTypeName("Uint32")] uint iterations
    ) => DllImport.RunHapticEffect(haptic, effect, iterations);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
        ((delegate* unmanaged<Surface*, sbyte*, int>)nativeContext.LoadFunction("SaveBMP", "SDL3"))(
            surface,
            file
        );

    [NativeFunction("SDL3", EntryPoint = "SaveBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SaveBMP(Surface* surface, [NativeTypeName("const char *")] sbyte* file) =>
        DllImport.SaveBMP(surface, file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SaveBMP(Ref<Surface> surface, [NativeTypeName("const char *")] Ref<sbyte> file)
    {
        fixed (sbyte* __dsl_file = file)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SaveBMP(__dsl_surface, __dsl_file);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SaveBMP(
        Ref<Surface> surface,
        [NativeTypeName("const char *")] Ref<sbyte> file
    ) => DllImport.SaveBMP(surface, file);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SaveBMPIO(
        Surface* surface,
        SDL_IOStream* dst,
        [NativeTypeName("SDL_bool")] int closeio
    ) =>
        (
            (delegate* unmanaged<Surface*, SDL_IOStream*, int, int>)
                nativeContext.LoadFunction("SaveBMPIO", "SDL3")
        )(surface, dst, closeio);

    [NativeFunction("SDL3", EntryPoint = "SaveBMPIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SaveBMPIO(
        Surface* surface,
        SDL_IOStream* dst,
        [NativeTypeName("SDL_bool")] int closeio
    ) => DllImport.SaveBMPIO(surface, dst, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SaveBMPIO(
        Ref<Surface> surface,
        Ref<SDL_IOStream> dst,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    )
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SaveBMPIO(__dsl_surface, __dsl_dst, (int)closeio);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SaveBMP_IO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SaveBMPIO(
        Ref<Surface> surface,
        Ref<SDL_IOStream> dst,
        [NativeTypeName("SDL_bool")] MaybeBool<int> closeio
    ) => DllImport.SaveBMPIO(surface, dst, closeio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ScreenKeyboardShown(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("ScreenKeyboardShown", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "ScreenKeyboardShown")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ScreenKeyboardShown(SDL_Window* window) =>
        DllImport.ScreenKeyboardShown(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ScreenKeyboardShown(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (MaybeBool<int>)(int)((ISdl)this).ScreenKeyboardShown(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenKeyboardShown")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ScreenKeyboardShown(Ref<SDL_Window> window) =>
        DllImport.ScreenKeyboardShown(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.ScreenSaverEnabled() =>
        (MaybeBool<int>)(int)((ISdl)this).ScreenSaverEnabledRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> ScreenSaverEnabled() => DllImport.ScreenSaverEnabled();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ScreenSaverEnabledRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_ScreenSaverEnabled", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_ScreenSaverEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ScreenSaverEnabledRaw() => DllImport.ScreenSaverEnabledRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.SeekIO(SDL_IOStream* context, [NativeTypeName("Sint64")] long offset, int whence) =>
        (
            (delegate* unmanaged<SDL_IOStream*, long, int, long>)
                nativeContext.LoadFunction("SeekIO", "SDL3")
        )(context, offset, whence);

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "SeekIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long SeekIO(
        SDL_IOStream* context,
        [NativeTypeName("Sint64")] long offset,
        int whence
    ) => DllImport.SeekIO(context, offset, whence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.SeekIO(Ref<SDL_IOStream> context, [NativeTypeName("Sint64")] long offset, int whence)
    {
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (long)((ISdl)this).SeekIO(__dsl_context, offset, whence);
        }
    }

    [return: NativeTypeName("Sint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SeekIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long SeekIO(
        Ref<SDL_IOStream> context,
        [NativeTypeName("Sint64")] long offset,
        int whence
    ) => DllImport.SeekIO(context, offset, whence);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SendGamepadEffect(
        SDL_Gamepad* gamepad,
        [NativeTypeName("const void *")] void* data,
        int size
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, void*, int, int>)
                nativeContext.LoadFunction("SendGamepadEffect", "SDL3")
        )(gamepad, data, size);

    [NativeFunction("SDL3", EntryPoint = "SendGamepadEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SendGamepadEffect(
        SDL_Gamepad* gamepad,
        [NativeTypeName("const void *")] void* data,
        int size
    ) => DllImport.SendGamepadEffect(gamepad, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SendGamepadEffect(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("const void *")] Ref data,
        int size
    )
    {
        fixed (void* __dsl_data = data)
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).SendGamepadEffect(__dsl_gamepad, __dsl_data, size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendGamepadEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SendGamepadEffect(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("const void *")] Ref data,
        int size
    ) => DllImport.SendGamepadEffect(gamepad, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SendJoystickEffect(
        SDL_Joystick* joystick,
        [NativeTypeName("const void *")] void* data,
        int size
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, void*, int, int>)
                nativeContext.LoadFunction("SendJoystickEffect", "SDL3")
        )(joystick, data, size);

    [NativeFunction("SDL3", EntryPoint = "SendJoystickEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SendJoystickEffect(
        SDL_Joystick* joystick,
        [NativeTypeName("const void *")] void* data,
        int size
    ) => DllImport.SendJoystickEffect(joystick, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SendJoystickEffect(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("const void *")] Ref data,
        int size
    )
    {
        fixed (void* __dsl_data = data)
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).SendJoystickEffect(__dsl_joystick, __dsl_data, size);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SendJoystickEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SendJoystickEffect(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("const void *")] Ref data,
        int size
    ) => DllImport.SendJoystickEffect(joystick, data, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")]
            delegate* unmanaged<AssertData*, void*, AssertState> handler,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<AssertData*, void*, AssertState>, void*, void>)
                nativeContext.LoadFunction("SetAssertionHandler", "SDL3")
        )(handler, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")]
            delegate* unmanaged<AssertData*, void*, AssertState> handler,
        void* userdata
    ) => DllImport.SetAssertionHandler(handler, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")]
            delegate* unmanaged<AssertData*, void*, AssertState> handler,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).SetAssertionHandler(handler, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAssertionHandler")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetAssertionHandler(
        [NativeTypeName("SDL_AssertionHandler")]
            delegate* unmanaged<AssertData*, void*, AssertState> handler,
        Ref userdata
    ) => DllImport.SetAssertionHandler(handler, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")]
            delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                uint,
                delegate* unmanaged<void*, AudioSpec*, float*, int, void>,
                void*,
                int>)
                nativeContext.LoadFunction("SetAudioPostmixCallback", "SDL3")
        )(devid, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetAudioPostmixCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")]
            delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
        void* userdata
    ) => DllImport.SetAudioPostmixCallback(devid, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")]
            delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            return (int)((ISdl)this).SetAudioPostmixCallback(devid, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioPostmixCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioPostmixCallback(
        [NativeTypeName("SDL_AudioDeviceID")] uint devid,
        [NativeTypeName("SDL_AudioPostmixCallback")]
            delegate* unmanaged<void*, AudioSpec*, float*, int, void> callback,
        Ref userdata
    ) => DllImport.SetAudioPostmixCallback(devid, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamFormat(
        SDL_AudioStream* stream,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, AudioSpec*, AudioSpec*, int>)
                nativeContext.LoadFunction("SetAudioStreamFormat", "SDL3")
        )(stream, src_spec, dst_spec);

    [NativeFunction("SDL3", EntryPoint = "SetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamFormat(
        SDL_AudioStream* stream,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] AudioSpec* dst_spec
    ) => DllImport.SetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamFormat(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    )
    {
        fixed (AudioSpec* __dsl_dst_spec = dst_spec)
        fixed (AudioSpec* __dsl_src_spec = src_spec)
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)
                ((ISdl)this).SetAudioStreamFormat(__dsl_stream, __dsl_src_spec, __dsl_dst_spec);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFormat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamFormat(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> src_spec,
        [NativeTypeName("const SDL_AudioSpec *")] Ref<AudioSpec> dst_spec
    ) => DllImport.SetAudioStreamFormat(stream, src_spec, dst_spec);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, float, int>)
                nativeContext.LoadFunction("SetAudioStreamFrequencyRatio", "SDL3")
        )(stream, ratio);

    [NativeFunction("SDL3", EntryPoint = "SetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio) =>
        DllImport.SetAudioStreamFrequencyRatio(stream, ratio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream, float ratio)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).SetAudioStreamFrequencyRatio(__dsl_stream, ratio);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamFrequencyRatio(Ref<SDL_AudioStream> stream, float ratio) =>
        DllImport.SetAudioStreamFrequencyRatio(stream, ratio);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamGetCallback(
        SDL_AudioStream* stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                SDL_AudioStream*,
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void>,
                void*,
                int>)
                nativeContext.LoadFunction("SetAudioStreamGetCallback", "SDL3")
        )(stream, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetAudioStreamGetCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamGetCallback(
        SDL_AudioStream* stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        void* userdata
    ) => DllImport.SetAudioStreamGetCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamGetCallback(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)
                ((ISdl)this).SetAudioStreamGetCallback(__dsl_stream, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamGetCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamGetCallback(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        Ref userdata
    ) => DllImport.SetAudioStreamGetCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamPutCallback(
        SDL_AudioStream* stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                SDL_AudioStream*,
                delegate* unmanaged<void*, SDL_AudioStream*, int, int, void>,
                void*,
                int>)
                nativeContext.LoadFunction("SetAudioStreamPutCallback", "SDL3")
        )(stream, callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetAudioStreamPutCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamPutCallback(
        SDL_AudioStream* stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        void* userdata
    ) => DllImport.SetAudioStreamPutCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetAudioStreamPutCallback(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)
                ((ISdl)this).SetAudioStreamPutCallback(__dsl_stream, callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetAudioStreamPutCallback")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetAudioStreamPutCallback(
        Ref<SDL_AudioStream> stream,
        [NativeTypeName("SDL_AudioStreamCallback")]
            delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> callback,
        Ref userdata
    ) => DllImport.SetAudioStreamPutCallback(stream, callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_bool")] int value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, int, int>)
                nativeContext.LoadFunction("SetBooleanProperty", "SDL3")
        )(props, name, value);

    [NativeFunction("SDL3", EntryPoint = "SetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("SDL_bool")] int value
    ) => DllImport.SetBooleanProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_bool")] MaybeBool<int> value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).SetBooleanProperty(props, __dsl_name, (int)value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetBooleanProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetBooleanProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("SDL_bool")] MaybeBool<int> value
    ) => DllImport.SetBooleanProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")]
            delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] delegate* unmanaged<void*, void> cleanup,
        void* userdata,
        [NativeTypeName("const char **")] sbyte** mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, sbyte*, nuint*, void*>,
                delegate* unmanaged<void*, void>,
                void*,
                sbyte**,
                nuint,
                int>)
                nativeContext.LoadFunction("SetClipboardData", "SDL3")
        )(callback, cleanup, userdata, mime_types, num_mime_types);

    [NativeFunction("SDL3", EntryPoint = "SetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")]
            delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] delegate* unmanaged<void*, void> cleanup,
        void* userdata,
        [NativeTypeName("const char **")] sbyte** mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    ) => DllImport.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")]
            delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] delegate* unmanaged<void*, void> cleanup,
        Ref userdata,
        [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    )
    {
        fixed (sbyte** __dsl_mime_types = mime_types)
        fixed (void* __dsl_userdata = userdata)
        {
            return (int)
                ((ISdl)this).SetClipboardData(
                    callback,
                    cleanup,
                    __dsl_userdata,
                    __dsl_mime_types,
                    num_mime_types
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardData")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetClipboardData(
        [NativeTypeName("SDL_ClipboardDataCallback")]
            delegate* unmanaged<void*, sbyte*, nuint*, void*> callback,
        [NativeTypeName("SDL_ClipboardCleanupCallback")] delegate* unmanaged<void*, void> cleanup,
        Ref userdata,
        [NativeTypeName("const char **")] Ref2D<sbyte> mime_types,
        [NativeTypeName("size_t")] nuint num_mime_types
    ) => DllImport.SetClipboardData(callback, cleanup, userdata, mime_types, num_mime_types);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
        ((delegate* unmanaged<sbyte*, int>)nativeContext.LoadFunction("SetClipboardText", "SDL3"))(
            text
        );

    [NativeFunction("SDL3", EntryPoint = "SetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetClipboardText([NativeTypeName("const char *")] sbyte* text) =>
        DllImport.SetClipboardText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text)
    {
        fixed (sbyte* __dsl_text = text)
        {
            return (int)((ISdl)this).SetClipboardText(__dsl_text);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetClipboardText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetClipboardText([NativeTypeName("const char *")] Ref<sbyte> text) =>
        DllImport.SetClipboardText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetCursor(SDL_Cursor* cursor) =>
        ((delegate* unmanaged<SDL_Cursor*, int>)nativeContext.LoadFunction("SetCursor", "SDL3"))(
            cursor
        );

    [NativeFunction("SDL3", EntryPoint = "SetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetCursor(SDL_Cursor* cursor) => DllImport.SetCursor(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetCursor(Ref<SDL_Cursor> cursor)
    {
        fixed (SDL_Cursor* __dsl_cursor = cursor)
        {
            return (int)((ISdl)this).SetCursor(__dsl_cursor);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetCursor(Ref<SDL_Cursor> cursor) => DllImport.SetCursor(cursor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("SDL_bool")] int enabled
    ) =>
        (
            (delegate* unmanaged<uint, int, void>)
                nativeContext.LoadFunction("SetEventEnabled", "SDL3")
        )(type, enabled);

    [NativeFunction("SDL3", EntryPoint = "SetEventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("SDL_bool")] int enabled
    ) => DllImport.SetEventEnabled(type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
    ) => ((ISdl)this).SetEventEnabled(type, (int)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetEventEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventEnabled(
        [NativeTypeName("Uint32")] uint type,
        [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
    ) => DllImport.SetEventEnabled(type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<delegate* unmanaged<void*, Event*, int>, void*, void>)
                nativeContext.LoadFunction("SetEventFilter", "SDL3")
        )(filter, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        void* userdata
    ) => DllImport.SetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).SetEventFilter(filter, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetEventFilter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetEventFilter(
        [NativeTypeName("SDL_EventFilter")] delegate* unmanaged<void*, Event*, int> filter,
        Ref userdata
    ) => DllImport.SetEventFilter(filter, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, float, int>)
                nativeContext.LoadFunction("SetFloatProperty", "SDL3")
        )(props, name, value);

    [NativeFunction("SDL3", EntryPoint = "SetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        float value
    ) => DllImport.SetFloatProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).SetFloatProperty(props, __dsl_name, value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetFloatProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetFloatProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        float value
    ) => DllImport.SetFloatProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
        (
            (delegate* unmanaged<int, void>)
                nativeContext.LoadFunction("SetGamepadEventsEnabled", "SDL3")
        )(enabled);

    [NativeFunction("SDL3", EntryPoint = "SetGamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
        DllImport.SetGamepadEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetGamepadEventsEnabled([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
        ((ISdl)this).SetGamepadEventsEnabled((int)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetGamepadEventsEnabled(
        [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
    ) => DllImport.SetGamepadEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadLED(
        SDL_Gamepad* gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, byte, byte, byte, int>)
                nativeContext.LoadFunction("SetGamepadLED", "SDL3")
        )(gamepad, red, green, blue);

    [NativeFunction("SDL3", EntryPoint = "SetGamepadLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadLED(
        SDL_Gamepad* gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetGamepadLED(gamepad, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadLED(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    )
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).SetGamepadLED(__dsl_gamepad, red, green, blue);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadLED(
        Ref<SDL_Gamepad> gamepad,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetGamepadLED(gamepad, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] sbyte* mapping
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, int>)
                nativeContext.LoadFunction("SetGamepadMapping", "SDL3")
        )(instance_id, mapping);

    [NativeFunction("SDL3", EntryPoint = "SetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] sbyte* mapping
    ) => DllImport.SetGamepadMapping(instance_id, mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] Ref<sbyte> mapping
    )
    {
        fixed (sbyte* __dsl_mapping = mapping)
        {
            return (int)((ISdl)this).SetGamepadMapping(instance_id, __dsl_mapping);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadMapping")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadMapping(
        [NativeTypeName("SDL_JoystickID")] uint instance_id,
        [NativeTypeName("const char *")] Ref<sbyte> mapping
    ) => DllImport.SetGamepadMapping(instance_id, mapping);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, int, int>)
                nativeContext.LoadFunction("SetGamepadPlayerIndex", "SDL3")
        )(gamepad, player_index);

    [NativeFunction("SDL3", EntryPoint = "SetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index) =>
        DllImport.SetGamepadPlayerIndex(gamepad, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad, int player_index)
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).SetGamepadPlayerIndex(__dsl_gamepad, player_index);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadPlayerIndex(Ref<SDL_Gamepad> gamepad, int player_index) =>
        DllImport.SetGamepadPlayerIndex(gamepad, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadSensorEnabled(
        SDL_Gamepad* gamepad,
        SensorType type,
        [NativeTypeName("SDL_bool")] int enabled
    ) =>
        (
            (delegate* unmanaged<SDL_Gamepad*, SensorType, int, int>)
                nativeContext.LoadFunction("SetGamepadSensorEnabled", "SDL3")
        )(gamepad, type, enabled);

    [NativeFunction("SDL3", EntryPoint = "SetGamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadSensorEnabled(
        SDL_Gamepad* gamepad,
        SensorType type,
        [NativeTypeName("SDL_bool")] int enabled
    ) => DllImport.SetGamepadSensorEnabled(gamepad, type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetGamepadSensorEnabled(
        Ref<SDL_Gamepad> gamepad,
        SensorType type,
        [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
    )
    {
        fixed (SDL_Gamepad* __dsl_gamepad = gamepad)
        {
            return (int)((ISdl)this).SetGamepadSensorEnabled(__dsl_gamepad, type, (int)enabled);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetGamepadSensorEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetGamepadSensorEnabled(
        Ref<SDL_Gamepad> gamepad,
        SensorType type,
        [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
    ) => DllImport.SetGamepadSensorEnabled(gamepad, type, enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetHapticAutocenter(SDL_Haptic* haptic, int autocenter) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, int>)
                nativeContext.LoadFunction("SetHapticAutocenter", "SDL3")
        )(haptic, autocenter);

    [NativeFunction("SDL3", EntryPoint = "SetHapticAutocenter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetHapticAutocenter(SDL_Haptic* haptic, int autocenter) =>
        DllImport.SetHapticAutocenter(haptic, autocenter);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetHapticAutocenter(Ref<SDL_Haptic> haptic, int autocenter)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).SetHapticAutocenter(__dsl_haptic, autocenter);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticAutocenter")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetHapticAutocenter(Ref<SDL_Haptic> haptic, int autocenter) =>
        DllImport.SetHapticAutocenter(haptic, autocenter);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetHapticGain(SDL_Haptic* haptic, int gain) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, int>)
                nativeContext.LoadFunction("SetHapticGain", "SDL3")
        )(haptic, gain);

    [NativeFunction("SDL3", EntryPoint = "SetHapticGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetHapticGain(SDL_Haptic* haptic, int gain) =>
        DllImport.SetHapticGain(haptic, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetHapticGain(Ref<SDL_Haptic> haptic, int gain)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).SetHapticGain(__dsl_haptic, gain);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHapticGain")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetHapticGain(Ref<SDL_Haptic> haptic, int gain) =>
        DllImport.SetHapticGain(haptic, gain);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetHint(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) =>
        ((delegate* unmanaged<sbyte*, sbyte*, int>)nativeContext.LoadFunction("SetHint", "SDL3"))(
            name,
            value
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetHint(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) => DllImport.SetHint(name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.SetHint(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<int>)(int)((ISdl)this).SetHint(__dsl_name, __dsl_value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHint")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> SetHint(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    ) => DllImport.SetHint(name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetHintWithPriority(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value,
        HintPriority priority
    ) =>
        (
            (delegate* unmanaged<sbyte*, sbyte*, HintPriority, int>)
                nativeContext.LoadFunction("SetHintWithPriority", "SDL3")
        )(name, value, priority);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SetHintWithPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetHintWithPriority(
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value,
        HintPriority priority
    ) => DllImport.SetHintWithPriority(name, value, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.SetHintWithPriority(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value,
        HintPriority priority
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (MaybeBool<int>)
                (int)((ISdl)this).SetHintWithPriority(__dsl_name, __dsl_value, priority);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetHintWithPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> SetHintWithPriority(
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value,
        HintPriority priority
    ) => DllImport.SetHintWithPriority(name, value, priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetJoystickEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
        (
            (delegate* unmanaged<int, void>)
                nativeContext.LoadFunction("SetJoystickEventsEnabled", "SDL3")
        )(enabled);

    [NativeFunction("SDL3", EntryPoint = "SetJoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetJoystickEventsEnabled([NativeTypeName("SDL_bool")] int enabled) =>
        DllImport.SetJoystickEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetJoystickEventsEnabled([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
        ((ISdl)this).SetJoystickEventsEnabled((int)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickEventsEnabled")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetJoystickEventsEnabled(
        [NativeTypeName("SDL_bool")] MaybeBool<int> enabled
    ) => DllImport.SetJoystickEventsEnabled(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickLED(
        SDL_Joystick* joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, byte, byte, byte, int>)
                nativeContext.LoadFunction("SetJoystickLED", "SDL3")
        )(joystick, red, green, blue);

    [NativeFunction("SDL3", EntryPoint = "SetJoystickLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickLED(
        SDL_Joystick* joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetJoystickLED(joystick, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickLED(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    )
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).SetJoystickLED(__dsl_joystick, red, green, blue);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickLED")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickLED(
        Ref<SDL_Joystick> joystick,
        [NativeTypeName("Uint8")] byte red,
        [NativeTypeName("Uint8")] byte green,
        [NativeTypeName("Uint8")] byte blue
    ) => DllImport.SetJoystickLED(joystick, red, green, blue);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, int>)
                nativeContext.LoadFunction("SetJoystickPlayerIndex", "SDL3")
        )(joystick, player_index);

    [NativeFunction("SDL3", EntryPoint = "SetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index) =>
        DllImport.SetJoystickPlayerIndex(joystick, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickPlayerIndex(Ref<SDL_Joystick> joystick, int player_index)
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).SetJoystickPlayerIndex(__dsl_joystick, player_index);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickPlayerIndex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickPlayerIndex(Ref<SDL_Joystick> joystick, int player_index) =>
        DllImport.SetJoystickPlayerIndex(joystick, player_index);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickVirtualAxis(
        SDL_Joystick* joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, short, int>)
                nativeContext.LoadFunction("SetJoystickVirtualAxis", "SDL3")
        )(joystick, axis, value);

    [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickVirtualAxis(
        SDL_Joystick* joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.SetJoystickVirtualAxis(joystick, axis, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickVirtualAxis(
        Ref<SDL_Joystick> joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    )
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).SetJoystickVirtualAxis(__dsl_joystick, axis, value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualAxis")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickVirtualAxis(
        Ref<SDL_Joystick> joystick,
        int axis,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.SetJoystickVirtualAxis(joystick, axis, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickVirtualButton(
        SDL_Joystick* joystick,
        int button,
        [NativeTypeName("Uint8")] byte value
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, byte, int>)
                nativeContext.LoadFunction("SetJoystickVirtualButton", "SDL3")
        )(joystick, button, value);

    [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickVirtualButton(
        SDL_Joystick* joystick,
        int button,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.SetJoystickVirtualButton(joystick, button, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickVirtualButton(
        Ref<SDL_Joystick> joystick,
        int button,
        [NativeTypeName("Uint8")] byte value
    )
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).SetJoystickVirtualButton(__dsl_joystick, button, value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualButton")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickVirtualButton(
        Ref<SDL_Joystick> joystick,
        int button,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.SetJoystickVirtualButton(joystick, button, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickVirtualHat(
        SDL_Joystick* joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) =>
        (
            (delegate* unmanaged<SDL_Joystick*, int, byte, int>)
                nativeContext.LoadFunction("SetJoystickVirtualHat", "SDL3")
        )(joystick, hat, value);

    [NativeFunction("SDL3", EntryPoint = "SetJoystickVirtualHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickVirtualHat(
        SDL_Joystick* joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.SetJoystickVirtualHat(joystick, hat, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetJoystickVirtualHat(
        Ref<SDL_Joystick> joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    )
    {
        fixed (SDL_Joystick* __dsl_joystick = joystick)
        {
            return (int)((ISdl)this).SetJoystickVirtualHat(__dsl_joystick, hat, value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetJoystickVirtualHat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetJoystickVirtualHat(
        Ref<SDL_Joystick> joystick,
        int hat,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.SetJoystickVirtualHat(joystick, hat, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, int, LogPriority, sbyte*, void>,
                void*,
                void>)
                nativeContext.LoadFunction("SetLogOutputFunction", "SDL3")
        )(callback, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
        void* userdata
    ) => DllImport.SetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).SetLogOutputFunction(callback, __dsl_userdata);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetLogOutputFunction")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetLogOutputFunction(
        [NativeTypeName("SDL_LogOutputFunction")]
            delegate* unmanaged<void*, int, LogPriority, sbyte*, void> callback,
        Ref userdata
    ) => DllImport.SetLogOutputFunction(callback, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.SetModState(Keymod modstate) =>
        ((delegate* unmanaged<Keymod, void>)nativeContext.LoadFunction("SetModState", "SDL3"))(
            modstate
        );

    [NativeFunction("SDL3", EntryPoint = "SetModState")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void SetModState(Keymod modstate) => DllImport.SetModState(modstate);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, long, int>)
                nativeContext.LoadFunction("SetNumberProperty", "SDL3")
        )(props, name, value);

    [NativeFunction("SDL3", EntryPoint = "SetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.SetNumberProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long value
    )
    {
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).SetNumberProperty(props, __dsl_name, value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetNumberProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetNumberProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.SetNumberProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPaletteColors(
        Palette* palette,
        [NativeTypeName("const SDL_Color *")] Color* colors,
        int firstcolor,
        int ncolors
    ) =>
        (
            (delegate* unmanaged<Palette*, Color*, int, int, int>)
                nativeContext.LoadFunction("SetPaletteColors", "SDL3")
        )(palette, colors, firstcolor, ncolors);

    [NativeFunction("SDL3", EntryPoint = "SetPaletteColors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPaletteColors(
        Palette* palette,
        [NativeTypeName("const SDL_Color *")] Color* colors,
        int firstcolor,
        int ncolors
    ) => DllImport.SetPaletteColors(palette, colors, firstcolor, ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPaletteColors(
        Ref<Palette> palette,
        [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
        int firstcolor,
        int ncolors
    )
    {
        fixed (Color* __dsl_colors = colors)
        fixed (Palette* __dsl_palette = palette)
        {
            return (int)
                ((ISdl)this).SetPaletteColors(__dsl_palette, __dsl_colors, firstcolor, ncolors);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPaletteColors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPaletteColors(
        Ref<Palette> palette,
        [NativeTypeName("const SDL_Color *")] Ref<Color> colors,
        int firstcolor,
        int ncolors
    ) => DllImport.SetPaletteColors(palette, colors, firstcolor, ncolors);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPixelFormatPalette(PixelFormat* format, Palette* palette) =>
        (
            (delegate* unmanaged<PixelFormat*, Palette*, int>)
                nativeContext.LoadFunction("SetPixelFormatPalette", "SDL3")
        )(format, palette);

    [NativeFunction("SDL3", EntryPoint = "SetPixelFormatPalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPixelFormatPalette(PixelFormat* format, Palette* palette) =>
        DllImport.SetPixelFormatPalette(format, palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPixelFormatPalette(Ref<PixelFormat> format, Ref<Palette> palette)
    {
        fixed (Palette* __dsl_palette = palette)
        fixed (PixelFormat* __dsl_format = format)
        {
            return (int)((ISdl)this).SetPixelFormatPalette(__dsl_format, __dsl_palette);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPixelFormatPalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPixelFormatPalette(Ref<PixelFormat> format, Ref<Palette> palette) =>
        DllImport.SetPixelFormatPalette(format, palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
        (
            (delegate* unmanaged<sbyte*, int>)
                nativeContext.LoadFunction("SetPrimarySelectionText", "SDL3")
        )(text);

    [NativeFunction("SDL3", EntryPoint = "SetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPrimarySelectionText([NativeTypeName("const char *")] sbyte* text) =>
        DllImport.SetPrimarySelectionText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPrimarySelectionText([NativeTypeName("const char *")] Ref<sbyte> text)
    {
        fixed (sbyte* __dsl_text = text)
        {
            return (int)((ISdl)this).SetPrimarySelectionText(__dsl_text);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPrimarySelectionText")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPrimarySelectionText([NativeTypeName("const char *")] Ref<sbyte> text) =>
        DllImport.SetPrimarySelectionText(text);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, void*, int>)
                nativeContext.LoadFunction("SetProperty", "SDL3")
        )(props, name, value);

    [NativeFunction("SDL3", EntryPoint = "SetProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value
    ) => DllImport.SetProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value
    )
    {
        fixed (void* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).SetProperty(props, __dsl_name, __dsl_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value
    ) => DllImport.SetProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value,
        [NativeTypeName("void (*)(void *, void *)")]
            delegate* unmanaged<void*, void*, void> cleanup,
        void* userdata
    ) =>
        (
            (delegate* unmanaged<
                uint,
                sbyte*,
                void*,
                delegate* unmanaged<void*, void*, void>,
                void*,
                int>)
                nativeContext.LoadFunction("SetPropertyWithCleanup", "SDL3")
        )(props, name, value, cleanup, userdata);

    [NativeFunction("SDL3", EntryPoint = "SetPropertyWithCleanup")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        void* value,
        [NativeTypeName("void (*)(void *, void *)")]
            delegate* unmanaged<void*, void*, void> cleanup,
        void* userdata
    ) => DllImport.SetPropertyWithCleanup(props, name, value, cleanup, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value,
        [NativeTypeName("void (*)(void *, void *)")]
            delegate* unmanaged<void*, void*, void> cleanup,
        Ref userdata
    )
    {
        fixed (void* __dsl_userdata = userdata)
        fixed (void* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (int)
                ((ISdl)this).SetPropertyWithCleanup(
                    props,
                    __dsl_name,
                    __dsl_value,
                    cleanup,
                    __dsl_userdata
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetPropertyWithCleanup")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetPropertyWithCleanup(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        Ref value,
        [NativeTypeName("void (*)(void *, void *)")]
            delegate* unmanaged<void*, void*, void> cleanup,
        Ref userdata
    ) => DllImport.SetPropertyWithCleanup(props, name, value, cleanup, userdata);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRelativeMouseMode([NativeTypeName("SDL_bool")] int enabled) =>
        ((delegate* unmanaged<int, int>)nativeContext.LoadFunction("SetRelativeMouseMode", "SDL3"))(
            enabled
        );

    [NativeFunction("SDL3", EntryPoint = "SetRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRelativeMouseMode([NativeTypeName("SDL_bool")] int enabled) =>
        DllImport.SetRelativeMouseMode(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRelativeMouseMode([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
        (int)((ISdl)this).SetRelativeMouseMode((int)enabled);

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRelativeMouseMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRelativeMouseMode([NativeTypeName("SDL_bool")] MaybeBool<int> enabled) =>
        DllImport.SetRelativeMouseMode(enabled);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderClipRect(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Rect*, int>)
                nativeContext.LoadFunction("SetRenderClipRect", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "SetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderClipRect(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderClipRect(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderClipRect(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderClipRect(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetRenderClipRect(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderColorScale(SDL_Renderer* renderer, float scale) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, int>)
                nativeContext.LoadFunction("SetRenderColorScale", "SDL3")
        )(renderer, scale);

    [NativeFunction("SDL3", EntryPoint = "SetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderColorScale(SDL_Renderer* renderer, float scale) =>
        DllImport.SetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderColorScale(Ref<SDL_Renderer> renderer, float scale)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderColorScale(__dsl_renderer, scale);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderColorScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderColorScale(Ref<SDL_Renderer> renderer, float scale) =>
        DllImport.SetRenderColorScale(renderer, scale);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode blendMode) =>
        (
            (delegate* unmanaged<SDL_Renderer*, BlendMode, int>)
                nativeContext.LoadFunction("SetRenderDrawBlendMode", "SDL3")
        )(renderer, blendMode);

    [NativeFunction("SDL3", EntryPoint = "SetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderDrawBlendMode(SDL_Renderer* renderer, BlendMode blendMode) =>
        DllImport.SetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, BlendMode blendMode)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderDrawBlendMode(__dsl_renderer, blendMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderDrawBlendMode(Ref<SDL_Renderer> renderer, BlendMode blendMode) =>
        DllImport.SetRenderDrawBlendMode(renderer, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderDrawColor(
        SDL_Renderer* renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, byte, byte, byte, byte, int>)
                nativeContext.LoadFunction("SetRenderDrawColor", "SDL3")
        )(renderer, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "SetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderDrawColor(
        SDL_Renderer* renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.SetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderDrawColor(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    )
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderDrawColor(__dsl_renderer, r, g, b, a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderDrawColor(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b,
        [NativeTypeName("Uint8")] byte a
    ) => DllImport.SetRenderDrawColor(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderDrawColorFloat(SDL_Renderer* renderer, float r, float g, float b, float a) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, float, float, float, int>)
                nativeContext.LoadFunction("SetRenderDrawColorFloat", "SDL3")
        )(renderer, r, g, b, a);

    [NativeFunction("SDL3", EntryPoint = "SetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderDrawColorFloat(
        SDL_Renderer* renderer,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.SetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderDrawColorFloat(Ref<SDL_Renderer> renderer, float r, float g, float b, float a)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderDrawColorFloat(__dsl_renderer, r, g, b, a);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderDrawColorFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderDrawColorFloat(
        Ref<SDL_Renderer> renderer,
        float r,
        float g,
        float b,
        float a
    ) => DllImport.SetRenderDrawColorFloat(renderer, r, g, b, a);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderLogicalPresentation(
        SDL_Renderer* renderer,
        int w,
        int h,
        RendererLogicalPresentation mode,
        ScaleMode scale_mode
    ) =>
        (
            (delegate* unmanaged<
                SDL_Renderer*,
                int,
                int,
                RendererLogicalPresentation,
                ScaleMode,
                int>)
                nativeContext.LoadFunction("SetRenderLogicalPresentation", "SDL3")
        )(renderer, w, h, mode, scale_mode);

    [NativeFunction("SDL3", EntryPoint = "SetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderLogicalPresentation(
        SDL_Renderer* renderer,
        int w,
        int h,
        RendererLogicalPresentation mode,
        ScaleMode scale_mode
    ) => DllImport.SetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderLogicalPresentation(
        Ref<SDL_Renderer> renderer,
        int w,
        int h,
        RendererLogicalPresentation mode,
        ScaleMode scale_mode
    )
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)
                ((ISdl)this).SetRenderLogicalPresentation(__dsl_renderer, w, h, mode, scale_mode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderLogicalPresentation")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderLogicalPresentation(
        Ref<SDL_Renderer> renderer,
        int w,
        int h,
        RendererLogicalPresentation mode,
        ScaleMode scale_mode
    ) => DllImport.SetRenderLogicalPresentation(renderer, w, h, mode, scale_mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY) =>
        (
            (delegate* unmanaged<SDL_Renderer*, float, float, int>)
                nativeContext.LoadFunction("SetRenderScale", "SDL3")
        )(renderer, scaleX, scaleY);

    [NativeFunction("SDL3", EntryPoint = "SetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY) =>
        DllImport.SetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderScale(Ref<SDL_Renderer> renderer, float scaleX, float scaleY)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderScale(__dsl_renderer, scaleX, scaleY);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderScale")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderScale(Ref<SDL_Renderer> renderer, float scaleX, float scaleY) =>
        DllImport.SetRenderScale(renderer, scaleX, scaleY);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture) =>
        (
            (delegate* unmanaged<SDL_Renderer*, SDL_Texture*, int>)
                nativeContext.LoadFunction("SetRenderTarget", "SDL3")
        )(renderer, texture);

    [NativeFunction("SDL3", EntryPoint = "SetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture) =>
        DllImport.SetRenderTarget(renderer, texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderTarget(Ref<SDL_Renderer> renderer, Ref<SDL_Texture> texture)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderTarget(__dsl_renderer, __dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderTarget")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderTarget(Ref<SDL_Renderer> renderer, Ref<SDL_Texture> texture) =>
        DllImport.SetRenderTarget(renderer, texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderViewport(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<SDL_Renderer*, Rect*, int>)
                nativeContext.LoadFunction("SetRenderViewport", "SDL3")
        )(renderer, rect);

    [NativeFunction("SDL3", EntryPoint = "SetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderViewport(
        SDL_Renderer* renderer,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderViewport(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderViewport(__dsl_renderer, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderViewport")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderViewport(
        Ref<SDL_Renderer> renderer,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetRenderViewport(renderer, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderVSync(SDL_Renderer* renderer, int vsync) =>
        (
            (delegate* unmanaged<SDL_Renderer*, int, int>)
                nativeContext.LoadFunction("SetRenderVSync", "SDL3")
        )(renderer, vsync);

    [NativeFunction("SDL3", EntryPoint = "SetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderVSync(SDL_Renderer* renderer, int vsync) =>
        DllImport.SetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetRenderVSync(Ref<SDL_Renderer> renderer, int vsync)
    {
        fixed (SDL_Renderer* __dsl_renderer = renderer)
        {
            return (int)((ISdl)this).SetRenderVSync(__dsl_renderer, vsync);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetRenderVSync")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetRenderVSync(Ref<SDL_Renderer> renderer, int vsync) =>
        DllImport.SetRenderVSync(renderer, vsync);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, sbyte*, int>)
                nativeContext.LoadFunction("SetStringProperty", "SDL3")
        )(props, name, value);

    [NativeFunction("SDL3", EntryPoint = "SetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] sbyte* name,
        [NativeTypeName("const char *")] sbyte* value
    ) => DllImport.SetStringProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    )
    {
        fixed (sbyte* __dsl_value = value)
        fixed (sbyte* __dsl_name = name)
        {
            return (int)((ISdl)this).SetStringProperty(props, __dsl_name, __dsl_value);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetStringProperty")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetStringProperty(
        [NativeTypeName("SDL_PropertiesID")] uint props,
        [NativeTypeName("const char *")] Ref<sbyte> name,
        [NativeTypeName("const char *")] Ref<sbyte> value
    ) => DllImport.SetStringProperty(props, name, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8")] byte alpha) =>
        (
            (delegate* unmanaged<Surface*, byte, int>)
                nativeContext.LoadFunction("SetSurfaceAlphaMod", "SDL3")
        )(surface, alpha);

    [NativeFunction("SDL3", EntryPoint = "SetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceAlphaMod(Surface* surface, [NativeTypeName("Uint8")] byte alpha) =>
        DllImport.SetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceAlphaMod(Ref<Surface> surface, [NativeTypeName("Uint8")] byte alpha)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfaceAlphaMod(__dsl_surface, alpha);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceAlphaMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte alpha
    ) => DllImport.SetSurfaceAlphaMod(surface, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceBlendMode(Surface* surface, BlendMode blendMode) =>
        (
            (delegate* unmanaged<Surface*, BlendMode, int>)
                nativeContext.LoadFunction("SetSurfaceBlendMode", "SDL3")
        )(surface, blendMode);

    [NativeFunction("SDL3", EntryPoint = "SetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceBlendMode(Surface* surface, BlendMode blendMode) =>
        DllImport.SetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceBlendMode(Ref<Surface> surface, BlendMode blendMode)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfaceBlendMode(__dsl_surface, blendMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceBlendMode(Ref<Surface> surface, BlendMode blendMode) =>
        DllImport.SetSurfaceBlendMode(surface, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceClipRect(
        Surface* surface,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, int>)
                nativeContext.LoadFunction("SetSurfaceClipRect", "SDL3")
        )(surface, rect);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceClipRect(
        Surface* surface,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.SetSurfaceClipRect(
        Ref<Surface> surface,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<int>)(int)((ISdl)this).SetSurfaceClipRect(__dsl_surface, __dsl_rect);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceClipRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> SetSurfaceClipRect(
        Ref<Surface> surface,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetSurfaceClipRect(surface, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceColorKey(Surface* surface, int flag, [NativeTypeName("Uint32")] uint key) =>
        (
            (delegate* unmanaged<Surface*, int, uint, int>)
                nativeContext.LoadFunction("SetSurfaceColorKey", "SDL3")
        )(surface, flag, key);

    [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceColorKey(
        Surface* surface,
        int flag,
        [NativeTypeName("Uint32")] uint key
    ) => DllImport.SetSurfaceColorKey(surface, flag, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceColorKey(Ref<Surface> surface, int flag, [NativeTypeName("Uint32")] uint key)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfaceColorKey(__dsl_surface, flag, key);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceColorKey(
        Ref<Surface> surface,
        int flag,
        [NativeTypeName("Uint32")] uint key
    ) => DllImport.SetSurfaceColorKey(surface, flag, key);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<Surface*, byte, byte, byte, int>)
                nativeContext.LoadFunction("SetSurfaceColorMod", "SDL3")
        )(surface, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceColorMod(
        Surface* surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfaceColorMod(__dsl_surface, r, g, b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceColorMod(
        Ref<Surface> surface,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetSurfaceColorMod(surface, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
        (
            (delegate* unmanaged<Surface*, Colorspace, int>)
                nativeContext.LoadFunction("SetSurfaceColorspace", "SDL3")
        )(surface, colorspace);

    [NativeFunction("SDL3", EntryPoint = "SetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceColorspace(Surface* surface, Colorspace colorspace) =>
        DllImport.SetSurfaceColorspace(surface, colorspace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfaceColorspace(__dsl_surface, colorspace);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceColorspace")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceColorspace(Ref<Surface> surface, Colorspace colorspace) =>
        DllImport.SetSurfaceColorspace(surface, colorspace);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfacePalette(Surface* surface, Palette* palette) =>
        (
            (delegate* unmanaged<Surface*, Palette*, int>)
                nativeContext.LoadFunction("SetSurfacePalette", "SDL3")
        )(surface, palette);

    [NativeFunction("SDL3", EntryPoint = "SetSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfacePalette(Surface* surface, Palette* palette) =>
        DllImport.SetSurfacePalette(surface, palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette)
    {
        fixed (Palette* __dsl_palette = palette)
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfacePalette(__dsl_surface, __dsl_palette);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfacePalette")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfacePalette(Ref<Surface> surface, Ref<Palette> palette) =>
        DllImport.SetSurfacePalette(surface, palette);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceRLE(Surface* surface, int flag) =>
        (
            (delegate* unmanaged<Surface*, int, int>)
                nativeContext.LoadFunction("SetSurfaceRLE", "SDL3")
        )(surface, flag);

    [NativeFunction("SDL3", EntryPoint = "SetSurfaceRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceRLE(Surface* surface, int flag) =>
        DllImport.SetSurfaceRLE(surface, flag);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetSurfaceRLE(Ref<Surface> surface, int flag)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (int)((ISdl)this).SetSurfaceRLE(__dsl_surface, flag);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetSurfaceRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetSurfaceRLE(Ref<Surface> surface, int flag) =>
        DllImport.SetSurfaceRLE(surface, flag);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextInputRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
        ((delegate* unmanaged<Rect*, int>)nativeContext.LoadFunction("SetTextInputRect", "SDL3"))(
            rect
        );

    [NativeFunction("SDL3", EntryPoint = "SetTextInputRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Rect* rect) =>
        DllImport.SetTextInputRect(rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextInputRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect)
    {
        fixed (Rect* __dsl_rect = rect)
        {
            return (int)((ISdl)this).SetTextInputRect(__dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextInputRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextInputRect([NativeTypeName("const SDL_Rect *")] Ref<Rect> rect) =>
        DllImport.SetTextInputRect(rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureAlphaMod(SDL_Texture* texture, [NativeTypeName("Uint8")] byte alpha) =>
        (
            (delegate* unmanaged<SDL_Texture*, byte, int>)
                nativeContext.LoadFunction("SetTextureAlphaMod", "SDL3")
        )(texture, alpha);

    [NativeFunction("SDL3", EntryPoint = "SetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureAlphaMod(
        SDL_Texture* texture,
        [NativeTypeName("Uint8")] byte alpha
    ) => DllImport.SetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureAlphaMod(Ref<SDL_Texture> texture, [NativeTypeName("Uint8")] byte alpha)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).SetTextureAlphaMod(__dsl_texture, alpha);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureAlphaMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8")] byte alpha
    ) => DllImport.SetTextureAlphaMod(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureAlphaModFloat(SDL_Texture* texture, float alpha) =>
        (
            (delegate* unmanaged<SDL_Texture*, float, int>)
                nativeContext.LoadFunction("SetTextureAlphaModFloat", "SDL3")
        )(texture, alpha);

    [NativeFunction("SDL3", EntryPoint = "SetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureAlphaModFloat(SDL_Texture* texture, float alpha) =>
        DllImport.SetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureAlphaModFloat(Ref<SDL_Texture> texture, float alpha)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).SetTextureAlphaModFloat(__dsl_texture, alpha);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureAlphaModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureAlphaModFloat(Ref<SDL_Texture> texture, float alpha) =>
        DllImport.SetTextureAlphaModFloat(texture, alpha);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureBlendMode(SDL_Texture* texture, BlendMode blendMode) =>
        (
            (delegate* unmanaged<SDL_Texture*, BlendMode, int>)
                nativeContext.LoadFunction("SetTextureBlendMode", "SDL3")
        )(texture, blendMode);

    [NativeFunction("SDL3", EntryPoint = "SetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureBlendMode(SDL_Texture* texture, BlendMode blendMode) =>
        DllImport.SetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureBlendMode(Ref<SDL_Texture> texture, BlendMode blendMode)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).SetTextureBlendMode(__dsl_texture, blendMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureBlendMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureBlendMode(Ref<SDL_Texture> texture, BlendMode blendMode) =>
        DllImport.SetTextureBlendMode(texture, blendMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureColorMod(
        SDL_Texture* texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, byte, byte, byte, int>)
                nativeContext.LoadFunction("SetTextureColorMod", "SDL3")
        )(texture, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "SetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureColorMod(
        SDL_Texture* texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureColorMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    )
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).SetTextureColorMod(__dsl_texture, r, g, b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorMod")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureColorMod(
        Ref<SDL_Texture> texture,
        [NativeTypeName("Uint8")] byte r,
        [NativeTypeName("Uint8")] byte g,
        [NativeTypeName("Uint8")] byte b
    ) => DllImport.SetTextureColorMod(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureColorModFloat(SDL_Texture* texture, float r, float g, float b) =>
        (
            (delegate* unmanaged<SDL_Texture*, float, float, float, int>)
                nativeContext.LoadFunction("SetTextureColorModFloat", "SDL3")
        )(texture, r, g, b);

    [NativeFunction("SDL3", EntryPoint = "SetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureColorModFloat(SDL_Texture* texture, float r, float g, float b) =>
        DllImport.SetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureColorModFloat(Ref<SDL_Texture> texture, float r, float g, float b)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).SetTextureColorModFloat(__dsl_texture, r, g, b);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureColorModFloat")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureColorModFloat(
        Ref<SDL_Texture> texture,
        float r,
        float g,
        float b
    ) => DllImport.SetTextureColorModFloat(texture, r, g, b);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureScaleMode(SDL_Texture* texture, ScaleMode scaleMode) =>
        (
            (delegate* unmanaged<SDL_Texture*, ScaleMode, int>)
                nativeContext.LoadFunction("SetTextureScaleMode", "SDL3")
        )(texture, scaleMode);

    [NativeFunction("SDL3", EntryPoint = "SetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureScaleMode(SDL_Texture* texture, ScaleMode scaleMode) =>
        DllImport.SetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTextureScaleMode(Ref<SDL_Texture> texture, ScaleMode scaleMode)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).SetTextureScaleMode(__dsl_texture, scaleMode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTextureScaleMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTextureScaleMode(Ref<SDL_Texture> texture, ScaleMode scaleMode) =>
        DllImport.SetTextureScaleMode(texture, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetThreadPriority(ThreadPriority priority) =>
        (
            (delegate* unmanaged<ThreadPriority, int>)
                nativeContext.LoadFunction("SetThreadPriority", "SDL3")
        )(priority);

    [NativeFunction("SDL3", EntryPoint = "SetThreadPriority")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetThreadPriority(ThreadPriority priority) =>
        DllImport.SetThreadPriority(priority);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTLS(
        [NativeTypeName("SDL_TLSID")] uint id,
        [NativeTypeName("const void *")] void* value,
        [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
    ) =>
        (
            (delegate* unmanaged<uint, void*, delegate* unmanaged<void*, void>, int>)
                nativeContext.LoadFunction("SetTLS", "SDL3")
        )(id, value, destructor);

    [NativeFunction("SDL3", EntryPoint = "SetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTLS(
        [NativeTypeName("SDL_TLSID")] uint id,
        [NativeTypeName("const void *")] void* value,
        [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
    ) => DllImport.SetTLS(id, value, destructor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetTLS(
        [NativeTypeName("SDL_TLSID")] uint id,
        [NativeTypeName("const void *")] Ref value,
        [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
    )
    {
        fixed (void* __dsl_value = value)
        {
            return (int)((ISdl)this).SetTLS(id, __dsl_value, destructor);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetTLS")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetTLS(
        [NativeTypeName("SDL_TLSID")] uint id,
        [NativeTypeName("const void *")] Ref value,
        [NativeTypeName("void (*)(void *)")] delegate* unmanaged<void*, void> destructor
    ) => DllImport.SetTLS(id, value, destructor);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowAlwaysOnTop(SDL_Window* window, [NativeTypeName("SDL_bool")] int on_top) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowAlwaysOnTop", "SDL3")
        )(window, on_top);

    [NativeFunction("SDL3", EntryPoint = "SetWindowAlwaysOnTop")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowAlwaysOnTop(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int on_top
    ) => DllImport.SetWindowAlwaysOnTop(window, on_top);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowAlwaysOnTop(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> on_top
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowAlwaysOnTop(__dsl_window, (int)on_top);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowAlwaysOnTop")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowAlwaysOnTop(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> on_top
    ) => DllImport.SetWindowAlwaysOnTop(window, on_top);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowBordered(SDL_Window* window, [NativeTypeName("SDL_bool")] int bordered) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowBordered", "SDL3")
        )(window, bordered);

    [NativeFunction("SDL3", EntryPoint = "SetWindowBordered")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowBordered(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int bordered
    ) => DllImport.SetWindowBordered(window, bordered);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowBordered(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> bordered
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowBordered(__dsl_window, (int)bordered);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowBordered")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowBordered(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> bordered
    ) => DllImport.SetWindowBordered(window, bordered);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowFocusable(SDL_Window* window, [NativeTypeName("SDL_bool")] int focusable) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowFocusable", "SDL3")
        )(window, focusable);

    [NativeFunction("SDL3", EntryPoint = "SetWindowFocusable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowFocusable(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int focusable
    ) => DllImport.SetWindowFocusable(window, focusable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowFocusable(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> focusable
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowFocusable(__dsl_window, (int)focusable);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFocusable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowFocusable(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> focusable
    ) => DllImport.SetWindowFocusable(window, focusable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowFullscreen(SDL_Window* window, [NativeTypeName("SDL_bool")] int fullscreen) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowFullscreen", "SDL3")
        )(window, fullscreen);

    [NativeFunction("SDL3", EntryPoint = "SetWindowFullscreen")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowFullscreen(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int fullscreen
    ) => DllImport.SetWindowFullscreen(window, fullscreen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowFullscreen(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> fullscreen
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowFullscreen(__dsl_window, (int)fullscreen);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreen")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowFullscreen(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> fullscreen
    ) => DllImport.SetWindowFullscreen(window, fullscreen);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowFullscreenMode(
        SDL_Window* window,
        [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
    ) =>
        (
            (delegate* unmanaged<SDL_Window*, DisplayMode*, int>)
                nativeContext.LoadFunction("SetWindowFullscreenMode", "SDL3")
        )(window, mode);

    [NativeFunction("SDL3", EntryPoint = "SetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowFullscreenMode(
        SDL_Window* window,
        [NativeTypeName("const SDL_DisplayMode *")] DisplayMode* mode
    ) => DllImport.SetWindowFullscreenMode(window, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowFullscreenMode(
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
    )
    {
        fixed (DisplayMode* __dsl_mode = mode)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowFullscreenMode(__dsl_window, __dsl_mode);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowFullscreenMode")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowFullscreenMode(
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_DisplayMode *")] Ref<DisplayMode> mode
    ) => DllImport.SetWindowFullscreenMode(window, mode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowHitTest(
        SDL_Window* window,
        [NativeTypeName("SDL_HitTest")]
            delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
        void* callback_data
    ) =>
        (
            (delegate* unmanaged<
                SDL_Window*,
                delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult>,
                void*,
                int>)
                nativeContext.LoadFunction("SetWindowHitTest", "SDL3")
        )(window, callback, callback_data);

    [NativeFunction("SDL3", EntryPoint = "SetWindowHitTest")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowHitTest(
        SDL_Window* window,
        [NativeTypeName("SDL_HitTest")]
            delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
        void* callback_data
    ) => DllImport.SetWindowHitTest(window, callback, callback_data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowHitTest(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_HitTest")]
            delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
        Ref callback_data
    )
    {
        fixed (void* __dsl_callback_data = callback_data)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowHitTest(__dsl_window, callback, __dsl_callback_data);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowHitTest")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowHitTest(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_HitTest")]
            delegate* unmanaged<SDL_Window*, Point*, void*, HitTestResult> callback,
        Ref callback_data
    ) => DllImport.SetWindowHitTest(window, callback, callback_data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowIcon(SDL_Window* window, Surface* icon) =>
        (
            (delegate* unmanaged<SDL_Window*, Surface*, int>)
                nativeContext.LoadFunction("SetWindowIcon", "SDL3")
        )(window, icon);

    [NativeFunction("SDL3", EntryPoint = "SetWindowIcon")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowIcon(SDL_Window* window, Surface* icon) =>
        DllImport.SetWindowIcon(window, icon);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowIcon(Ref<SDL_Window> window, Ref<Surface> icon)
    {
        fixed (Surface* __dsl_icon = icon)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowIcon(__dsl_window, __dsl_icon);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowIcon")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowIcon(Ref<SDL_Window> window, Ref<Surface> icon) =>
        DllImport.SetWindowIcon(window, icon);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowInputFocus(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("SetWindowInputFocus", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "SetWindowInputFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowInputFocus(SDL_Window* window) =>
        DllImport.SetWindowInputFocus(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowInputFocus(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowInputFocus(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowInputFocus")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowInputFocus(Ref<SDL_Window> window) =>
        DllImport.SetWindowInputFocus(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowKeyboardGrab(SDL_Window* window, [NativeTypeName("SDL_bool")] int grabbed) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowKeyboardGrab", "SDL3")
        )(window, grabbed);

    [NativeFunction("SDL3", EntryPoint = "SetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowKeyboardGrab(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int grabbed
    ) => DllImport.SetWindowKeyboardGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowKeyboardGrab(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowKeyboardGrab(__dsl_window, (int)grabbed);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowKeyboardGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowKeyboardGrab(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
    ) => DllImport.SetWindowKeyboardGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int, int>)
                nativeContext.LoadFunction("SetWindowMaximumSize", "SDL3")
        )(window, max_w, max_h);

    [NativeFunction("SDL3", EntryPoint = "SetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h) =>
        DllImport.SetWindowMaximumSize(window, max_w, max_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMaximumSize(Ref<SDL_Window> window, int max_w, int max_h)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowMaximumSize(__dsl_window, max_w, max_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMaximumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMaximumSize(Ref<SDL_Window> window, int max_w, int max_h) =>
        DllImport.SetWindowMaximumSize(window, max_w, max_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int, int>)
                nativeContext.LoadFunction("SetWindowMinimumSize", "SDL3")
        )(window, min_w, min_h);

    [NativeFunction("SDL3", EntryPoint = "SetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h) =>
        DllImport.SetWindowMinimumSize(window, min_w, min_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMinimumSize(Ref<SDL_Window> window, int min_w, int min_h)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowMinimumSize(__dsl_window, min_w, min_h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMinimumSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMinimumSize(Ref<SDL_Window> window, int min_w, int min_h) =>
        DllImport.SetWindowMinimumSize(window, min_w, min_h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window) =>
        (
            (delegate* unmanaged<SDL_Window*, SDL_Window*, int>)
                nativeContext.LoadFunction("SetWindowModalFor", "SDL3")
        )(modal_window, parent_window);

    [NativeFunction("SDL3", EntryPoint = "SetWindowModalFor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window) =>
        DllImport.SetWindowModalFor(modal_window, parent_window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowModalFor(Ref<SDL_Window> modal_window, Ref<SDL_Window> parent_window)
    {
        fixed (SDL_Window* __dsl_parent_window = parent_window)
        fixed (SDL_Window* __dsl_modal_window = modal_window)
        {
            return (int)((ISdl)this).SetWindowModalFor(__dsl_modal_window, __dsl_parent_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowModalFor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowModalFor(
        Ref<SDL_Window> modal_window,
        Ref<SDL_Window> parent_window
    ) => DllImport.SetWindowModalFor(modal_window, parent_window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMouseGrab(SDL_Window* window, [NativeTypeName("SDL_bool")] int grabbed) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowMouseGrab", "SDL3")
        )(window, grabbed);

    [NativeFunction("SDL3", EntryPoint = "SetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMouseGrab(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int grabbed
    ) => DllImport.SetWindowMouseGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMouseGrab(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowMouseGrab(__dsl_window, (int)grabbed);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseGrab")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMouseGrab(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> grabbed
    ) => DllImport.SetWindowMouseGrab(window, grabbed);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMouseRect(
        SDL_Window* window,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) =>
        (
            (delegate* unmanaged<SDL_Window*, Rect*, int>)
                nativeContext.LoadFunction("SetWindowMouseRect", "SDL3")
        )(window, rect);

    [NativeFunction("SDL3", EntryPoint = "SetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMouseRect(
        SDL_Window* window,
        [NativeTypeName("const SDL_Rect *")] Rect* rect
    ) => DllImport.SetWindowMouseRect(window, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowMouseRect(
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    )
    {
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowMouseRect(__dsl_window, __dsl_rect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowMouseRect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowMouseRect(
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect
    ) => DllImport.SetWindowMouseRect(window, rect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowOpacity(SDL_Window* window, float opacity) =>
        (
            (delegate* unmanaged<SDL_Window*, float, int>)
                nativeContext.LoadFunction("SetWindowOpacity", "SDL3")
        )(window, opacity);

    [NativeFunction("SDL3", EntryPoint = "SetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowOpacity(SDL_Window* window, float opacity) =>
        DllImport.SetWindowOpacity(window, opacity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowOpacity(Ref<SDL_Window> window, float opacity)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowOpacity(__dsl_window, opacity);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowOpacity")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowOpacity(Ref<SDL_Window> window, float opacity) =>
        DllImport.SetWindowOpacity(window, opacity);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowPosition(SDL_Window* window, int x, int y) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int, int>)
                nativeContext.LoadFunction("SetWindowPosition", "SDL3")
        )(window, x, y);

    [NativeFunction("SDL3", EntryPoint = "SetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowPosition(SDL_Window* window, int x, int y) =>
        DllImport.SetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowPosition(Ref<SDL_Window> window, int x, int y)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowPosition(__dsl_window, x, y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowPosition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowPosition(Ref<SDL_Window> window, int x, int y) =>
        DllImport.SetWindowPosition(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowResizable(SDL_Window* window, [NativeTypeName("SDL_bool")] int resizable) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int>)
                nativeContext.LoadFunction("SetWindowResizable", "SDL3")
        )(window, resizable);

    [NativeFunction("SDL3", EntryPoint = "SetWindowResizable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowResizable(
        SDL_Window* window,
        [NativeTypeName("SDL_bool")] int resizable
    ) => DllImport.SetWindowResizable(window, resizable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowResizable(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> resizable
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowResizable(__dsl_window, (int)resizable);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowResizable")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowResizable(
        Ref<SDL_Window> window,
        [NativeTypeName("SDL_bool")] MaybeBool<int> resizable
    ) => DllImport.SetWindowResizable(window, resizable);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowShape(SDL_Window* window, Surface* shape) =>
        (
            (delegate* unmanaged<SDL_Window*, Surface*, int>)
                nativeContext.LoadFunction("SetWindowShape", "SDL3")
        )(window, shape);

    [NativeFunction("SDL3", EntryPoint = "SetWindowShape")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowShape(SDL_Window* window, Surface* shape) =>
        DllImport.SetWindowShape(window, shape);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowShape(Ref<SDL_Window> window, Ref<Surface> shape)
    {
        fixed (Surface* __dsl_shape = shape)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowShape(__dsl_window, __dsl_shape);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowShape")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowShape(Ref<SDL_Window> window, Ref<Surface> shape) =>
        DllImport.SetWindowShape(window, shape);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowSize(SDL_Window* window, int w, int h) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int, int>)
                nativeContext.LoadFunction("SetWindowSize", "SDL3")
        )(window, w, h);

    [NativeFunction("SDL3", EntryPoint = "SetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowSize(SDL_Window* window, int w, int h) =>
        DllImport.SetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowSize(Ref<SDL_Window> window, int w, int h)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowSize(__dsl_window, w, h);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowSize")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowSize(Ref<SDL_Window> window, int w, int h) =>
        DllImport.SetWindowSize(window, w, h);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowTitle(SDL_Window* window, [NativeTypeName("const char *")] sbyte* title) =>
        (
            (delegate* unmanaged<SDL_Window*, sbyte*, int>)
                nativeContext.LoadFunction("SetWindowTitle", "SDL3")
        )(window, title);

    [NativeFunction("SDL3", EntryPoint = "SetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowTitle(
        SDL_Window* window,
        [NativeTypeName("const char *")] sbyte* title
    ) => DllImport.SetWindowTitle(window, title);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SetWindowTitle(
        Ref<SDL_Window> window,
        [NativeTypeName("const char *")] Ref<sbyte> title
    )
    {
        fixed (sbyte* __dsl_title = title)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SetWindowTitle(__dsl_window, __dsl_title);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SetWindowTitle")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SetWindowTitle(
        Ref<SDL_Window> window,
        [NativeTypeName("const char *")] Ref<sbyte> title
    ) => DllImport.SetWindowTitle(window, title);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowCursor() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("ShowCursor", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "ShowCursor")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowCursor() => DllImport.ShowCursor();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
        int* buttonid
    ) =>
        (
            (delegate* unmanaged<MessageBoxData*, int*, int>)
                nativeContext.LoadFunction("ShowMessageBox", "SDL3")
        )(messageboxdata, buttonid);

    [NativeFunction("SDL3", EntryPoint = "ShowMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] MessageBoxData* messageboxdata,
        int* buttonid
    ) => DllImport.ShowMessageBox(messageboxdata, buttonid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
        Ref<int> buttonid
    )
    {
        fixed (int* __dsl_buttonid = buttonid)
        fixed (MessageBoxData* __dsl_messageboxdata = messageboxdata)
        {
            return (int)((ISdl)this).ShowMessageBox(__dsl_messageboxdata, __dsl_buttonid);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowMessageBox(
        [NativeTypeName("const SDL_MessageBoxData *")] Ref<MessageBoxData> messageboxdata,
        Ref<int> buttonid
    ) => DllImport.ShowMessageBox(messageboxdata, buttonid);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        void* userdata,
        SDL_Window* window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("SDL_bool")] int allow_many
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, sbyte**, int, void>,
                void*,
                SDL_Window*,
                DialogFileFilter*,
                sbyte*,
                int,
                void>)
                nativeContext.LoadFunction("ShowOpenFileDialog", "SDL3")
        )(callback, userdata, window, filters, default_location, allow_many);

    [NativeFunction("SDL3", EntryPoint = "ShowOpenFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        void* userdata,
        SDL_Window* window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("SDL_bool")] int allow_many
    ) =>
        DllImport.ShowOpenFileDialog(
            callback,
            userdata,
            window,
            filters,
            default_location,
            allow_many
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        Ref userdata,
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
    )
    {
        fixed (sbyte* __dsl_default_location = default_location)
        fixed (DialogFileFilter* __dsl_filters = filters)
        fixed (SDL_Window* __dsl_window = window)
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).ShowOpenFileDialog(
                callback,
                __dsl_userdata,
                __dsl_window,
                __dsl_filters,
                __dsl_default_location,
                (int)allow_many
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        Ref userdata,
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
    ) =>
        DllImport.ShowOpenFileDialog(
            callback,
            userdata,
            window,
            filters,
            default_location,
            allow_many
        );

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        void* userdata,
        SDL_Window* window,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("SDL_bool")] int allow_many
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, sbyte**, int, void>,
                void*,
                SDL_Window*,
                sbyte*,
                int,
                void>)
                nativeContext.LoadFunction("ShowOpenFolderDialog", "SDL3")
        )(callback, userdata, window, default_location, allow_many);

    [NativeFunction("SDL3", EntryPoint = "ShowOpenFolderDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        void* userdata,
        SDL_Window* window,
        [NativeTypeName("const char *")] sbyte* default_location,
        [NativeTypeName("SDL_bool")] int allow_many
    ) => DllImport.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        Ref userdata,
        Ref<SDL_Window> window,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
    )
    {
        fixed (sbyte* __dsl_default_location = default_location)
        fixed (SDL_Window* __dsl_window = window)
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).ShowOpenFolderDialog(
                callback,
                __dsl_userdata,
                __dsl_window,
                __dsl_default_location,
                (int)allow_many
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowOpenFolderDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowOpenFolderDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        Ref userdata,
        Ref<SDL_Window> window,
        [NativeTypeName("const char *")] Ref<sbyte> default_location,
        [NativeTypeName("SDL_bool")] MaybeBool<int> allow_many
    ) => DllImport.ShowOpenFolderDialog(callback, userdata, window, default_location, allow_many);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        void* userdata,
        SDL_Window* window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        [NativeTypeName("const char *")] sbyte* default_location
    ) =>
        (
            (delegate* unmanaged<
                delegate* unmanaged<void*, sbyte**, int, void>,
                void*,
                SDL_Window*,
                DialogFileFilter*,
                sbyte*,
                void>)
                nativeContext.LoadFunction("ShowSaveFileDialog", "SDL3")
        )(callback, userdata, window, filters, default_location);

    [NativeFunction("SDL3", EntryPoint = "ShowSaveFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        void* userdata,
        SDL_Window* window,
        [NativeTypeName("const SDL_DialogFileFilter *")] DialogFileFilter* filters,
        [NativeTypeName("const char *")] sbyte* default_location
    ) => DllImport.ShowSaveFileDialog(callback, userdata, window, filters, default_location);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        Ref userdata,
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location
    )
    {
        fixed (sbyte* __dsl_default_location = default_location)
        fixed (DialogFileFilter* __dsl_filters = filters)
        fixed (SDL_Window* __dsl_window = window)
        fixed (void* __dsl_userdata = userdata)
        {
            ((ISdl)this).ShowSaveFileDialog(
                callback,
                __dsl_userdata,
                __dsl_window,
                __dsl_filters,
                __dsl_default_location
            );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowSaveFileDialog")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void ShowSaveFileDialog(
        [NativeTypeName("SDL_DialogFileCallback")]
            delegate* unmanaged<void*, sbyte**, int, void> callback,
        Ref userdata,
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_DialogFileFilter *")] Ref<DialogFileFilter> filters,
        [NativeTypeName("const char *")] Ref<sbyte> default_location
    ) => DllImport.ShowSaveFileDialog(callback, userdata, window, filters, default_location);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowSimpleMessageBox(
        [NativeTypeName("Uint32")] uint flags,
        [NativeTypeName("const char *")] sbyte* title,
        [NativeTypeName("const char *")] sbyte* message,
        SDL_Window* window
    ) =>
        (
            (delegate* unmanaged<uint, sbyte*, sbyte*, SDL_Window*, int>)
                nativeContext.LoadFunction("ShowSimpleMessageBox", "SDL3")
        )(flags, title, message, window);

    [NativeFunction("SDL3", EntryPoint = "ShowSimpleMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowSimpleMessageBox(
        [NativeTypeName("Uint32")] uint flags,
        [NativeTypeName("const char *")] sbyte* title,
        [NativeTypeName("const char *")] sbyte* message,
        SDL_Window* window
    ) => DllImport.ShowSimpleMessageBox(flags, title, message, window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowSimpleMessageBox(
        [NativeTypeName("Uint32")] uint flags,
        [NativeTypeName("const char *")] Ref<sbyte> title,
        [NativeTypeName("const char *")] Ref<sbyte> message,
        Ref<SDL_Window> window
    )
    {
        fixed (SDL_Window* __dsl_window = window)
        fixed (sbyte* __dsl_message = message)
        fixed (sbyte* __dsl_title = title)
        {
            return (int)
                ((ISdl)this).ShowSimpleMessageBox(flags, __dsl_title, __dsl_message, __dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowSimpleMessageBox(
        [NativeTypeName("Uint32")] uint flags,
        [NativeTypeName("const char *")] Ref<sbyte> title,
        [NativeTypeName("const char *")] Ref<sbyte> message,
        Ref<SDL_Window> window
    ) => DllImport.ShowSimpleMessageBox(flags, title, message, window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowWindow(SDL_Window* window) =>
        ((delegate* unmanaged<SDL_Window*, int>)nativeContext.LoadFunction("ShowWindow", "SDL3"))(
            window
        );

    [NativeFunction("SDL3", EntryPoint = "ShowWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowWindow(SDL_Window* window) => DllImport.ShowWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).ShowWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowWindow(Ref<SDL_Window> window) => DllImport.ShowWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowWindowSystemMenu(SDL_Window* window, int x, int y) =>
        (
            (delegate* unmanaged<SDL_Window*, int, int, int>)
                nativeContext.LoadFunction("ShowWindowSystemMenu", "SDL3")
        )(window, x, y);

    [NativeFunction("SDL3", EntryPoint = "ShowWindowSystemMenu")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowWindowSystemMenu(SDL_Window* window, int x, int y) =>
        DllImport.ShowWindowSystemMenu(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.ShowWindowSystemMenu(Ref<SDL_Window> window, int x, int y)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).ShowWindowSystemMenu(__dsl_window, x, y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_ShowWindowSystemMenu")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int ShowWindowSystemMenu(Ref<SDL_Window> window, int x, int y) =>
        DllImport.ShowWindowSystemMenu(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SignalCondition(SDL_Condition* cond) =>
        (
            (delegate* unmanaged<SDL_Condition*, int>)
                nativeContext.LoadFunction("SignalCondition", "SDL3")
        )(cond);

    [NativeFunction("SDL3", EntryPoint = "SignalCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SignalCondition(SDL_Condition* cond) => DllImport.SignalCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SignalCondition(Ref<SDL_Condition> cond)
    {
        fixed (SDL_Condition* __dsl_cond = cond)
        {
            return (int)((ISdl)this).SignalCondition(__dsl_cond);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SignalCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SignalCondition(Ref<SDL_Condition> cond) => DllImport.SignalCondition(cond);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.SimdGetAlignment() =>
        ((delegate* unmanaged<nuint>)nativeContext.LoadFunction("SimdGetAlignment", "SDL3"))();

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "SimdGetAlignment")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint SimdGetAlignment() => DllImport.SimdGetAlignment();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SoftStretch(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) =>
        (
            (delegate* unmanaged<Surface*, Rect*, Surface*, Rect*, ScaleMode, int>)
                nativeContext.LoadFunction("SoftStretch", "SDL3")
        )(src, srcrect, dst, dstrect, scaleMode);

    [NativeFunction("SDL3", EntryPoint = "SoftStretch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SoftStretch(
        Surface* src,
        [NativeTypeName("const SDL_Rect *")] Rect* srcrect,
        Surface* dst,
        [NativeTypeName("const SDL_Rect *")] Rect* dstrect,
        ScaleMode scaleMode
    ) => DllImport.SoftStretch(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SoftStretch(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    )
    {
        fixed (Rect* __dsl_dstrect = dstrect)
        fixed (Surface* __dsl_dst = dst)
        fixed (Rect* __dsl_srcrect = srcrect)
        fixed (Surface* __dsl_src = src)
        {
            return (int)
                ((ISdl)this).SoftStretch(
                    __dsl_src,
                    __dsl_srcrect,
                    __dsl_dst,
                    __dsl_dstrect,
                    scaleMode
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SoftStretch")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SoftStretch(
        Ref<Surface> src,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> srcrect,
        Ref<Surface> dst,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> dstrect,
        ScaleMode scaleMode
    ) => DllImport.SoftStretch(src, srcrect, dst, dstrect, scaleMode);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.StartTextInput() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("StartTextInput", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "StartTextInput")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void StartTextInput() => DllImport.StartTextInput();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StopHapticEffect(SDL_Haptic* haptic, int effect) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, int>)
                nativeContext.LoadFunction("StopHapticEffect", "SDL3")
        )(haptic, effect);

    [NativeFunction("SDL3", EntryPoint = "StopHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StopHapticEffect(SDL_Haptic* haptic, int effect) =>
        DllImport.StopHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StopHapticEffect(Ref<SDL_Haptic> haptic, int effect)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).StopHapticEffect(__dsl_haptic, effect);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StopHapticEffect(Ref<SDL_Haptic> haptic, int effect) =>
        DllImport.StopHapticEffect(haptic, effect);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StopHapticEffects(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("StopHapticEffects", "SDL3")
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "StopHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StopHapticEffects(SDL_Haptic* haptic) => DllImport.StopHapticEffects(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StopHapticEffects(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).StopHapticEffects(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticEffects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StopHapticEffects(Ref<SDL_Haptic> haptic) =>
        DllImport.StopHapticEffects(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StopHapticRumble(SDL_Haptic* haptic) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int>)
                nativeContext.LoadFunction("StopHapticRumble", "SDL3")
        )(haptic);

    [NativeFunction("SDL3", EntryPoint = "StopHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StopHapticRumble(SDL_Haptic* haptic) => DllImport.StopHapticRumble(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StopHapticRumble(Ref<SDL_Haptic> haptic)
    {
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).StopHapticRumble(__dsl_haptic);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StopHapticRumble")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StopHapticRumble(Ref<SDL_Haptic> haptic) =>
        DllImport.StopHapticRumble(haptic);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.StopTextInput() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("StopTextInput", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "StopTextInput")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void StopTextInput() => DllImport.StopTextInput();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.StorageReady(SDL_Storage* storage) =>
        (
            (delegate* unmanaged<SDL_Storage*, int>)
                nativeContext.LoadFunction("StorageReady", "SDL3")
        )(storage);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "StorageReady")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int StorageReady(SDL_Storage* storage) => DllImport.StorageReady(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.StorageReady(Ref<SDL_Storage> storage)
    {
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (MaybeBool<int>)(int)((ISdl)this).StorageReady(__dsl_storage);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_StorageReady")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> StorageReady(Ref<SDL_Storage> storage) =>
        DllImport.StorageReady(storage);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SurfaceHasColorKey(Surface* surface) =>
        (
            (delegate* unmanaged<Surface*, int>)
                nativeContext.LoadFunction("SurfaceHasColorKey", "SDL3")
        )(surface);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SurfaceHasColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SurfaceHasColorKey(Surface* surface) => DllImport.SurfaceHasColorKey(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.SurfaceHasColorKey(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<int>)(int)((ISdl)this).SurfaceHasColorKey(__dsl_surface);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasColorKey")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> SurfaceHasColorKey(Ref<Surface> surface) =>
        DllImport.SurfaceHasColorKey(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SurfaceHasRLE(Surface* surface) =>
        ((delegate* unmanaged<Surface*, int>)nativeContext.LoadFunction("SurfaceHasRLE", "SDL3"))(
            surface
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SurfaceHasRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SurfaceHasRLE(Surface* surface) => DllImport.SurfaceHasRLE(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.SurfaceHasRLE(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            return (MaybeBool<int>)(int)((ISdl)this).SurfaceHasRLE(__dsl_surface);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SurfaceHasRLE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> SurfaceHasRLE(Ref<Surface> surface) =>
        DllImport.SurfaceHasRLE(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SyncWindow(SDL_Window* window) =>
        ((delegate* unmanaged<SDL_Window*, int>)nativeContext.LoadFunction("SyncWindow", "SDL3"))(
            window
        );

    [NativeFunction("SDL3", EntryPoint = "SyncWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SyncWindow(SDL_Window* window) => DllImport.SyncWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.SyncWindow(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).SyncWindow(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_SyncWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int SyncWindow(Ref<SDL_Window> window) => DllImport.SyncWindow(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.TellIO(SDL_IOStream* context) =>
        ((delegate* unmanaged<SDL_IOStream*, long>)nativeContext.LoadFunction("TellIO", "SDL3"))(
            context
        );

    [return: NativeTypeName("Sint64")]
    [NativeFunction("SDL3", EntryPoint = "TellIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long TellIO(SDL_IOStream* context) => DllImport.TellIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.TellIO(Ref<SDL_IOStream> context)
    {
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (long)((ISdl)this).TellIO(__dsl_context);
        }
    }

    [return: NativeTypeName("Sint64")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TellIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long TellIO(Ref<SDL_IOStream> context) => DllImport.TellIO(context);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.TextInputActive() => (MaybeBool<int>)(int)((ISdl)this).TextInputActiveRaw();

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> TextInputActive() => DllImport.TextInputActive();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TextInputActiveRaw() =>
        ((delegate* unmanaged<int>)nativeContext.LoadFunction("SDL_TextInputActive", "SDL3"))();

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "SDL_TextInputActive")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TextInputActiveRaw() => DllImport.TextInputActiveRaw();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    long ISdl.TimeFromWindows(
        [NativeTypeName("Uint32")] uint dwLowDateTime,
        [NativeTypeName("Uint32")] uint dwHighDateTime
    ) =>
        (
            (delegate* unmanaged<uint, uint, long>)
                nativeContext.LoadFunction("TimeFromWindows", "SDL3")
        )(dwLowDateTime, dwHighDateTime);

    [return: NativeTypeName("SDL_Time")]
    [NativeFunction("SDL3", EntryPoint = "TimeFromWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static long TimeFromWindows(
        [NativeTypeName("Uint32")] uint dwLowDateTime,
        [NativeTypeName("Uint32")] uint dwHighDateTime
    ) => DllImport.TimeFromWindows(dwLowDateTime, dwHighDateTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        DateTime* dt,
        [NativeTypeName("SDL_bool")] int localTime
    ) =>
        (
            (delegate* unmanaged<long, DateTime*, int, int>)
                nativeContext.LoadFunction("TimeToDateTime", "SDL3")
        )(ticks, dt, localTime);

    [NativeFunction("SDL3", EntryPoint = "TimeToDateTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        DateTime* dt,
        [NativeTypeName("SDL_bool")] int localTime
    ) => DllImport.TimeToDateTime(ticks, dt, localTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        Ref<DateTime> dt,
        [NativeTypeName("SDL_bool")] MaybeBool<int> localTime
    )
    {
        fixed (DateTime* __dsl_dt = dt)
        {
            return (int)((ISdl)this).TimeToDateTime(ticks, __dsl_dt, (int)localTime);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TimeToDateTime")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TimeToDateTime(
        [NativeTypeName("SDL_Time")] long ticks,
        Ref<DateTime> dt,
        [NativeTypeName("SDL_bool")] MaybeBool<int> localTime
    ) => DllImport.TimeToDateTime(ticks, dt, localTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
        [NativeTypeName("Uint32 *")] uint* dwHighDateTime
    ) =>
        (
            (delegate* unmanaged<long, uint*, uint*, void>)
                nativeContext.LoadFunction("TimeToWindows", "SDL3")
        )(ticks, dwLowDateTime, dwHighDateTime);

    [NativeFunction("SDL3", EntryPoint = "TimeToWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] uint* dwLowDateTime,
        [NativeTypeName("Uint32 *")] uint* dwHighDateTime
    ) => DllImport.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
        [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
    )
    {
        fixed (uint* __dsl_dwHighDateTime = dwHighDateTime)
        fixed (uint* __dsl_dwLowDateTime = dwLowDateTime)
        {
            ((ISdl)this).TimeToWindows(ticks, __dsl_dwLowDateTime, __dsl_dwHighDateTime);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TimeToWindows")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void TimeToWindows(
        [NativeTypeName("SDL_Time")] long ticks,
        [NativeTypeName("Uint32 *")] Ref<uint> dwLowDateTime,
        [NativeTypeName("Uint32 *")] Ref<uint> dwHighDateTime
    ) => DllImport.TimeToWindows(ticks, dwLowDateTime, dwHighDateTime);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockMutex(SDL_Mutex* mutex) =>
        ((delegate* unmanaged<SDL_Mutex*, int>)nativeContext.LoadFunction("TryLockMutex", "SDL3"))(
            mutex
        );

    [NativeFunction("SDL3", EntryPoint = "TryLockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockMutex(SDL_Mutex* mutex) => DllImport.TryLockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockMutex(Ref<SDL_Mutex> mutex)
    {
        fixed (SDL_Mutex* __dsl_mutex = mutex)
        {
            return (int)((ISdl)this).TryLockMutex(__dsl_mutex);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockMutex(Ref<SDL_Mutex> mutex) => DllImport.TryLockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockRWLockForReading(SDL_RWLock* rwlock) =>
        (
            (delegate* unmanaged<SDL_RWLock*, int>)
                nativeContext.LoadFunction("TryLockRWLockForReading", "SDL3")
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "TryLockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockRWLockForReading(SDL_RWLock* rwlock) =>
        DllImport.TryLockRWLockForReading(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockRWLockForReading(Ref<SDL_RWLock> rwlock)
    {
        fixed (SDL_RWLock* __dsl_rwlock = rwlock)
        {
            return (int)((ISdl)this).TryLockRWLockForReading(__dsl_rwlock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForReading")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockRWLockForReading(Ref<SDL_RWLock> rwlock) =>
        DllImport.TryLockRWLockForReading(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockRWLockForWriting(SDL_RWLock* rwlock) =>
        (
            (delegate* unmanaged<SDL_RWLock*, int>)
                nativeContext.LoadFunction("TryLockRWLockForWriting", "SDL3")
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "TryLockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockRWLockForWriting(SDL_RWLock* rwlock) =>
        DllImport.TryLockRWLockForWriting(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockRWLockForWriting(Ref<SDL_RWLock> rwlock)
    {
        fixed (SDL_RWLock* __dsl_rwlock = rwlock)
        {
            return (int)((ISdl)this).TryLockRWLockForWriting(__dsl_rwlock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockRWLockForWriting")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockRWLockForWriting(Ref<SDL_RWLock> rwlock) =>
        DllImport.TryLockRWLockForWriting(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        ((delegate* unmanaged<int*, int>)nativeContext.LoadFunction("TryLockSpinlock", "SDL3"))(
            @lock
        );

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "TryLockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        DllImport.TryLockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.TryLockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
    {
        fixed (int* __dsl_lock = @lock)
        {
            return (MaybeBool<int>)(int)((ISdl)this).TryLockSpinlock(__dsl_lock);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryLockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> TryLockSpinlock(
        [NativeTypeName("SDL_SpinLock *")] Ref<int> @lock
    ) => DllImport.TryLockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryWaitSemaphore(SDL_Semaphore* sem) =>
        (
            (delegate* unmanaged<SDL_Semaphore*, int>)
                nativeContext.LoadFunction("TryWaitSemaphore", "SDL3")
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "TryWaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryWaitSemaphore(SDL_Semaphore* sem) => DllImport.TryWaitSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.TryWaitSemaphore(Ref<SDL_Semaphore> sem)
    {
        fixed (SDL_Semaphore* __dsl_sem = sem)
        {
            return (int)((ISdl)this).TryWaitSemaphore(__dsl_sem);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_TryWaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int TryWaitSemaphore(Ref<SDL_Semaphore> sem) => DllImport.TryWaitSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStream(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, void>)
                nativeContext.LoadFunction("UnbindAudioStream", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "UnbindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStream(SDL_AudioStream* stream) =>
        DllImport.UnbindAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStream(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            ((ISdl)this).UnbindAudioStream(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStream(Ref<SDL_AudioStream> stream) =>
        DllImport.UnbindAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStreams(SDL_AudioStream** streams, int num_streams) =>
        (
            (delegate* unmanaged<SDL_AudioStream**, int, void>)
                nativeContext.LoadFunction("UnbindAudioStreams", "SDL3")
        )(streams, num_streams);

    [NativeFunction("SDL3", EntryPoint = "UnbindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStreams(SDL_AudioStream** streams, int num_streams) =>
        DllImport.UnbindAudioStreams(streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnbindAudioStreams(Ref2D<SDL_AudioStream> streams, int num_streams)
    {
        fixed (SDL_AudioStream** __dsl_streams = streams)
        {
            ((ISdl)this).UnbindAudioStreams(__dsl_streams, num_streams);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnbindAudioStreams")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnbindAudioStreams(Ref2D<SDL_AudioStream> streams, int num_streams) =>
        DllImport.UnbindAudioStreams(streams, num_streams);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnloadObject(void* handle) =>
        ((delegate* unmanaged<void*, void>)nativeContext.LoadFunction("UnloadObject", "SDL3"))(
            handle
        );

    [NativeFunction("SDL3", EntryPoint = "UnloadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnloadObject(void* handle) => DllImport.UnloadObject(handle);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnloadObject(Ref handle)
    {
        fixed (void* __dsl_handle = handle)
        {
            ((ISdl)this).UnloadObject(__dsl_handle);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnloadObject")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnloadObject(Ref handle) => DllImport.UnloadObject(handle);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UnlockAudioStream(SDL_AudioStream* stream) =>
        (
            (delegate* unmanaged<SDL_AudioStream*, int>)
                nativeContext.LoadFunction("UnlockAudioStream", "SDL3")
        )(stream);

    [NativeFunction("SDL3", EntryPoint = "UnlockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UnlockAudioStream(SDL_AudioStream* stream) =>
        DllImport.UnlockAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UnlockAudioStream(Ref<SDL_AudioStream> stream)
    {
        fixed (SDL_AudioStream* __dsl_stream = stream)
        {
            return (int)((ISdl)this).UnlockAudioStream(__dsl_stream);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockAudioStream")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UnlockAudioStream(Ref<SDL_AudioStream> stream) =>
        DllImport.UnlockAudioStream(stream);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockJoysticks() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("UnlockJoysticks", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "UnlockJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockJoysticks() => DllImport.UnlockJoysticks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockMutex(SDL_Mutex* mutex) =>
        ((delegate* unmanaged<SDL_Mutex*, void>)nativeContext.LoadFunction("UnlockMutex", "SDL3"))(
            mutex
        );

    [NativeFunction("SDL3", EntryPoint = "UnlockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockMutex(SDL_Mutex* mutex) => DllImport.UnlockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockMutex(Ref<SDL_Mutex> mutex)
    {
        fixed (SDL_Mutex* __dsl_mutex = mutex)
        {
            ((ISdl)this).UnlockMutex(__dsl_mutex);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockMutex")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockMutex(Ref<SDL_Mutex> mutex) => DllImport.UnlockMutex(mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        ((delegate* unmanaged<uint, void>)nativeContext.LoadFunction("UnlockProperties", "SDL3"))(
            props
        );

    [NativeFunction("SDL3", EntryPoint = "UnlockProperties")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockProperties([NativeTypeName("SDL_PropertiesID")] uint props) =>
        DllImport.UnlockProperties(props);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockRWLock(SDL_RWLock* rwlock) =>
        (
            (delegate* unmanaged<SDL_RWLock*, void>)
                nativeContext.LoadFunction("UnlockRWLock", "SDL3")
        )(rwlock);

    [NativeFunction("SDL3", EntryPoint = "UnlockRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockRWLock(SDL_RWLock* rwlock) => DllImport.UnlockRWLock(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockRWLock(Ref<SDL_RWLock> rwlock)
    {
        fixed (SDL_RWLock* __dsl_rwlock = rwlock)
        {
            ((ISdl)this).UnlockRWLock(__dsl_rwlock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockRWLock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockRWLock(Ref<SDL_RWLock> rwlock) => DllImport.UnlockRWLock(rwlock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        ((delegate* unmanaged<int*, void>)nativeContext.LoadFunction("UnlockSpinlock", "SDL3"))(
            @lock
        );

    [NativeFunction("SDL3", EntryPoint = "UnlockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] int* @lock) =>
        DllImport.UnlockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock)
    {
        fixed (int* __dsl_lock = @lock)
        {
            ((ISdl)this).UnlockSpinlock(__dsl_lock);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSpinlock")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSpinlock([NativeTypeName("SDL_SpinLock *")] Ref<int> @lock) =>
        DllImport.UnlockSpinlock(@lock);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSurface(Surface* surface) =>
        ((delegate* unmanaged<Surface*, void>)nativeContext.LoadFunction("UnlockSurface", "SDL3"))(
            surface
        );

    [NativeFunction("SDL3", EntryPoint = "UnlockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSurface(Surface* surface) => DllImport.UnlockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockSurface(Ref<Surface> surface)
    {
        fixed (Surface* __dsl_surface = surface)
        {
            ((ISdl)this).UnlockSurface(__dsl_surface);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockSurface(Ref<Surface> surface) => DllImport.UnlockSurface(surface);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockTexture(SDL_Texture* texture) =>
        (
            (delegate* unmanaged<SDL_Texture*, void>)
                nativeContext.LoadFunction("UnlockTexture", "SDL3")
        )(texture);

    [NativeFunction("SDL3", EntryPoint = "UnlockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockTexture(SDL_Texture* texture) => DllImport.UnlockTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UnlockTexture(Ref<SDL_Texture> texture)
    {
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            ((ISdl)this).UnlockTexture(__dsl_texture);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UnlockTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UnlockTexture(Ref<SDL_Texture> texture) => DllImport.UnlockTexture(texture);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UpdateGamepads() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("UpdateGamepads", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "UpdateGamepads")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateGamepads() => DllImport.UpdateGamepads();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateHapticEffect(
        SDL_Haptic* haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
    ) =>
        (
            (delegate* unmanaged<SDL_Haptic*, int, HapticEffect*, int>)
                nativeContext.LoadFunction("UpdateHapticEffect", "SDL3")
        )(haptic, effect, data);

    [NativeFunction("SDL3", EntryPoint = "UpdateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateHapticEffect(
        SDL_Haptic* haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] HapticEffect* data
    ) => DllImport.UpdateHapticEffect(haptic, effect, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateHapticEffect(
        Ref<SDL_Haptic> haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
    )
    {
        fixed (HapticEffect* __dsl_data = data)
        fixed (SDL_Haptic* __dsl_haptic = haptic)
        {
            return (int)((ISdl)this).UpdateHapticEffect(__dsl_haptic, effect, __dsl_data);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateHapticEffect")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateHapticEffect(
        Ref<SDL_Haptic> haptic,
        int effect,
        [NativeTypeName("const SDL_HapticEffect *")] Ref<HapticEffect> data
    ) => DllImport.UpdateHapticEffect(haptic, effect, data);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UpdateJoysticks() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("UpdateJoysticks", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "UpdateJoysticks")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateJoysticks() => DllImport.UpdateJoysticks();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateNVTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* UVplane,
        int UVpitch
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, Rect*, byte*, int, byte*, int, int>)
                nativeContext.LoadFunction("UpdateNVTexture", "SDL3")
        )(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

    [NativeFunction("SDL3", EntryPoint = "UpdateNVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateNVTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* UVplane,
        int UVpitch
    ) => DllImport.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateNVTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
        int UVpitch
    )
    {
        fixed (byte* __dsl_UVplane = UVplane)
        fixed (byte* __dsl_Yplane = Yplane)
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)
                ((ISdl)this).UpdateNVTexture(
                    __dsl_texture,
                    __dsl_rect,
                    __dsl_Yplane,
                    Ypitch,
                    __dsl_UVplane,
                    UVpitch
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateNVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateNVTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> UVplane,
        int UVpitch
    ) => DllImport.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.UpdateSensors() =>
        ((delegate* unmanaged<void>)nativeContext.LoadFunction("UpdateSensors", "SDL3"))();

    [NativeFunction("SDL3", EntryPoint = "UpdateSensors")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void UpdateSensors() => DllImport.UpdateSensors();

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const void *")] void* pixels,
        int pitch
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, Rect*, void*, int, int>)
                nativeContext.LoadFunction("UpdateTexture", "SDL3")
        )(texture, rect, pixels, pitch);

    [NativeFunction("SDL3", EntryPoint = "UpdateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const void *")] void* pixels,
        int pitch
    ) => DllImport.UpdateTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const void *")] Ref pixels,
        int pitch
    )
    {
        fixed (void* __dsl_pixels = pixels)
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)((ISdl)this).UpdateTexture(__dsl_texture, __dsl_rect, __dsl_pixels, pitch);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const void *")] Ref pixels,
        int pitch
    ) => DllImport.UpdateTexture(texture, rect, pixels, pitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateWindowSurface(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("UpdateWindowSurface", "SDL3")
        )(window);

    [NativeFunction("SDL3", EntryPoint = "UpdateWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateWindowSurface(SDL_Window* window) =>
        DllImport.UpdateWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateWindowSurface(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).UpdateWindowSurface(__dsl_window);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateWindowSurface(Ref<SDL_Window> window) =>
        DllImport.UpdateWindowSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateWindowSurfaceRects(
        SDL_Window* window,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int numrects
    ) =>
        (
            (delegate* unmanaged<SDL_Window*, Rect*, int, int>)
                nativeContext.LoadFunction("UpdateWindowSurfaceRects", "SDL3")
        )(window, rects, numrects);

    [NativeFunction("SDL3", EntryPoint = "UpdateWindowSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateWindowSurfaceRects(
        SDL_Window* window,
        [NativeTypeName("const SDL_Rect *")] Rect* rects,
        int numrects
    ) => DllImport.UpdateWindowSurfaceRects(window, rects, numrects);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateWindowSurfaceRects(
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int numrects
    )
    {
        fixed (Rect* __dsl_rects = rects)
        fixed (SDL_Window* __dsl_window = window)
        {
            return (int)((ISdl)this).UpdateWindowSurfaceRects(__dsl_window, __dsl_rects, numrects);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateWindowSurfaceRects")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateWindowSurfaceRects(
        Ref<SDL_Window> window,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rects,
        int numrects
    ) => DllImport.UpdateWindowSurfaceRects(window, rects, numrects);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateYUVTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] byte* Vplane,
        int Vpitch
    ) =>
        (
            (delegate* unmanaged<SDL_Texture*, Rect*, byte*, int, byte*, int, byte*, int, int>)
                nativeContext.LoadFunction("UpdateYUVTexture", "SDL3")
        )(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

    [NativeFunction("SDL3", EntryPoint = "UpdateYUVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateYUVTexture(
        SDL_Texture* texture,
        [NativeTypeName("const SDL_Rect *")] Rect* rect,
        [NativeTypeName("const Uint8 *")] byte* Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] byte* Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] byte* Vplane,
        int Vpitch
    ) => DllImport.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.UpdateYUVTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
        int Vpitch
    )
    {
        fixed (byte* __dsl_Vplane = Vplane)
        fixed (byte* __dsl_Uplane = Uplane)
        fixed (byte* __dsl_Yplane = Yplane)
        fixed (Rect* __dsl_rect = rect)
        fixed (SDL_Texture* __dsl_texture = texture)
        {
            return (int)
                ((ISdl)this).UpdateYUVTexture(
                    __dsl_texture,
                    __dsl_rect,
                    __dsl_Yplane,
                    Ypitch,
                    __dsl_Uplane,
                    Upitch,
                    __dsl_Vplane,
                    Vpitch
                );
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_UpdateYUVTexture")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int UpdateYUVTexture(
        Ref<SDL_Texture> texture,
        [NativeTypeName("const SDL_Rect *")] Ref<Rect> rect,
        [NativeTypeName("const Uint8 *")] Ref<byte> Yplane,
        int Ypitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Uplane,
        int Upitch,
        [NativeTypeName("const Uint8 *")] Ref<byte> Vplane,
        int Vpitch
    ) => DllImport.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex) =>
        (
            (delegate* unmanaged<SDL_Condition*, SDL_Mutex*, int>)
                nativeContext.LoadFunction("WaitCondition", "SDL3")
        )(cond, mutex);

    [NativeFunction("SDL3", EntryPoint = "WaitCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex) =>
        DllImport.WaitCondition(cond, mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitCondition(Ref<SDL_Condition> cond, Ref<SDL_Mutex> mutex)
    {
        fixed (SDL_Mutex* __dsl_mutex = mutex)
        fixed (SDL_Condition* __dsl_cond = cond)
        {
            return (int)((ISdl)this).WaitCondition(__dsl_cond, __dsl_mutex);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitCondition")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitCondition(Ref<SDL_Condition> cond, Ref<SDL_Mutex> mutex) =>
        DllImport.WaitCondition(cond, mutex);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitConditionTimeout(
        SDL_Condition* cond,
        SDL_Mutex* mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) =>
        (
            (delegate* unmanaged<SDL_Condition*, SDL_Mutex*, int, int>)
                nativeContext.LoadFunction("WaitConditionTimeout", "SDL3")
        )(cond, mutex, timeoutMS);

    [NativeFunction("SDL3", EntryPoint = "WaitConditionTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitConditionTimeout(
        SDL_Condition* cond,
        SDL_Mutex* mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitConditionTimeout(cond, mutex, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitConditionTimeout(
        Ref<SDL_Condition> cond,
        Ref<SDL_Mutex> mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    )
    {
        fixed (SDL_Mutex* __dsl_mutex = mutex)
        fixed (SDL_Condition* __dsl_cond = cond)
        {
            return (int)((ISdl)this).WaitConditionTimeout(__dsl_cond, __dsl_mutex, timeoutMS);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitConditionTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitConditionTimeout(
        Ref<SDL_Condition> cond,
        Ref<SDL_Mutex> mutex,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitConditionTimeout(cond, mutex, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitEvent(Event* @event) =>
        ((delegate* unmanaged<Event*, int>)nativeContext.LoadFunction("WaitEvent", "SDL3"))(@event);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WaitEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitEvent(Event* @event) => DllImport.WaitEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WaitEvent(Ref<Event> @event)
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WaitEvent(__dsl_event);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitEvent")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WaitEvent(Ref<Event> @event) => DllImport.WaitEvent(@event);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitEventTimeout(Event* @event, [NativeTypeName("Sint32")] int timeoutMS) =>
        (
            (delegate* unmanaged<Event*, int, int>)
                nativeContext.LoadFunction("WaitEventTimeout", "SDL3")
        )(@event, timeoutMS);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WaitEventTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitEventTimeout(Event* @event, [NativeTypeName("Sint32")] int timeoutMS) =>
        DllImport.WaitEventTimeout(@event, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WaitEventTimeout(
        Ref<Event> @event,
        [NativeTypeName("Sint32")] int timeoutMS
    )
    {
        fixed (Event* __dsl_event = @event)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WaitEventTimeout(__dsl_event, timeoutMS);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitEventTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WaitEventTimeout(
        Ref<Event> @event,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitEventTimeout(@event, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitSemaphore(SDL_Semaphore* sem) =>
        (
            (delegate* unmanaged<SDL_Semaphore*, int>)
                nativeContext.LoadFunction("WaitSemaphore", "SDL3")
        )(sem);

    [NativeFunction("SDL3", EntryPoint = "WaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitSemaphore(SDL_Semaphore* sem) => DllImport.WaitSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitSemaphore(Ref<SDL_Semaphore> sem)
    {
        fixed (SDL_Semaphore* __dsl_sem = sem)
        {
            return (int)((ISdl)this).WaitSemaphore(__dsl_sem);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphore")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitSemaphore(Ref<SDL_Semaphore> sem) => DllImport.WaitSemaphore(sem);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitSemaphoreTimeout(SDL_Semaphore* sem, [NativeTypeName("Sint32")] int timeoutMS) =>
        (
            (delegate* unmanaged<SDL_Semaphore*, int, int>)
                nativeContext.LoadFunction("WaitSemaphoreTimeout", "SDL3")
        )(sem, timeoutMS);

    [NativeFunction("SDL3", EntryPoint = "WaitSemaphoreTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitSemaphoreTimeout(
        SDL_Semaphore* sem,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitSemaphoreTimeout(sem, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WaitSemaphoreTimeout(Ref<SDL_Semaphore> sem, [NativeTypeName("Sint32")] int timeoutMS)
    {
        fixed (SDL_Semaphore* __dsl_sem = sem)
        {
            return (int)((ISdl)this).WaitSemaphoreTimeout(__dsl_sem, timeoutMS);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitSemaphoreTimeout")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WaitSemaphoreTimeout(
        Ref<SDL_Semaphore> sem,
        [NativeTypeName("Sint32")] int timeoutMS
    ) => DllImport.WaitSemaphoreTimeout(sem, timeoutMS);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WaitThread(SDL_Thread* thread, int* status) =>
        (
            (delegate* unmanaged<SDL_Thread*, int*, void>)
                nativeContext.LoadFunction("WaitThread", "SDL3")
        )(thread, status);

    [NativeFunction("SDL3", EntryPoint = "WaitThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WaitThread(SDL_Thread* thread, int* status) =>
        DllImport.WaitThread(thread, status);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WaitThread(Ref<SDL_Thread> thread, Ref<int> status)
    {
        fixed (int* __dsl_status = status)
        fixed (SDL_Thread* __dsl_thread = thread)
        {
            ((ISdl)this).WaitThread(__dsl_thread, __dsl_status);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WaitThread")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WaitThread(Ref<SDL_Thread> thread, Ref<int> status) =>
        DllImport.WaitThread(thread, status);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WarpMouseGlobal(float x, float y) =>
        (
            (delegate* unmanaged<float, float, int>)
                nativeContext.LoadFunction("WarpMouseGlobal", "SDL3")
        )(x, y);

    [NativeFunction("SDL3", EntryPoint = "WarpMouseGlobal")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WarpMouseGlobal(float x, float y) => DllImport.WarpMouseGlobal(x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WarpMouseInWindow(SDL_Window* window, float x, float y) =>
        (
            (delegate* unmanaged<SDL_Window*, float, float, void>)
                nativeContext.LoadFunction("WarpMouseInWindow", "SDL3")
        )(window, x, y);

    [NativeFunction("SDL3", EntryPoint = "WarpMouseInWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WarpMouseInWindow(SDL_Window* window, float x, float y) =>
        DllImport.WarpMouseInWindow(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    void ISdl.WarpMouseInWindow(Ref<SDL_Window> window, float x, float y)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            ((ISdl)this).WarpMouseInWindow(__dsl_window, x, y);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WarpMouseInWindow")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void WarpMouseInWindow(Ref<SDL_Window> window, float x, float y) =>
        DllImport.WarpMouseInWindow(window, x, y);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    uint ISdl.WasInit([NativeTypeName("Uint32")] uint flags) =>
        ((delegate* unmanaged<uint, uint>)nativeContext.LoadFunction("WasInit", "SDL3"))(flags);

    [return: NativeTypeName("Uint32")]
    [NativeFunction("SDL3", EntryPoint = "WasInit")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static uint WasInit([NativeTypeName("Uint32")] uint flags) => DllImport.WasInit(flags);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WindowHasSurface(SDL_Window* window) =>
        (
            (delegate* unmanaged<SDL_Window*, int>)
                nativeContext.LoadFunction("WindowHasSurface", "SDL3")
        )(window);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WindowHasSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WindowHasSurface(SDL_Window* window) => DllImport.WindowHasSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WindowHasSurface(Ref<SDL_Window> window)
    {
        fixed (SDL_Window* __dsl_window = window)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WindowHasSurface(__dsl_window);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WindowHasSurface")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WindowHasSurface(Ref<SDL_Window> window) =>
        DllImport.WindowHasSurface(window);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.WriteIO(
        SDL_IOStream* context,
        [NativeTypeName("const void *")] void* ptr,
        [NativeTypeName("size_t")] nuint size
    ) =>
        (
            (delegate* unmanaged<SDL_IOStream*, void*, nuint, nuint>)
                nativeContext.LoadFunction("WriteIO", "SDL3")
        )(context, ptr, size);

    [return: NativeTypeName("size_t")]
    [NativeFunction("SDL3", EntryPoint = "WriteIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint WriteIO(
        SDL_IOStream* context,
        [NativeTypeName("const void *")] void* ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.WriteIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    nuint ISdl.WriteIO(
        Ref<SDL_IOStream> context,
        [NativeTypeName("const void *")] Ref ptr,
        [NativeTypeName("size_t")] nuint size
    )
    {
        fixed (void* __dsl_ptr = ptr)
        fixed (SDL_IOStream* __dsl_context = context)
        {
            return (nuint)((ISdl)this).WriteIO(__dsl_context, __dsl_ptr, size);
        }
    }

    [return: NativeTypeName("size_t")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteIO")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static nuint WriteIO(
        Ref<SDL_IOStream> context,
        [NativeTypeName("const void *")] Ref ptr,
        [NativeTypeName("size_t")] nuint size
    ) => DllImport.WriteIO(context, ptr, size);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteS16BE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, short, int>)
                nativeContext.LoadFunction("WriteS16BE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteS16BE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
        DllImport.WriteS16BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteS16BE(Ref<SDL_IOStream> dst, [NativeTypeName("Sint16")] short value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteS16BE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteS16BE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.WriteS16BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteS16LE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, short, int>)
                nativeContext.LoadFunction("WriteS16LE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteS16LE(SDL_IOStream* dst, [NativeTypeName("Sint16")] short value) =>
        DllImport.WriteS16LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteS16LE(Ref<SDL_IOStream> dst, [NativeTypeName("Sint16")] short value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteS16LE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteS16LE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Sint16")] short value
    ) => DllImport.WriteS16LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteS32BE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int, int>)
                nativeContext.LoadFunction("WriteS32BE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteS32BE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
        DllImport.WriteS32BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteS32BE(Ref<SDL_IOStream> dst, [NativeTypeName("Sint32")] int value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteS32BE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteS32BE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Sint32")] int value
    ) => DllImport.WriteS32BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteS32LE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, int, int>)
                nativeContext.LoadFunction("WriteS32LE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteS32LE(SDL_IOStream* dst, [NativeTypeName("Sint32")] int value) =>
        DllImport.WriteS32LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteS32LE(Ref<SDL_IOStream> dst, [NativeTypeName("Sint32")] int value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteS32LE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteS32LE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Sint32")] int value
    ) => DllImport.WriteS32LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteS64BE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, long, int>)
                nativeContext.LoadFunction("WriteS64BE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteS64BE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
        DllImport.WriteS64BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteS64BE(Ref<SDL_IOStream> dst, [NativeTypeName("Sint64")] long value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteS64BE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteS64BE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.WriteS64BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteS64LE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, long, int>)
                nativeContext.LoadFunction("WriteS64LE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteS64LE(SDL_IOStream* dst, [NativeTypeName("Sint64")] long value) =>
        DllImport.WriteS64LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteS64LE(Ref<SDL_IOStream> dst, [NativeTypeName("Sint64")] long value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteS64LE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteS64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteS64LE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Sint64")] long value
    ) => DllImport.WriteS64LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteStorageFile(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const void *")] void* source,
        [NativeTypeName("Uint64")] ulong length
    ) =>
        (
            (delegate* unmanaged<SDL_Storage*, sbyte*, void*, ulong, int>)
                nativeContext.LoadFunction("WriteStorageFile", "SDL3")
        )(storage, path, source, length);

    [NativeFunction("SDL3", EntryPoint = "WriteStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteStorageFile(
        SDL_Storage* storage,
        [NativeTypeName("const char *")] sbyte* path,
        [NativeTypeName("const void *")] void* source,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.WriteStorageFile(storage, path, source, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteStorageFile(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const void *")] Ref source,
        [NativeTypeName("Uint64")] ulong length
    )
    {
        fixed (void* __dsl_source = source)
        fixed (sbyte* __dsl_path = path)
        fixed (SDL_Storage* __dsl_storage = storage)
        {
            return (int)
                ((ISdl)this).WriteStorageFile(__dsl_storage, __dsl_path, __dsl_source, length);
        }
    }

    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteStorageFile")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteStorageFile(
        Ref<SDL_Storage> storage,
        [NativeTypeName("const char *")] Ref<sbyte> path,
        [NativeTypeName("const void *")] Ref source,
        [NativeTypeName("Uint64")] ulong length
    ) => DllImport.WriteStorageFile(storage, path, source, length);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU16BE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ushort, int>)
                nativeContext.LoadFunction("WriteU16BE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU16BE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
        DllImport.WriteU16BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU16BE(Ref<SDL_IOStream> dst, [NativeTypeName("Uint16")] ushort value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU16BE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU16BE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint16")] ushort value
    ) => DllImport.WriteU16BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU16LE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ushort, int>)
                nativeContext.LoadFunction("WriteU16LE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU16LE(SDL_IOStream* dst, [NativeTypeName("Uint16")] ushort value) =>
        DllImport.WriteU16LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU16LE(Ref<SDL_IOStream> dst, [NativeTypeName("Uint16")] ushort value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU16LE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU16LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU16LE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint16")] ushort value
    ) => DllImport.WriteU16LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU32BE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, uint, int>)
                nativeContext.LoadFunction("WriteU32BE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU32BE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
        DllImport.WriteU32BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU32BE(Ref<SDL_IOStream> dst, [NativeTypeName("Uint32")] uint value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU32BE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU32BE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint32")] uint value
    ) => DllImport.WriteU32BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU32LE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, uint, int>)
                nativeContext.LoadFunction("WriteU32LE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU32LE(SDL_IOStream* dst, [NativeTypeName("Uint32")] uint value) =>
        DllImport.WriteU32LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU32LE(Ref<SDL_IOStream> dst, [NativeTypeName("Uint32")] uint value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU32LE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU32LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU32LE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint32")] uint value
    ) => DllImport.WriteU32LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU64BE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ulong, int>)
                nativeContext.LoadFunction("WriteU64BE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU64BE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
        DllImport.WriteU64BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU64BE(Ref<SDL_IOStream> dst, [NativeTypeName("Uint64")] ulong value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU64BE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64BE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU64BE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint64")] ulong value
    ) => DllImport.WriteU64BE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU64LE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, ulong, int>)
                nativeContext.LoadFunction("WriteU64LE", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU64LE(SDL_IOStream* dst, [NativeTypeName("Uint64")] ulong value) =>
        DllImport.WriteU64LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU64LE(Ref<SDL_IOStream> dst, [NativeTypeName("Uint64")] ulong value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU64LE(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU64LE")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU64LE(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint64")] ulong value
    ) => DllImport.WriteU64LE(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    int ISdl.WriteU8(SDL_IOStream* dst, [NativeTypeName("Uint8")] byte value) =>
        (
            (delegate* unmanaged<SDL_IOStream*, byte, int>)
                nativeContext.LoadFunction("WriteU8", "SDL3")
        )(dst, value);

    [return: NativeTypeName("SDL_bool")]
    [NativeFunction("SDL3", EntryPoint = "WriteU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static int WriteU8(SDL_IOStream* dst, [NativeTypeName("Uint8")] byte value) =>
        DllImport.WriteU8(dst, value);

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    MaybeBool<int> ISdl.WriteU8(Ref<SDL_IOStream> dst, [NativeTypeName("Uint8")] byte value)
    {
        fixed (SDL_IOStream* __dsl_dst = dst)
        {
            return (MaybeBool<int>)(int)((ISdl)this).WriteU8(__dsl_dst, value);
        }
    }

    [return: NativeTypeName("SDL_bool")]
    [Transformed]
    [NativeFunction("SDL3", EntryPoint = "SDL_WriteU8")]
    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static MaybeBool<int> WriteU8(
        Ref<SDL_IOStream> dst,
        [NativeTypeName("Uint8")] byte value
    ) => DllImport.WriteU8(dst, value);
}
